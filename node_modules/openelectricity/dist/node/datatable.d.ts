/**
 * DataTable implementation for OpenElectricity API
 * Provides a pandas/polars-like interface for time series data
 */
import type { INetworkTimeSeries } from "./types";
export interface IDataTableRow {
    interval: Date;
    [key: string]: Date | string | number | boolean | null;
}
export interface IDescribeResult {
    count: number;
    mean: number;
    std: number;
    min: number;
    q25: number;
    median: number;
    q75: number;
    max: number;
}
export declare class DataTable {
    private rows;
    private groupings;
    private metrics;
    private cache;
    private rowsMap;
    constructor(rows: IDataTableRow[], groupings: string[], metrics: Map<string, string>);
    /**
     * Create a DataTable from NetworkTimeSeries responses
     */
    static fromNetworkTimeSeries(data: INetworkTimeSeries[]): DataTable;
    private createRowMap;
    private createRowKey;
    private createColumnIndexes;
    /**
     * Get a row by its unique key
     * Used internally for efficient row lookups
     */
    private getRowByKey;
    /**
     * Update or add a row by its key
     * Used internally for merging data
     */
    private setRowByKey;
    /**
     * Get all rows in the table
     */
    getRows(): IDataTableRow[];
    /**
     * Get available grouping columns
     */
    getGroupings(): string[];
    /**
     * Get the metrics and their units
     */
    getMetrics(): Map<string, string>;
    /**
     * Get the latest timestamp in the data
     */
    getLatestTimestamp(): number;
    /**
     * Filter rows based on a condition
     */
    filter(condition: (row: IDataTableRow) => boolean): DataTable;
    private tryIndexFilter;
    /**
     * Select specific columns
     */
    select(columns: string[]): DataTable;
    /**
     * Group by specified columns and aggregate values
     */
    groupBy(columns: string[], aggregation?: "sum" | "mean"): DataTable;
    /**
     * Sort rows by specified columns
     */
    sortBy(columns: string[], ascending?: boolean): DataTable;
    /**
     * Convert to console-friendly format
     */
    toConsole(): Record<string, unknown>[];
    /**
     * Generate summary statistics for numeric columns
     */
    describe(): Record<string, IDescribeResult>;
}
/**
 * Create a DataTable from NetworkTimeSeries responses
 */
export declare function createDataTable(data: INetworkTimeSeries[]): DataTable;
