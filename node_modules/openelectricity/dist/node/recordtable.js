"use strict";
/**
 * RecordTable implementation for OpenElectricity API
 * Provides a simple interface for navigating record-style data like facilities
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordTable = void 0;
class RecordTable {
    constructor(records) {
        this.records = records;
        this.columnNames = records.length > 0 ? Object.keys(records[0]) : [];
    }
    /**
     * Get all records
     */
    getRecords() {
        return this.records;
    }
    /**
     * Get available column names
     */
    getColumns() {
        return this.columnNames;
    }
    /**
     * Get a subset of columns
     */
    select(columns) {
        const selectedRecords = this.records.map((record) => {
            const newRecord = {};
            columns.forEach((col) => {
                if (col in record) {
                    newRecord[col] = record[col];
                }
            });
            return newRecord;
        });
        return new RecordTable(selectedRecords);
    }
    /**
     * Filter records based on a condition
     */
    filter(condition) {
        return new RecordTable(this.records.filter(condition));
    }
    /**
     * Sort records by specified columns
     */
    sortBy(columns, ascending = true) {
        const sortedRecords = [...this.records].sort((a, b) => {
            for (const col of columns) {
                const aVal = a[col];
                const bVal = b[col];
                if (aVal === bVal)
                    continue;
                if (aVal === null)
                    return ascending ? -1 : 1;
                if (bVal === null)
                    return ascending ? 1 : -1;
                if (aVal < bVal)
                    return ascending ? -1 : 1;
                if (aVal > bVal)
                    return ascending ? 1 : -1;
            }
            return 0;
        });
        return new RecordTable(sortedRecords);
    }
    /**
     * Get unique values in a column
     */
    unique(column) {
        const values = new Set();
        this.records.forEach((record) => {
            values.add(record[column]);
        });
        return Array.from(values);
    }
    /**
     * Get a slice of records
     */
    slice(start, end) {
        return new RecordTable(this.records.slice(start, end));
    }
    /**
     * Convert to array format
     */
    toArray() {
        return [...this.records];
    }
    /**
     * Convert to JSON string with pretty formatting
     */
    toString() {
        return JSON.stringify(this.records, null, 2);
    }
}
exports.RecordTable = RecordTable;
//# sourceMappingURL=recordtable.js.map