/**
 * OpenElectricity API Client
 *
 * A TypeScript client for the OpenElectricity API v4.
 * Provides access to electricity network data and metrics.
 */
import { type IRecord } from "./recordtable";
import type { DataMetric, FacilityResponse, IAPIErrorResponse, IAPIResponse, IFacilityParams, IFacilityPollutionParams, IFacilityTimeSeriesParams, IMarketTimeSeriesParams, IMetricsResponse, INetworkTimeSeriesParams, ITimeSeriesResponse, IUser, IValidationErrorDetail, MarketMetric, NetworkCode } from "./types";
export interface IFacilityEnergy {
    facility_code: string;
    network_code: NetworkCode;
    energy: number;
    interval: string;
    start: string;
    end: string;
}
export interface IFacilityRecord extends IRecord {
    facility_code: string;
    facility_name: string;
    facility_network: string;
    facility_region: string;
    facility_description: string | null;
    unit_code: string;
    unit_fueltech: string | null;
    unit_status: string | null;
    unit_capacity: number | null;
    unit_emissions_factor: number | null;
    unit_first_seen: string | null;
    unit_last_seen: string | null;
    unit_dispatch_type: string;
    [key: string]: string | number | boolean | null;
}
export declare class OpenElectricityError extends Error {
    response?: IAPIErrorResponse | undefined;
    statusCode?: number | undefined;
    details?: (IValidationErrorDetail | Record<string, unknown>) | undefined;
    constructor(message: string, response?: IAPIErrorResponse | undefined, statusCode?: number | undefined, details?: (IValidationErrorDetail | Record<string, unknown>) | undefined);
}
export declare class NoDataFound extends Error {
    constructor(message: string);
}
export declare class OpenElectricityClient {
    private baseUrl;
    private apiKey;
    constructor(options?: {
        apiKey?: string;
        baseUrl?: string;
    });
    private request;
    private isAPIErrorResponse;
    /**
     * Get available metrics and their metadata
     * Useful for discovering what metrics are supported by the API
     */
    getAvailableMetrics(): Promise<IMetricsResponse>;
    /**
     * Get data from the /data/network endpoint
     * Supports power, energy, emissions and market_value metrics
     *
     * @remarks
     * dateStart and dateEnd should be timezone naive dates in network time.
     * If timezone information is provided, it will be stripped and a warning will be logged.
     */
    getNetworkData(networkCode: NetworkCode, metrics: DataMetric[], params?: INetworkTimeSeriesParams): Promise<ITimeSeriesResponse>;
    /**
     * Get data from the /facility endpoint
     * Supports power, energy, emissions and market_value metrics
     *
     * @remarks
     * dateStart and dateEnd should be timezone naive dates in network time.
     * If timezone information is provided, it will be stripped and a warning will be logged.
     */
    getFacilityData(networkCode: NetworkCode, facilityCodes: string | string[], metrics: DataMetric[], params?: IFacilityTimeSeriesParams): Promise<ITimeSeriesResponse>;
    /**
     * Get data from the /market/network endpoint
     * Supports price, demand and demand_energy metrics
     *
     * @remarks
     * dateStart and dateEnd should be timezone naive dates in network time.
     * If timezone information is provided, it will be stripped and a warning will be logged.
     */
    getMarket(networkCode: NetworkCode, metrics: MarketMetric[], params?: IMarketTimeSeriesParams): Promise<ITimeSeriesResponse>;
    /**
     * Get facilities and their units from the /facilities endpoint
     * Optionally filter by status, fueltech, network and region
     * Returns empty result if no facilities match the filters (416 status code)
     */
    getFacilities(params?: IFacilityParams): Promise<FacilityResponse>;
    /**
     * Get pollution data for facilities with NPI tracking
     * Returns time series data for pollutants from the National Pollutant Inventory
     * @param params Parameters for filtering pollution data
     * @returns Promise with time series response containing pollution data
     */
    getFacilityPollution(params?: IFacilityPollutionParams): Promise<ITimeSeriesResponse>;
    /**
     * Get current user information
     */
    getCurrentUser(): Promise<IAPIResponse<IUser>>;
}
