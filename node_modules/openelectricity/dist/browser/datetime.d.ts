/**
 * Datetime utilities for OpenElectricity
 *
 * This module provides utilities for handling dates and times in the OpenElectricity API.
 * All functions are timezone-aware and handle network-specific timezone offsets.
 */
import type { NetworkCode } from "./types";
/**
 * Get the timezone offset in hours for a network
 *
 * @param network The network code
 * @returns Timezone offset in hours (e.g. 10 for AEST/UTC+10)
 *
 * @example
 * ```typescript
 * getNetworkTimezone("NEM") // Returns 10 (AEST/UTC+10)
 * getNetworkTimezone("WEM") // Returns 8 (AWST/UTC+8)
 * ```
 */
export declare function getNetworkTimezone(network: NetworkCode): number;
/**
 * Get timezone offset in milliseconds for a network
 *
 * @param network The network code
 * @returns Timezone offset in milliseconds
 */
export declare function getNetworkTimezoneOffset(network: NetworkCode): number;
/**
 * Check if a date string is timezone aware (has timezone information)
 *
 * @param dateStr Date string to check
 * @returns true if the date string contains timezone information
 */
export declare function isAware(dateStr: string | Date): boolean;
/**
 * Make a date timezone aware by adding the network's timezone offset
 *
 * @param date Date string or Date object to make timezone aware
 * @param network Network code to get timezone from
 * @returns ISO string with timezone information
 */
export declare function makeAware(date: string | Date, network: NetworkCode): string;
/**
 * Strip timezone information from a date string
 *
 * @param dateStr Date string to strip timezone from
 * @returns Date string without timezone information
 */
export declare function stripTimezone(dateStr: string): string;
/**
 * Get the last complete 5-minute interval for a network
 *
 * @param network Network code to get timezone from
 * @returns ISO string of the last complete 5-minute interval in network time
 */
export declare function getLastCompleteInterval(network: NetworkCode): string;
/**
 * Creates a date from an ISO string with timezone information.
 *
 * The JavaScript Date constructor correctly handles ISO 8601 strings with timezone
 * offsets (e.g., "2024-04-07T00:00:00+10:00"), so no manual adjustment is needed.
 *
 * @param isoString ISO 8601 date string with timezone offset
 * @returns Date object representing the correct point in time
 */
export declare function createNetworkDate(isoString: string): Date;
