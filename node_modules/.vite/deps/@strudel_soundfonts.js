import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/sfumato/node_modules/soundfont2/lib/SoundFont2.js
var require_SoundFont2 = __commonJS({
  "node_modules/sfumato/node_modules/soundfont2/lib/SoundFont2.js"(exports, module) {
    !(function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("SoundFont2", [], t) : "object" == typeof exports ? exports.SoundFont2 = t() : e.SoundFont2 = t();
    })(window, function() {
      return (function(e) {
        var t = {};
        function r(n) {
          if (t[n]) return t[n].exports;
          var o = t[n] = { i: n, l: false, exports: {} };
          return e[n].call(o.exports, o, o.exports, r), o.l = true, o.exports;
        }
        return r.m = e, r.c = t, r.d = function(e2, t2, n) {
          r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
        }, r.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, r.t = function(e2, t2) {
          if (1 & t2 && (e2 = r(e2)), 8 & t2) return e2;
          if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule) return e2;
          var n = /* @__PURE__ */ Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2) for (var o in e2) r.d(n, o, (function(t3) {
            return e2[t3];
          }).bind(null, o));
          return n;
        }, r.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return r.d(t2, "a", t2), t2;
        }, r.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, r.p = "", r(r.s = "./src/index.ts");
      })({ "./src/chunk.ts": (
        /*!**********************!*\
          !*** ./src/chunk.ts ***!
          \**********************/
        /*! exports provided: SF2Chunk */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "SF2Chunk", function() {
            return f2;
          });
          var n = r(
            /*! ./riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ./constants */
            "./src/constants.ts"
          ), i2 = r(
            /*! ./chunks */
            "./src/chunks/index.ts"
          );
          function s(e2) {
            return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
              return typeof e3;
            } : function(e3) {
              return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
            })(e2);
          }
          function u(e2, t2) {
            for (var r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
            }
          }
          function a(e2) {
            return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
              return e3.__proto__ || Object.getPrototypeOf(e3);
            })(e2);
          }
          function c(e2, t2) {
            return (c = Object.setPrototypeOf || function(e3, t3) {
              return e3.__proto__ = t3, e3;
            })(e2, t2);
          }
          function l2(e2) {
            if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e2;
          }
          var f2 = (function(e2) {
            function t2(e3) {
              var r3, n2, o2, i3, u2, c2;
              return (function(e4, t3) {
                if (!(e4 instanceof t3)) throw new TypeError("Cannot call a class as a function");
              })(this, t2), n2 = this, r3 = !(o2 = a(t2).call(this, e3.id, e3.length, e3.buffer, e3.subChunks)) || "object" !== s(o2) && "function" != typeof o2 ? l2(n2) : o2, i3 = l2(l2(r3)), c2 = void 0, (u2 = "subChunks") in i3 ? Object.defineProperty(i3, u2, { value: c2, enumerable: true, configurable: true, writable: true }) : i3[u2] = c2, r3.subChunks = e3.subChunks.map(function(e4) {
                return new t2(e4);
              }), r3;
            }
            var r2, f3, d2;
            return (function(e3, t3) {
              if ("function" != typeof t3 && null !== t3) throw new TypeError("Super expression must either be null or a function");
              e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), t3 && c(e3, t3);
            })(t2, n["RIFFChunk"]), r2 = t2, (f3 = [{ key: "getMetaData", value: function() {
              if ("LIST" !== this.id) throw new n.ParseError("Unexpected chunk ID", "'LIST'", "'".concat(this.id, "'"));
              var e3 = this.subChunks.reduce(function(e4, t3) {
                if ("ifil" === t3.id || "iver" === t3.id) {
                  if (t3.length !== o.SF_VERSION_LENGTH) throw new n.ParseError("Invalid size for the '".concat(t3.id, "' sub-chunk"));
                  e4[t3.id] = "".concat(t3.getInt16(), ".").concat(t3.getInt16(2));
                } else e4[t3.id] = t3.getString();
                return e4;
              }, {});
              if (!e3.ifil) throw new n.ParseError("Missing required 'ifil' sub-chunk");
              if (!e3.INAM) throw new n.ParseError("Missing required 'INAM' sub-chunk");
              return { version: e3.ifil, soundEngine: e3.isng || "EMU8000", name: e3.INAM, rom: e3.irom, romVersion: e3.iver, creationDate: e3.ICRD, author: e3.IENG, product: e3.IPRD, copyright: e3.ICOP, comments: e3.ICMT, createdBy: e3.ISFT };
            } }, { key: "getSampleData", value: function() {
              if ("LIST" !== this.id) throw new n.ParseError("Unexpected chunk ID", "'LIST'", "'".concat(this.id, "'"));
              var e3 = this.subChunks[0];
              if ("smpl" !== e3.id) throw new n.ParseError("Invalid chunk signature", "'smpl'", "'".concat(e3.id, "'"));
              return e3.buffer;
            } }, { key: "getPresetData", value: function() {
              if ("LIST" !== this.id) throw new n.ParseError("Unexpected chunk ID", "'LIST'", "'".concat(this.id, "'"));
              return { presetHeaders: Object(i2.getPresetHeaders)(this.subChunks[0]), presetZones: Object(i2.getZones)(this.subChunks[1], "pbag"), presetModulators: Object(i2.getModulators)(this.subChunks[2], "pmod"), presetGenerators: Object(i2.getGenerators)(this.subChunks[3], "pgen"), instrumentHeaders: Object(i2.getInstrumentHeaders)(this.subChunks[4]), instrumentZones: Object(i2.getZones)(this.subChunks[5], "ibag"), instrumentModulators: Object(i2.getModulators)(this.subChunks[6], "imod"), instrumentGenerators: Object(i2.getGenerators)(this.subChunks[7], "igen"), sampleHeaders: Object(i2.getSampleHeaders)(this.subChunks[8]) };
            } }]) && u(r2.prototype, f3), d2 && u(r2, d2), t2;
          })();
        }
      ), "./src/chunks/generators.ts": (
        /*!**********************************!*\
          !*** ./src/chunks/generators.ts ***!
          \**********************************/
        /*! exports provided: getGenerators */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getGenerators", function() {
            return c;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/types */
            "./src/types/index.ts"
          ), i2 = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), s = [o.GeneratorType.StartAddrsOffset, o.GeneratorType.EndAddrsOffset, o.GeneratorType.StartLoopAddrsOffset, o.GeneratorType.EndLoopAddrsOffset, o.GeneratorType.StartAddrsCoarseOffset, o.GeneratorType.EndAddrsCoarseOffset, o.GeneratorType.StartLoopAddrsCoarseOffset, o.GeneratorType.KeyNum, o.GeneratorType.Velocity, o.GeneratorType.EndLoopAddrsCoarseOffset, o.GeneratorType.SampleModes, o.GeneratorType.ExclusiveClass, o.GeneratorType.OverridingRootKey], u = [o.GeneratorType.Unused1, o.GeneratorType.Unused2, o.GeneratorType.Unused3, o.GeneratorType.Unused4, o.GeneratorType.Reserved1, o.GeneratorType.Reserved2, o.GeneratorType.Reserved3], a = [o.GeneratorType.KeyRange, o.GeneratorType.VelRange], c = function(e2, t2) {
            if (e2.id !== t2) throw new n.ParseError("Unexpected chunk ID", "'".concat(t2, "'"), "'".concat(e2.id, "'"));
            if (e2.length % i2.SF_GENERATOR_SIZE) throw new n.ParseError("Invalid size for the '".concat(t2, "' sub-chunk"));
            return e2.iterate(function(e3) {
              var r2 = e3.getInt16();
              return o.GeneratorType[r2] ? "pgen" === t2 && s.includes(r2) ? null : "igen" === t2 && u.includes(r2) ? null : a.includes(r2) ? { id: r2, range: { lo: e3.getByte(), hi: e3.getByte() } } : { id: r2, value: e3.getInt16BE() } : null;
            });
          };
        }
      ), "./src/chunks/index.ts": (
        /*!*****************************!*\
          !*** ./src/chunks/index.ts ***!
          \*****************************/
        /*! exports provided: getGenerators, getModulators, getZones, getItemsInZone, getInstrumentHeaders, getPresetHeaders, getSampleHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./instruments */
            "./src/chunks/instruments/index.ts"
          );
          r.d(t, "getInstrumentHeaders", function() {
            return n.getInstrumentHeaders;
          });
          var o = r(
            /*! ./presets */
            "./src/chunks/presets/index.ts"
          );
          r.d(t, "getPresetHeaders", function() {
            return o.getPresetHeaders;
          });
          var i2 = r(
            /*! ./samples */
            "./src/chunks/samples/index.ts"
          );
          r.d(t, "getSampleHeaders", function() {
            return i2.getSampleHeaders;
          });
          var s = r(
            /*! ./generators */
            "./src/chunks/generators.ts"
          );
          r.d(t, "getGenerators", function() {
            return s.getGenerators;
          });
          var u = r(
            /*! ./modulators */
            "./src/chunks/modulators.ts"
          );
          r.d(t, "getModulators", function() {
            return u.getModulators;
          });
          var a = r(
            /*! ./zones */
            "./src/chunks/zones.ts"
          );
          r.d(t, "getZones", function() {
            return a.getZones;
          }), r.d(t, "getItemsInZone", function() {
            return a.getItemsInZone;
          });
        }
      ), "./src/chunks/instruments/headers.ts": (
        /*!*******************************************!*\
          !*** ./src/chunks/instruments/headers.ts ***!
          \*******************************************/
        /*! exports provided: getInstrumentHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getInstrumentHeaders", function() {
            return i2;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), i2 = function(e2) {
            if ("inst" !== e2.id) throw new n.ParseError("Unexpected chunk ID", "'inst'", "'".concat(e2.id, "'"));
            if (e2.length % o.SF_INSTRUMENT_HEADER_SIZE) throw new n.ParseError("Invalid size for the 'inst' sub-chunk");
            return e2.iterate(function(e3) {
              return { name: e3.getString(), bagIndex: e3.getInt16() };
            });
          };
        }
      ), "./src/chunks/instruments/index.ts": (
        /*!*****************************************!*\
          !*** ./src/chunks/instruments/index.ts ***!
          \*****************************************/
        /*! exports provided: getInstrumentHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./headers */
            "./src/chunks/instruments/headers.ts"
          );
          r.d(t, "getInstrumentHeaders", function() {
            return n.getInstrumentHeaders;
          });
        }
      ), "./src/chunks/modulators.ts": (
        /*!**********************************!*\
          !*** ./src/chunks/modulators.ts ***!
          \**********************************/
        /*! exports provided: getModulators */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getModulators", function() {
            return s;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), i2 = function(e2) {
            return { type: e2 >> 10 & 63, polarity: e2 >> 9 & 1, direction: e2 >> 8 & 1, palette: e2 >> 7 & 1, index: 127 & e2 };
          }, s = function(e2, t2) {
            if (e2.id !== t2) throw new n.ParseError("Unexpected chunk ID", "'".concat(t2, "'"), "'".concat(e2.id, "'"));
            if (e2.length % o.SF_MODULATOR_SIZE) throw new n.ParseError("Invalid size for the '".concat(t2, "' sub-chunk"));
            return e2.iterate(function(e3) {
              return { source: i2(e3.getInt16BE()), id: e3.getInt16BE(), value: e3.getInt16BE(), valueSource: i2(e3.getInt16BE()), transform: e3.getInt16BE() };
            });
          };
        }
      ), "./src/chunks/presets/headers.ts": (
        /*!***************************************!*\
          !*** ./src/chunks/presets/headers.ts ***!
          \***************************************/
        /*! exports provided: getPresetHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getPresetHeaders", function() {
            return i2;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), i2 = function(e2) {
            if ("phdr" !== e2.id) throw new n.ParseError("Invalid chunk ID", "'phdr'", "'".concat(e2.id, "'"));
            if (e2.length % o.SF_PRESET_HEADER_SIZE) throw new n.ParseError("Invalid size for the 'phdr' sub-chunk");
            return e2.iterate(function(e3) {
              return { name: e3.getString(), preset: e3.getInt16(), bank: e3.getInt16(), bagIndex: e3.getInt16(), library: e3.getUInt32(), genre: e3.getUInt32(), morphology: e3.getUInt32() };
            });
          };
        }
      ), "./src/chunks/presets/index.ts": (
        /*!*************************************!*\
          !*** ./src/chunks/presets/index.ts ***!
          \*************************************/
        /*! exports provided: getPresetHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./headers */
            "./src/chunks/presets/headers.ts"
          );
          r.d(t, "getPresetHeaders", function() {
            return n.getPresetHeaders;
          });
        }
      ), "./src/chunks/samples/headers.ts": (
        /*!***************************************!*\
          !*** ./src/chunks/samples/headers.ts ***!
          \***************************************/
        /*! exports provided: getSampleHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getSampleHeaders", function() {
            return i2;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), i2 = function(e2) {
            if ("shdr" !== e2.id) throw new n.ParseError("Unexpected chunk ID", "'shdr'", "'".concat(e2.id, "'"));
            if (e2.length % o.SF_SAMPLE_HEADER_SIZE) throw new n.ParseError("Invalid size for the 'shdr' sub-chunk");
            return e2.iterate(function(e3) {
              return { name: e3.getString(), start: e3.getUInt32(), end: e3.getUInt32(), startLoop: e3.getUInt32(), endLoop: e3.getUInt32(), sampleRate: e3.getUInt32(), originalPitch: e3.getByte(), pitchCorrection: e3.getChar(), link: e3.getInt16(), type: e3.getInt16() };
            });
          };
        }
      ), "./src/chunks/samples/index.ts": (
        /*!*************************************!*\
          !*** ./src/chunks/samples/index.ts ***!
          \*************************************/
        /*! exports provided: getSampleHeaders */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./headers */
            "./src/chunks/samples/headers.ts"
          );
          r.d(t, "getSampleHeaders", function() {
            return n.getSampleHeaders;
          });
        }
      ), "./src/chunks/zones.ts": (
        /*!*****************************!*\
          !*** ./src/chunks/zones.ts ***!
          \*****************************/
        /*! exports provided: getZones, getItemsInZone */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getZones", function() {
            return s;
          }), r.d(t, "getItemsInZone", function() {
            return u;
          });
          var n = r(
            /*! ~/riff */
            "./src/riff/index.ts"
          ), o = r(
            /*! ~/constants */
            "./src/constants.ts"
          ), i2 = r(
            /*! ~/types */
            "./src/types/index.ts"
          ), s = function(e2, t2) {
            if (e2.id !== t2) throw new n.ParseError("Unexpected chunk ID", "'".concat(t2, "'"), "'".concat(e2.id, "'"));
            if (e2.length % o.SF_BAG_SIZE) throw new n.ParseError("Invalid size for the '".concat(t2, "' sub-chunk"));
            return e2.iterate(function(e3) {
              return { generatorIndex: e3.getInt16(), modulatorIndex: e3.getInt16() };
            });
          }, u = function(e2, t2, r2, n2, o2, s2) {
            for (var u2 = [], l3 = 0; l3 < e2.length; l3++) {
              for (var f2 = e2[l3], d2 = e2[l3 + 1], p = f2.bagIndex, h2 = d2 ? d2.bagIndex : t2.length, y = [], v = void 0, g2 = p; g2 < h2; g2++) {
                var E = a(g2, t2, r2), m2 = c(g2, t2, n2), b = m2[i2.GeneratorType.KeyRange] && m2[i2.GeneratorType.KeyRange].range, S3 = m2[s2];
                if (S3) {
                  var T3 = o2[S3.value];
                  T3 && y.push({ keyRange: b, modulators: E, generators: m2, reference: T3 });
                } else g2 - p == 0 && (v = { keyRange: b, modulators: E, generators: m2 });
              }
              u2.push({ header: f2, globalZone: v, zones: y });
            }
            return u2;
          }, a = function(e2, t2, r2) {
            var n2 = t2[e2], o2 = t2[e2 + 1], i3 = n2.modulatorIndex, s2 = o2 ? o2.modulatorIndex : t2.length;
            return l2(i3, s2, r2);
          }, c = function(e2, t2, r2) {
            var n2 = t2[e2], o2 = t2[e2 + 1], i3 = n2.generatorIndex, s2 = o2 ? o2.generatorIndex : t2.length;
            return l2(i3, s2, r2);
          }, l2 = function(e2, t2, r2) {
            for (var n2 = {}, o2 = e2; o2 < t2; o2++) {
              var i3 = r2[o2];
              i3 && (n2[i3.id] = i3);
            }
            return n2;
          };
        }
      ), "./src/constants.ts": (
        /*!**************************!*\
          !*** ./src/constants.ts ***!
          \**************************/
        /*! exports provided: SF_VERSION_LENGTH, SF_PRESET_HEADER_SIZE, SF_BAG_SIZE, SF_MODULATOR_SIZE, SF_GENERATOR_SIZE, SF_INSTRUMENT_HEADER_SIZE, SF_SAMPLE_HEADER_SIZE, DEFAULT_SAMPLE_RATE */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "SF_VERSION_LENGTH", function() {
            return n;
          }), r.d(t, "SF_PRESET_HEADER_SIZE", function() {
            return o;
          }), r.d(t, "SF_BAG_SIZE", function() {
            return i2;
          }), r.d(t, "SF_MODULATOR_SIZE", function() {
            return s;
          }), r.d(t, "SF_GENERATOR_SIZE", function() {
            return u;
          }), r.d(t, "SF_INSTRUMENT_HEADER_SIZE", function() {
            return a;
          }), r.d(t, "SF_SAMPLE_HEADER_SIZE", function() {
            return c;
          }), r.d(t, "DEFAULT_SAMPLE_RATE", function() {
            return l2;
          });
          var n = 4, o = 38, i2 = 4, s = 10, u = 4, a = 22, c = 46, l2 = 22050;
        }
      ), "./src/index.ts": (
        /*!**********************!*\
          !*** ./src/index.ts ***!
          \**********************/
        /*! no static exports found */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./types */
            "./src/types/index.ts"
          );
          for (var o in n) "default" !== o && (function(e2) {
            r.d(t, e2, function() {
              return n[e2];
            });
          })(o);
          var i2 = r(
            /*! ./chunk */
            "./src/chunk.ts"
          );
          r.d(t, "SF2Chunk", function() {
            return i2.SF2Chunk;
          });
          var s = r(
            /*! ./constants */
            "./src/constants.ts"
          );
          r.d(t, "SF_VERSION_LENGTH", function() {
            return s.SF_VERSION_LENGTH;
          }), r.d(t, "SF_PRESET_HEADER_SIZE", function() {
            return s.SF_PRESET_HEADER_SIZE;
          }), r.d(t, "SF_BAG_SIZE", function() {
            return s.SF_BAG_SIZE;
          }), r.d(t, "SF_MODULATOR_SIZE", function() {
            return s.SF_MODULATOR_SIZE;
          }), r.d(t, "SF_GENERATOR_SIZE", function() {
            return s.SF_GENERATOR_SIZE;
          }), r.d(t, "SF_INSTRUMENT_HEADER_SIZE", function() {
            return s.SF_INSTRUMENT_HEADER_SIZE;
          }), r.d(t, "SF_SAMPLE_HEADER_SIZE", function() {
            return s.SF_SAMPLE_HEADER_SIZE;
          }), r.d(t, "DEFAULT_SAMPLE_RATE", function() {
            return s.DEFAULT_SAMPLE_RATE;
          });
          var u = r(
            /*! ./soundFont2 */
            "./src/soundFont2.ts"
          );
          r.d(t, "SoundFont2", function() {
            return u.SoundFont2;
          });
        }
      ), "./src/riff/chunkIterator.ts": (
        /*!***********************************!*\
          !*** ./src/riff/chunkIterator.ts ***!
          \***********************************/
        /*! exports provided: ChunkIterator */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "ChunkIterator", function() {
            return s;
          });
          var n = r(
            /*! ~/utils */
            "./src/utils/index.ts"
          );
          function o(e2, t2) {
            for (var r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
            }
          }
          function i2(e2, t2, r2) {
            return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
          }
          var s = (function() {
            function e2(t3) {
              var r3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
              !(function(e3, t4) {
                if (!(e3 instanceof t4)) throw new TypeError("Cannot call a class as a function");
              })(this, e2), i2(this, "target", []), i2(this, "chunk", void 0), i2(this, "position", 0), this.chunk = t3, this.position = r3;
            }
            var t2, r2, s2;
            return t2 = e2, (r2 = [{ key: "iterate", value: function(e3) {
              for (; this.position < this.chunk.length; ) {
                var t3 = e3(this);
                t3 && this.target.push(t3);
              }
            } }, { key: "getString", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 20, t3 = Object(n.getStringFromBuffer)(this.getBuffer(this.position, e3));
              return this.position += e3, t3;
            } }, { key: "getInt16", value: function() {
              return this.chunk.buffer[this.position++] | this.chunk.buffer[this.position++] << 8;
            } }, { key: "getInt16BE", value: function() {
              return this.getInt16() << 16 >> 16;
            } }, { key: "getUInt32", value: function() {
              return (this.chunk.buffer[this.position++] | this.chunk.buffer[this.position++] << 8 | this.chunk.buffer[this.position++] << 16 | this.chunk.buffer[this.position++] << 24) >>> 0;
            } }, { key: "getByte", value: function() {
              return this.chunk.buffer[this.position++];
            } }, { key: "getChar", value: function() {
              return this.chunk.buffer[this.position++] << 24 >> 24;
            } }, { key: "skip", value: function(e3) {
              this.position += e3;
            } }, { key: "getBuffer", value: function(e3, t3) {
              return this.chunk.buffer.subarray(e3, e3 + t3);
            } }, { key: "currentPosition", get: function() {
              return this.position;
            } }]) && o(t2.prototype, r2), s2 && o(t2, s2), e2;
          })();
        }
      ), "./src/riff/index.ts": (
        /*!***************************!*\
          !*** ./src/riff/index.ts ***!
          \***************************/
        /*! exports provided: ChunkIterator, ParseError, parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId, RIFFChunk */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./chunkIterator */
            "./src/riff/chunkIterator.ts"
          );
          r.d(t, "ChunkIterator", function() {
            return n.ChunkIterator;
          });
          var o = r(
            /*! ./parseError */
            "./src/riff/parseError.ts"
          );
          r.d(t, "ParseError", function() {
            return o.ParseError;
          });
          var i2 = r(
            /*! ./parser */
            "./src/riff/parser.ts"
          );
          r.d(t, "parseBuffer", function() {
            return i2.parseBuffer;
          }), r.d(t, "getChunk", function() {
            return i2.getChunk;
          }), r.d(t, "getChunkLength", function() {
            return i2.getChunkLength;
          }), r.d(t, "getSubChunks", function() {
            return i2.getSubChunks;
          }), r.d(t, "getChunkId", function() {
            return i2.getChunkId;
          });
          var s = r(
            /*! ./riffChunk */
            "./src/riff/riffChunk.ts"
          );
          r.d(t, "RIFFChunk", function() {
            return s.RIFFChunk;
          });
        }
      ), "./src/riff/parseError.ts": (
        /*!********************************!*\
          !*** ./src/riff/parseError.ts ***!
          \********************************/
        /*! exports provided: ParseError */
        function(e, t, r) {
          "use strict";
          function n(e2) {
            return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
              return typeof e3;
            } : function(e3) {
              return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
            })(e2);
          }
          function o(e2, t2) {
            return !t2 || "object" !== n(t2) && "function" != typeof t2 ? (function(e3) {
              if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return e3;
            })(e2) : t2;
          }
          function i2(e2) {
            var t2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
            return (i2 = function(e3) {
              if (null === e3 || (r2 = e3, -1 === Function.toString.call(r2).indexOf("[native code]"))) return e3;
              var r2;
              if ("function" != typeof e3) throw new TypeError("Super expression must either be null or a function");
              if (void 0 !== t2) {
                if (t2.has(e3)) return t2.get(e3);
                t2.set(e3, n2);
              }
              function n2() {
                return s(e3, arguments, a(this).constructor);
              }
              return n2.prototype = Object.create(e3.prototype, { constructor: { value: n2, enumerable: false, writable: true, configurable: true } }), u(n2, e3);
            })(e2);
          }
          function s(e2, t2, r2) {
            return (s = (function() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if ("function" == typeof Proxy) return true;
              try {
                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                })), true;
              } catch (e3) {
                return false;
              }
            })() ? Reflect.construct : function(e3, t3, r3) {
              var n2 = [null];
              n2.push.apply(n2, t3);
              var o2 = new (Function.bind.apply(e3, n2))();
              return r3 && u(o2, r3.prototype), o2;
            }).apply(null, arguments);
          }
          function u(e2, t2) {
            return (u = Object.setPrototypeOf || function(e3, t3) {
              return e3.__proto__ = t3, e3;
            })(e2, t2);
          }
          function a(e2) {
            return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
              return e3.__proto__ || Object.getPrototypeOf(e3);
            })(e2);
          }
          r.r(t), r.d(t, "ParseError", function() {
            return c;
          });
          var c = (function(e2) {
            function t2(e3, r2, n2) {
              return (function(e4, t3) {
                if (!(e4 instanceof t3)) throw new TypeError("Cannot call a class as a function");
              })(this, t2), o(this, a(t2).call(this, "".concat(e3).concat(r2 && n2 ? ", expected ".concat(r2, ", received ").concat(n2) : "")));
            }
            return (function(e3, t3) {
              if ("function" != typeof t3 && null !== t3) throw new TypeError("Super expression must either be null or a function");
              e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), t3 && u(e3, t3);
            })(t2, i2(Error)), t2;
          })();
        }
      ), "./src/riff/parser.ts": (
        /*!****************************!*\
          !*** ./src/riff/parser.ts ***!
          \****************************/
        /*! exports provided: parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "parseBuffer", function() {
            return s;
          }), r.d(t, "getChunk", function() {
            return u;
          }), r.d(t, "getChunkLength", function() {
            return a;
          }), r.d(t, "getSubChunks", function() {
            return c;
          }), r.d(t, "getChunkId", function() {
            return l2;
          });
          var n = r(
            /*! ./parseError */
            "./src/riff/parseError.ts"
          ), o = r(
            /*! ~/utils/buffer */
            "./src/utils/buffer.ts"
          ), i2 = r(
            /*! ./riffChunk */
            "./src/riff/riffChunk.ts"
          ), s = function(e2) {
            var t2 = l2(e2);
            if ("RIFF" !== t2) throw new n.ParseError("Invalid file format", "RIFF", t2);
            var r2 = l2(e2, 8);
            if ("sfbk" !== r2) throw new n.ParseError("Invalid signature", "sfbk", r2);
            var o2 = e2.subarray(8), s2 = c(o2.subarray(4));
            return new i2.RIFFChunk(t2, o2.length, o2, s2);
          }, u = function(e2, t2) {
            var r2 = l2(e2, t2), n2 = a(e2, t2 + 4), o2 = [];
            return "RIFF" !== r2 && "LIST" !== r2 || (o2 = c(e2.subarray(t2 + 12))), new i2.RIFFChunk(r2, n2, e2.subarray(t2 + 8), o2);
          }, a = function(e2, t2) {
            return ((e2 = e2.subarray(t2, t2 + 4))[0] | e2[1] << 8 | e2[2] << 16 | e2[3] << 24) >>> 0;
          }, c = function(e2) {
            for (var t2 = [], r2 = 0; r2 <= e2.length - 8; ) {
              var n2 = u(e2, r2);
              t2.push(n2), r2 = (r2 += 8 + n2.length) % 2 ? r2 + 1 : r2;
            }
            return t2;
          }, l2 = function(e2) {
            var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            return Object(o.getStringFromBuffer)(e2.subarray(t2, t2 + 4));
          };
        }
      ), "./src/riff/riffChunk.ts": (
        /*!*******************************!*\
          !*** ./src/riff/riffChunk.ts ***!
          \*******************************/
        /*! exports provided: RIFFChunk */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "RIFFChunk", function() {
            return u;
          });
          var n = r(
            /*! ./chunkIterator */
            "./src/riff/chunkIterator.ts"
          ), o = r(
            /*! ~/utils */
            "./src/utils/index.ts"
          );
          function i2(e2, t2) {
            for (var r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
            }
          }
          function s(e2, t2, r2) {
            return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
          }
          var u = (function() {
            function e2(t3, r3, n2, o2) {
              !(function(e3, t4) {
                if (!(e3 instanceof t4)) throw new TypeError("Cannot call a class as a function");
              })(this, e2), s(this, "id", void 0), s(this, "length", void 0), s(this, "buffer", void 0), s(this, "subChunks", void 0), this.id = t3, this.length = r3, this.buffer = n2, this.subChunks = o2;
            }
            var t2, r2, u2;
            return t2 = e2, (r2 = [{ key: "getString", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t3 = arguments.length > 1 ? arguments[1] : void 0;
              return Object(o.getStringFromBuffer)(this.getBuffer(e3, t3 || this.length - e3));
            } }, { key: "getInt16", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              return this.buffer[e3++] | this.buffer[e3] << 8;
            } }, { key: "getUInt32", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              return (this.buffer[e3++] | this.buffer[e3++] << 8 | this.buffer[e3++] << 16 | this.buffer[e3] << 24) >>> 0;
            } }, { key: "getByte", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              return this.buffer[e3];
            } }, { key: "getChar", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              return this.buffer[e3] << 24 >> 24;
            } }, { key: "iterator", value: function() {
              var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
              return new n.ChunkIterator(this, e3);
            } }, { key: "iterate", value: function(e3) {
              var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r3 = new n.ChunkIterator(this, t3);
              return r3.iterate(e3), r3.target;
            } }, { key: "getBuffer", value: function(e3, t3) {
              return this.buffer.subarray(e3, e3 + t3);
            } }]) && i2(t2.prototype, r2), u2 && i2(t2, u2), e2;
          })();
        }
      ), "./src/soundFont2.ts": (
        /*!***************************!*\
          !*** ./src/soundFont2.ts ***!
          \***************************/
        /*! exports provided: SoundFont2 */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "SoundFont2", function() {
            return d2;
          });
          var n = r(
            /*! ./types */
            "./src/types/index.ts"
          ), o = r(
            /*! ./chunk */
            "./src/chunk.ts"
          ), i2 = r(
            /*! ./riff */
            "./src/riff/index.ts"
          ), s = r(
            /*! ./chunks */
            "./src/chunks/index.ts"
          ), u = r(
            /*! ./utils */
            "./src/utils/index.ts"
          );
          function a(e2) {
            for (var t2 = 1; t2 < arguments.length; t2++) {
              var r2 = null != arguments[t2] ? arguments[t2] : {}, n2 = Object.keys(r2);
              "function" == typeof Object.getOwnPropertySymbols && (n2 = n2.concat(Object.getOwnPropertySymbols(r2).filter(function(e3) {
                return Object.getOwnPropertyDescriptor(r2, e3).enumerable;
              }))), n2.forEach(function(t3) {
                f2(e2, t3, r2[t3]);
              });
            }
            return e2;
          }
          function c(e2, t2) {
            for (var r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
            }
          }
          function l2(e2, t2, r2) {
            return t2 && c(e2.prototype, t2), r2 && c(e2, r2), e2;
          }
          function f2(e2, t2, r2) {
            return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
          }
          var d2 = (function() {
            function e2(t2) {
              if ((function(e3, t3) {
                if (!(e3 instanceof t3)) throw new TypeError("Cannot call a class as a function");
              })(this, e2), f2(this, "chunk", void 0), f2(this, "metaData", void 0), f2(this, "sampleData", void 0), f2(this, "samples", void 0), f2(this, "presetData", void 0), f2(this, "instruments", void 0), f2(this, "presets", void 0), f2(this, "banks", void 0), !(t2 instanceof o.SF2Chunk)) {
                var r2 = Object(i2.parseBuffer)(t2);
                t2 = new o.SF2Chunk(r2);
              }
              if (3 !== t2.subChunks.length) throw new i2.ParseError("Invalid sfbk structure", "3 chunks", "".concat(t2.subChunks.length, " chunks"));
              this.chunk = t2, this.metaData = t2.subChunks[0].getMetaData(), this.sampleData = t2.subChunks[1].getSampleData(), this.presetData = t2.subChunks[2].getPresetData(), this.samples = this.getSamples(), this.instruments = this.getInstruments(), this.presets = this.getPresets(), this.banks = this.getBanks();
            }
            return l2(e2, null, [{ key: "from", value: function(t2) {
              return new e2(t2);
            } }]), l2(e2, [{ key: "getKeyData", value: function(e3) {
              var t2 = this, r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
              return Object(u.memoize)(function(e4, r3, n3) {
                var o2 = t2.banks[r3];
                if (o2) {
                  var i3 = o2.presets[n3];
                  if (i3) {
                    var s2 = i3.zones.find(function(r4) {
                      return t2.isKeyInRange(r4, e4);
                    });
                    if (s2) {
                      var u2 = s2.instrument, c2 = u2.zones.find(function(r4) {
                        return t2.isKeyInRange(r4, e4);
                      });
                      if (c2) {
                        var l3 = c2.sample, f3 = a({}, s2.generators, c2.generators), d3 = a({}, s2.modulators, c2.modulators);
                        return { keyNumber: e4, preset: i3, instrument: u2, sample: l3, generators: f3, modulators: d3 };
                      }
                    }
                  }
                }
                return null;
              })(e3, r2, n2);
            } }, { key: "isKeyInRange", value: function(e3, t2) {
              return void 0 === e3.keyRange || e3.keyRange.lo <= t2 && e3.keyRange.hi >= t2;
            } }, { key: "getBanks", value: function() {
              return this.presets.reduce(function(e3, t2) {
                var r2 = t2.header.bank;
                return e3[r2] || (e3[r2] = { presets: [] }), e3[r2].presets[t2.header.preset] = t2, e3;
              }, []);
            } }, { key: "getPresets", value: function() {
              var e3 = this.presetData, t2 = e3.presetHeaders, r2 = e3.presetZones, o2 = e3.presetGenerators, i3 = e3.presetModulators;
              return Object(s.getItemsInZone)(t2, r2, i3, o2, this.instruments, n.GeneratorType.Instrument).filter(function(e4) {
                return "EOP" !== e4.header.name;
              }).map(function(e4) {
                return { header: e4.header, globalZone: e4.globalZone, zones: e4.zones.map(function(e5) {
                  return { keyRange: e5.keyRange, generators: e5.generators, modulators: e5.modulators, instrument: e5.reference };
                }) };
              });
            } }, { key: "getInstruments", value: function() {
              var e3 = this.presetData, t2 = e3.instrumentHeaders, r2 = e3.instrumentZones, o2 = e3.instrumentModulators, i3 = e3.instrumentGenerators;
              return Object(s.getItemsInZone)(t2, r2, o2, i3, this.samples, n.GeneratorType.SampleId).filter(function(e4) {
                return "EOI" !== e4.header.name;
              }).map(function(e4) {
                return { header: e4.header, globalZone: e4.globalZone, zones: e4.zones.map(function(e5) {
                  return { keyRange: e5.keyRange, generators: e5.generators, modulators: e5.modulators, sample: e5.reference };
                }) };
              });
            } }, { key: "getSamples", value: function() {
              var e3 = this;
              return this.presetData.sampleHeaders.filter(function(e4) {
                return "EOS" !== e4.name;
              }).map(function(t2) {
                if ("EOS" !== t2.name && t2.sampleRate <= 0) throw new Error("Illegal sample rate of ".concat(t2.sampleRate, " hz in sample '").concat(t2.name, "'"));
                return t2.originalPitch >= 128 && t2.originalPitch <= 254 && (t2.originalPitch = 60), t2.startLoop -= t2.start, t2.endLoop -= t2.start, { header: t2, data: new Int16Array(new Uint8Array(e3.sampleData.subarray(2 * t2.start, 2 * t2.end)).buffer) };
              });
            } }]), e2;
          })();
        }
      ), "./src/types/bank.ts": (
        /*!***************************!*\
          !*** ./src/types/bank.ts ***!
          \***************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/generator.ts": (
        /*!********************************!*\
          !*** ./src/types/generator.ts ***!
          \********************************/
        /*! exports provided: GeneratorType, DEFAULT_GENERATOR_VALUES */
        function(e, t, r) {
          "use strict";
          var n, o;
          function i2(e2, t2, r2) {
            return t2 in e2 ? Object.defineProperty(e2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : e2[t2] = r2, e2;
          }
          r.r(t), r.d(t, "GeneratorType", function() {
            return o;
          }), r.d(t, "DEFAULT_GENERATOR_VALUES", function() {
            return s;
          }), (function(e2) {
            e2[e2.StartAddrsOffset = 0] = "StartAddrsOffset", e2[e2.EndAddrsOffset = 1] = "EndAddrsOffset", e2[e2.StartLoopAddrsOffset = 2] = "StartLoopAddrsOffset", e2[e2.EndLoopAddrsOffset = 3] = "EndLoopAddrsOffset", e2[e2.StartAddrsCoarseOffset = 4] = "StartAddrsCoarseOffset", e2[e2.ModLFOToPitch = 5] = "ModLFOToPitch", e2[e2.VibLFOToPitch = 6] = "VibLFOToPitch", e2[e2.ModEnvToPitch = 7] = "ModEnvToPitch", e2[e2.InitialFilterFc = 8] = "InitialFilterFc", e2[e2.InitialFilterQ = 9] = "InitialFilterQ", e2[e2.ModLFOToFilterFc = 10] = "ModLFOToFilterFc", e2[e2.ModEnvToFilterFc = 11] = "ModEnvToFilterFc", e2[e2.EndAddrsCoarseOffset = 12] = "EndAddrsCoarseOffset", e2[e2.ModLFOToVolume = 13] = "ModLFOToVolume", e2[e2.Unused1 = 14] = "Unused1", e2[e2.ChorusEffectsSend = 15] = "ChorusEffectsSend", e2[e2.ReverbEffectsSend = 16] = "ReverbEffectsSend", e2[e2.Pan = 17] = "Pan", e2[e2.Unused2 = 18] = "Unused2", e2[e2.Unused3 = 19] = "Unused3", e2[e2.Unused4 = 20] = "Unused4", e2[e2.DelayModLFO = 21] = "DelayModLFO", e2[e2.FreqModLFO = 22] = "FreqModLFO", e2[e2.DelayVibLFO = 23] = "DelayVibLFO", e2[e2.FreqVibLFO = 24] = "FreqVibLFO", e2[e2.DelayModEnv = 25] = "DelayModEnv", e2[e2.AttackModEnv = 26] = "AttackModEnv", e2[e2.HoldModEnv = 27] = "HoldModEnv", e2[e2.DecayModEnv = 28] = "DecayModEnv", e2[e2.SustainModEnv = 29] = "SustainModEnv", e2[e2.ReleaseModEnv = 30] = "ReleaseModEnv", e2[e2.KeyNumToModEnvHold = 31] = "KeyNumToModEnvHold", e2[e2.KeyNumToModEnvDecay = 32] = "KeyNumToModEnvDecay", e2[e2.DelayVolEnv = 33] = "DelayVolEnv", e2[e2.AttackVolEnv = 34] = "AttackVolEnv", e2[e2.HoldVolEnv = 35] = "HoldVolEnv", e2[e2.DecayVolEnv = 36] = "DecayVolEnv", e2[e2.SustainVolEnv = 37] = "SustainVolEnv", e2[e2.ReleaseVolEnv = 38] = "ReleaseVolEnv", e2[e2.KeyNumToVolEnvHold = 39] = "KeyNumToVolEnvHold", e2[e2.KeyNumToVolEnvDecay = 40] = "KeyNumToVolEnvDecay", e2[e2.Instrument = 41] = "Instrument", e2[e2.Reserved1 = 42] = "Reserved1", e2[e2.KeyRange = 43] = "KeyRange", e2[e2.VelRange = 44] = "VelRange", e2[e2.StartLoopAddrsCoarseOffset = 45] = "StartLoopAddrsCoarseOffset", e2[e2.KeyNum = 46] = "KeyNum", e2[e2.Velocity = 47] = "Velocity", e2[e2.InitialAttenuation = 48] = "InitialAttenuation", e2[e2.Reserved2 = 49] = "Reserved2", e2[e2.EndLoopAddrsCoarseOffset = 50] = "EndLoopAddrsCoarseOffset", e2[e2.CoarseTune = 51] = "CoarseTune", e2[e2.FineTune = 52] = "FineTune", e2[e2.SampleId = 53] = "SampleId", e2[e2.SampleModes = 54] = "SampleModes", e2[e2.Reserved3 = 55] = "Reserved3", e2[e2.ScaleTuning = 56] = "ScaleTuning", e2[e2.ExclusiveClass = 57] = "ExclusiveClass", e2[e2.OverridingRootKey = 58] = "OverridingRootKey", e2[e2.Unused5 = 59] = "Unused5", e2[e2.EndOper = 60] = "EndOper";
          })(o || (o = {}));
          var s = (i2(n = {}, o.StartAddrsOffset, 0), i2(n, o.EndAddrsOffset, 0), i2(n, o.StartLoopAddrsOffset, 0), i2(n, o.EndLoopAddrsOffset, 0), i2(n, o.StartAddrsCoarseOffset, 0), i2(n, o.ModLFOToPitch, 0), i2(n, o.VibLFOToPitch, 0), i2(n, o.ModEnvToPitch, 0), i2(n, o.InitialFilterFc, 13500), i2(n, o.InitialFilterQ, 0), i2(n, o.ModLFOToFilterFc, 0), i2(n, o.ModEnvToFilterFc, 0), i2(n, o.EndAddrsCoarseOffset, 0), i2(n, o.ModLFOToVolume, 0), i2(n, o.ChorusEffectsSend, 0), i2(n, o.ReverbEffectsSend, 0), i2(n, o.Pan, 0), i2(n, o.DelayModLFO, -12e3), i2(n, o.FreqModLFO, 0), i2(n, o.DelayVibLFO, -12e3), i2(n, o.FreqVibLFO, 0), i2(n, o.DelayModEnv, -12e3), i2(n, o.AttackModEnv, -12e3), i2(n, o.HoldModEnv, -12e3), i2(n, o.DecayModEnv, -12e3), i2(n, o.SustainModEnv, 0), i2(n, o.ReleaseModEnv, -12e3), i2(n, o.KeyNumToModEnvHold, 0), i2(n, o.KeyNumToModEnvDecay, 0), i2(n, o.DelayVolEnv, -12e3), i2(n, o.AttackVolEnv, -12e3), i2(n, o.HoldVolEnv, -12e3), i2(n, o.DecayVolEnv, -12e3), i2(n, o.SustainVolEnv, 0), i2(n, o.ReleaseVolEnv, -12e3), i2(n, o.KeyNumToVolEnvHold, 0), i2(n, o.KeyNumToVolEnvDecay, 0), i2(n, o.StartLoopAddrsCoarseOffset, 0), i2(n, o.KeyNum, -1), i2(n, o.Velocity, -1), i2(n, o.InitialAttenuation, 0), i2(n, o.EndLoopAddrsCoarseOffset, 0), i2(n, o.CoarseTune, 0), i2(n, o.FineTune, 0), i2(n, o.SampleModes, 0), i2(n, o.ScaleTuning, 100), i2(n, o.ExclusiveClass, 0), i2(n, o.OverridingRootKey, -1), n);
        }
      ), "./src/types/index.ts": (
        /*!****************************!*\
          !*** ./src/types/index.ts ***!
          \****************************/
        /*! no static exports found */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./bank */
            "./src/types/bank.ts"
          );
          for (var o in n) "default" !== o && (function(e2) {
            r.d(t, e2, function() {
              return n[e2];
            });
          })(o);
          var i2 = r(
            /*! ./generator */
            "./src/types/generator.ts"
          );
          r.d(t, "GeneratorType", function() {
            return i2.GeneratorType;
          }), r.d(t, "DEFAULT_GENERATOR_VALUES", function() {
            return i2.DEFAULT_GENERATOR_VALUES;
          });
          var s = r(
            /*! ./instrument */
            "./src/types/instrument.ts"
          );
          for (var o in s) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return s[e2];
            });
          })(o);
          var u = r(
            /*! ./key */
            "./src/types/key.ts"
          );
          for (var o in u) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return u[e2];
            });
          })(o);
          var a = r(
            /*! ./metaData */
            "./src/types/metaData.ts"
          );
          for (var o in a) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return a[e2];
            });
          })(o);
          var c = r(
            /*! ./modulator */
            "./src/types/modulator.ts"
          );
          r.d(t, "ControllerType", function() {
            return c.ControllerType;
          }), r.d(t, "ControllerPolarity", function() {
            return c.ControllerPolarity;
          }), r.d(t, "ControllerDirection", function() {
            return c.ControllerDirection;
          }), r.d(t, "ControllerPalette", function() {
            return c.ControllerPalette;
          }), r.d(t, "Controller", function() {
            return c.Controller;
          }), r.d(t, "TransformType", function() {
            return c.TransformType;
          }), r.d(t, "DEFAULT_INSTRUMENT_MODULATORS", function() {
            return c.DEFAULT_INSTRUMENT_MODULATORS;
          });
          var l2 = r(
            /*! ./preset */
            "./src/types/preset.ts"
          );
          for (var o in l2) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "ControllerType", "ControllerPolarity", "ControllerDirection", "ControllerPalette", "Controller", "TransformType", "DEFAULT_INSTRUMENT_MODULATORS", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return l2[e2];
            });
          })(o);
          var f2 = r(
            /*! ./presetData */
            "./src/types/presetData.ts"
          );
          for (var o in f2) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "ControllerType", "ControllerPolarity", "ControllerDirection", "ControllerPalette", "Controller", "TransformType", "DEFAULT_INSTRUMENT_MODULATORS", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return f2[e2];
            });
          })(o);
          var d2 = r(
            /*! ./sample */
            "./src/types/sample.ts"
          );
          r.d(t, "SampleType", function() {
            return d2.SampleType;
          });
          var p = r(
            /*! ./zone */
            "./src/types/zone.ts"
          );
          for (var o in p) ["GeneratorType", "DEFAULT_GENERATOR_VALUES", "ControllerType", "ControllerPolarity", "ControllerDirection", "ControllerPalette", "Controller", "TransformType", "DEFAULT_INSTRUMENT_MODULATORS", "SampleType", "default"].indexOf(o) < 0 && (function(e2) {
            r.d(t, e2, function() {
              return p[e2];
            });
          })(o);
        }
      ), "./src/types/instrument.ts": (
        /*!*********************************!*\
          !*** ./src/types/instrument.ts ***!
          \*********************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/key.ts": (
        /*!**************************!*\
          !*** ./src/types/key.ts ***!
          \**************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/metaData.ts": (
        /*!*******************************!*\
          !*** ./src/types/metaData.ts ***!
          \*******************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/modulator.ts": (
        /*!********************************!*\
          !*** ./src/types/modulator.ts ***!
          \********************************/
        /*! exports provided: ControllerType, ControllerPolarity, ControllerDirection, ControllerPalette, Controller, TransformType, DEFAULT_INSTRUMENT_MODULATORS */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "ControllerType", function() {
            return n;
          }), r.d(t, "ControllerPolarity", function() {
            return o;
          }), r.d(t, "ControllerDirection", function() {
            return i2;
          }), r.d(t, "ControllerPalette", function() {
            return s;
          }), r.d(t, "Controller", function() {
            return u;
          }), r.d(t, "TransformType", function() {
            return a;
          }), r.d(t, "DEFAULT_INSTRUMENT_MODULATORS", function() {
            return l2;
          });
          var n, o, i2, s, u, a, c = r(
            /*! ./generator */
            "./src/types/generator.ts"
          );
          !(function(e2) {
            e2[e2.Linear = 0] = "Linear", e2[e2.Concave = 1] = "Concave", e2[e2.Convex = 2] = "Convex", e2[e2.Switch = 3] = "Switch";
          })(n || (n = {})), (function(e2) {
            e2[e2.Unipolar = 0] = "Unipolar", e2[e2.Bipolar = 1] = "Bipolar";
          })(o || (o = {})), (function(e2) {
            e2[e2.Increasing = 0] = "Increasing", e2[e2.Decreasing = 1] = "Decreasing";
          })(i2 || (i2 = {})), (function(e2) {
            e2[e2.GeneralController = 0] = "GeneralController", e2[e2.MidiController = 1] = "MidiController";
          })(s || (s = {})), (function(e2) {
            e2[e2.NoController = 0] = "NoController", e2[e2.NoteOnVelocity = 2] = "NoteOnVelocity", e2[e2.NoteOnKeyNumber = 3] = "NoteOnKeyNumber", e2[e2.PolyPressure = 10] = "PolyPressure", e2[e2.ChannelPressure = 13] = "ChannelPressure", e2[e2.PitchWheel = 14] = "PitchWheel", e2[e2.PitchWheelSensitivity = 16] = "PitchWheelSensitivity", e2[e2.Link = 127] = "Link";
          })(u || (u = {})), (function(e2) {
            e2[e2.Linear = 0] = "Linear", e2[e2.Absolute = 2] = "Absolute";
          })(a || (a = {}));
          var l2 = [{ id: c.GeneratorType.InitialAttenuation, source: { type: n.Concave, polarity: o.Unipolar, direction: i2.Decreasing, palette: s.GeneralController, index: u.NoteOnVelocity }, value: 960, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.InitialFilterFc, source: { type: n.Linear, polarity: o.Unipolar, direction: i2.Decreasing, palette: s.GeneralController, index: u.NoteOnVelocity }, value: -2400, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.VibLFOToPitch, source: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.ChannelPressure }, value: 50, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.VibLFOToPitch, source: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.MidiController, index: 1 }, value: 50, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.InitialAttenuation, source: { type: n.Concave, polarity: o.Unipolar, direction: i2.Decreasing, palette: s.MidiController, index: 7 }, value: 960, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.InitialAttenuation, source: { type: n.Linear, polarity: o.Bipolar, direction: i2.Increasing, palette: s.MidiController, index: 10 }, value: 1e3, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.InitialAttenuation, source: { type: n.Concave, polarity: o.Unipolar, direction: i2.Decreasing, palette: s.MidiController, index: 11 }, value: 960, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.ReverbEffectsSend, source: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.MidiController, index: 91 }, value: 200, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.ChorusEffectsSend, source: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.MidiController, index: 93 }, value: 200, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.NoController }, transform: a.Linear }, { id: c.GeneratorType.CoarseTune, source: { type: n.Linear, polarity: o.Bipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.PitchWheel }, value: 12700, valueSource: { type: n.Linear, polarity: o.Unipolar, direction: i2.Increasing, palette: s.GeneralController, index: u.PitchWheelSensitivity }, transform: a.Linear }];
        }
      ), "./src/types/preset.ts": (
        /*!*****************************!*\
          !*** ./src/types/preset.ts ***!
          \*****************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/presetData.ts": (
        /*!*********************************!*\
          !*** ./src/types/presetData.ts ***!
          \*********************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/types/sample.ts": (
        /*!*****************************!*\
          !*** ./src/types/sample.ts ***!
          \*****************************/
        /*! exports provided: SampleType */
        function(e, t, r) {
          "use strict";
          var n;
          r.r(t), r.d(t, "SampleType", function() {
            return n;
          }), (function(e2) {
            e2[e2.EOS = 0] = "EOS", e2[e2.Mono = 1] = "Mono", e2[e2.Right = 2] = "Right", e2[e2.Left = 4] = "Left", e2[e2.Linked = 8] = "Linked", e2[e2.RomMono = 32769] = "RomMono", e2[e2.RomRight = 32770] = "RomRight", e2[e2.RomLeft = 32772] = "RomLeft", e2[e2.RomLinked = 32776] = "RomLinked";
          })(n || (n = {}));
        }
      ), "./src/types/zone.ts": (
        /*!***************************!*\
          !*** ./src/types/zone.ts ***!
          \***************************/
        /*! no static exports found */
        function(e, t) {
        }
      ), "./src/utils/buffer.ts": (
        /*!*****************************!*\
          !*** ./src/utils/buffer.ts ***!
          \*****************************/
        /*! exports provided: getStringFromBuffer */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "getStringFromBuffer", function() {
            return n;
          });
          var n = function(e2) {
            return new TextDecoder("utf8").decode(e2).split(/\0/)[0].trim();
          };
        }
      ), "./src/utils/index.ts": (
        /*!****************************!*\
          !*** ./src/utils/index.ts ***!
          \****************************/
        /*! exports provided: getStringFromBuffer, memoize */
        function(e, t, r) {
          "use strict";
          r.r(t);
          var n = r(
            /*! ./buffer */
            "./src/utils/buffer.ts"
          );
          r.d(t, "getStringFromBuffer", function() {
            return n.getStringFromBuffer;
          });
          var o = r(
            /*! ./memoize */
            "./src/utils/memoize.ts"
          );
          r.d(t, "memoize", function() {
            return o.memoize;
          });
        }
      ), "./src/utils/memoize.ts": (
        /*!******************************!*\
          !*** ./src/utils/memoize.ts ***!
          \******************************/
        /*! exports provided: memoize */
        function(e, t, r) {
          "use strict";
          r.r(t), r.d(t, "memoize", function() {
            return n;
          });
          var n = function(e2) {
            var t2 = {};
            return function() {
              for (var r2 = arguments.length, n2 = new Array(r2), o = 0; o < r2; o++) n2[o] = arguments[o];
              var i2 = JSON.stringify(n2);
              if (i2 in t2) return t2[i2];
              var s = e2.apply(void 0, n2);
              return t2[i2] = s, s;
            };
          };
        }
      ) });
    });
  }
});

// node_modules/@strudel/core/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  ClockCollator: () => Ke,
  Cyclist: () => Nu,
  Fraction: () => d,
  Hap: () => x,
  Pattern: () => f,
  State: () => nt,
  TimeSpan: () => C,
  __chooseWith: () => de,
  _brandBy: () => fe,
  _fitslice: () => mn,
  _irand: () => he,
  _keyDown: () => ge,
  _match: () => yn,
  _mod: () => pt,
  _morph: () => Yt,
  _polymeterListSteps: () => wn,
  _retime: () => Nt,
  _slices: () => $t,
  accelerate: () => Wn,
  activeLabel: () => jo,
  ad: () => Lc,
  add: () => xa,
  adsr: () => Wc,
  almostAlways: () => Lf,
  almostNever: () => Wf,
  always: () => Hf,
  amp: () => Vn,
  analyze: () => rs,
  anchor: () => ii,
  and: () => Da,
  apply: () => ql,
  ar: () => Hc,
  arp: () => ca,
  arpWith: () => ia,
  arrange: () => fa,
  as: () => cu,
  att: () => Dn,
  attack: () => Fn,
  averageArray: () => Me,
  backgroundImage: () => uh,
  band: () => Ma,
  bandf: () => hs,
  bandq: () => ys,
  bank: () => ss,
  base64ToUnicode: () => Qe,
  bbexpr: () => $s,
  bbst: () => Ws,
  beat: () => Fp,
  begin: () => ws,
  berlin: () => Cf,
  berlinWith: () => xu,
  binary: () => mf,
  binaryN: () => wu,
  bind: () => wa,
  binshift: () => ac,
  bite: () => Bl,
  bjork: () => ne,
  blshift: () => Pa,
  bor: () => Ja,
  bp: () => ms,
  bpa: () => br,
  bpattack: () => wr,
  bpd: () => Sr,
  bpdecay: () => Ar,
  bpe: () => hr,
  bpenv: () => fr,
  bpf: () => ds,
  bpq: () => gs,
  bpr: () => Nr,
  bprelease: () => Pr,
  bps: () => zr,
  bpsustain: () => Or,
  brak: () => Rl,
  brand: () => _f,
  brandBy: () => bf,
  brshift: () => Na,
  bxor: () => ja,
  bypass: () => hp,
  byteBeatExpression: () => Ns,
  byteBeatStartTime: () => Rs,
  calculateSteps: () => ra,
  cat: () => pn,
  ccn: () => Uc,
  ccv: () => Kc,
  ceil: () => Xa,
  ch: () => Is,
  channel: () => nr,
  channels: () => Ls,
  choose: () => _u,
  chooseCycles: () => vu,
  chooseIn: () => kf,
  chooseInWith: () => me,
  chooseOut: () => qf,
  chooseWith: () => Ot,
  chop: () => Pp,
  chord: () => si,
  chunk: () => np,
  chunkBack: () => op,
  chunkBackInto: () => fp,
  chunkInto: () => lp,
  chunkback: () => ip,
  chunkbackinto: () => pp,
  chunkinto: () => ap,
  clamp: () => Re,
  cleanupUi: () => ah,
  clip: () => vc,
  coarse: () => Ts,
  code2hash: () => ea,
  color: () => Nc,
  colour: () => $c,
  comb: () => ic,
  compose: () => Uu,
  compress: () => rl,
  compressSpan: () => ol,
  compressor: () => Ci,
  compressorAttack: () => zi,
  compressorKnee: () => Bi,
  compressorRatio: () => Oi,
  compressorRelease: () => Ei,
  compressspan: () => il,
  constant: () => Ku,
  contract: () => An,
  control: () => Qc,
  controls: () => Gp,
  cosine: () => sf,
  cosine2: () => rf,
  cpm: () => Al,
  cps: () => _c,
  createClock: () => pu,
  createParam: () => Tt,
  createParams: () => Rc,
  crush: () => Ss,
  ctf: () => or,
  ctlNum: () => Xc,
  ctranspose: () => Ro,
  curry: () => g,
  curve: () => Tc,
  cut: () => sr,
  cutoff: () => rr,
  cycleToSeconds: () => Pt,
  dec: () => cs,
  decay: () => is,
  degrade: () => zf,
  degradeBy: () => Of,
  degradeByWith: () => Bf,
  degree: () => No,
  delay: () => to,
  delayfb: () => no,
  delayfeedback: () => eo,
  delaysync: () => co,
  delayt: () => oo,
  delaytime: () => ro,
  deltaSlide: () => xc,
  det: () => lo,
  detune: () => ao,
  dfb: () => so,
  dict: () => oi,
  dictionary: () => ri,
  dist: () => xi,
  distort: () => Ti,
  div: () => Oa,
  djf: () => Zr,
  drawLine: () => nn,
  drive: () => Ps,
  drop: () => vn,
  dry: () => ho,
  ds: () => Ic,
  dt: () => io,
  duck: () => Ms,
  duckattack: () => js,
  duckdepth: () => Js,
  dur: () => Ac,
  duration: () => qc,
  e: () => Up,
  early: () => Sl,
  echo: () => Kl,
  echoWith: () => Dl,
  echowith: () => Gl,
  eish: () => ef,
  end: () => bs,
  enhance: () => rc,
  eq: () => Ia,
  eqt: () => Ha,
  errorLogger: () => Ht,
  euclid: () => Qp,
  euclidLegato: () => Yp,
  euclidLegatoRot: () => Zp,
  euclidRot: () => Xp,
  euclidish: () => tf,
  euclidrot: () => Kp,
  evalScope: () => Mu,
  evaluate: () => ju,
  every: () => kl,
  expand: () => qn,
  expression: () => Ri,
  extend: () => kn,
  fadeInTime: () => go,
  fadeOutTime: () => yo,
  fadeTime: () => mo,
  fanchor: () => Rr,
  fast: () => hl,
  fastChunk: () => up,
  fastGap: () => cl,
  fastcat: () => N,
  fastchunk: () => cp,
  fastgap: () => ul,
  fft: () => os,
  filter: () => wp,
  filterWhen: () => bp,
  firstOf: () => vl,
  fit: () => Lp,
  flatten: () => F,
  floor: () => Ka,
  fm: () => Un,
  fmattack: () => Xn,
  fmdecay: () => Zn,
  fmenv: () => Kn,
  fmh: () => Gn,
  fmi: () => Qn,
  fmrelease: () => es,
  fmsustain: () => ts,
  fmvelocity: () => ns,
  fmwave: () => Yn,
  focus: () => al,
  focusSpan: () => ll,
  focusspan: () => pl,
  fractionalArgs: () => Xu,
  frameRate: () => fc,
  frames: () => hc,
  freeze: () => Zi,
  freq: () => wo,
  freqToMidi: () => Oe,
  fromBipolar: () => Za,
  fshift: () => Li,
  fshiftnote: () => Ii,
  fshiftphase: () => Hi,
  ftype: () => $r,
  func: () => Qa,
  gain: () => In,
  gap: () => it,
  gat: () => zo,
  gate: () => Oo,
  getControlName: () => te,
  getCurrentKeyboardState: () => Ze,
  getEventOffsetMs: () => Vu,
  getFreq: () => ze,
  getFrequency: () => Qu,
  getPerformanceTimeSeconds: () => sa,
  getPlayableNoteValue: () => Gu,
  getSoundIndex: () => Du,
  getTime: () => ih,
  getTrigger: () => $u,
  grow: () => vp,
  gt: () => Ra,
  gte: () => La,
  harmonic: () => Wo,
  hash2code: () => na,
  hbrick: () => lc,
  hcutoff: () => Dr,
  hold: () => fs,
  hours: () => dc,
  hp: () => Qr,
  hpa: () => gr,
  hpattack: () => yr,
  hpd: () => qr,
  hpdecay: () => kr,
  hpe: () => pr,
  hpenv: () => lr,
  hpf: () => Gr,
  hpq: () => Kr,
  hpr: () => jr,
  hprelease: () => Jr,
  hps: () => Br,
  hpsustain: () => Cr,
  hresonance: () => Ur,
  hsl: () => gp,
  hsla: () => yp,
  hurry: () => ml,
  id: () => tt,
  imag: () => sc,
  inhabit: () => th,
  inhabitmod: () => nh,
  innerBind: () => ba,
  inside: () => wl,
  inv: () => Pl,
  invert: () => jl,
  ir: () => gi,
  irand: () => vf,
  irbegin: () => _i,
  iresponse: () => wi,
  irspeed: () => bi,
  isControlName: () => Mn,
  isNote: () => _t,
  isNoteWithOctave: () => Iu,
  isPattern: () => Ut,
  isaw: () => xt,
  isaw2: () => oe,
  iter: () => Yl,
  iterBack: () => Zl,
  iterback: () => tp,
  itri: () => af,
  itri2: () => lf,
  jux: () => Fl,
  juxBy: () => Hl,
  juxby: () => Vl,
  kcutoff: () => Di,
  keep: () => Sa,
  keepif: () => Ta,
  keyAlias: () => Ye,
  keyDown: () => Ff,
  krush: () => Fi,
  label: () => Po,
  lastOf: () => _l,
  late: () => hn,
  lbrick: () => pc,
  legato: () => kc,
  leslie: () => Eo,
  lfo: () => Oc,
  linger: () => Ol,
  listRange: () => Vt,
  lock: () => uo,
  logKey: () => It,
  logger: () => z,
  loop: () => _s,
  loopAt: () => Rp,
  loopAtCps: () => Ip,
  loopBegin: () => vs,
  loopEnd: () => qs,
  loopat: () => Wp,
  loopatcps: () => Hp,
  loopb: () => ks,
  loope: () => As,
  lp: () => cr,
  lpa: () => mr,
  lpattack: () => dr,
  lpd: () => vr,
  lpdecay: () => _r,
  lpe: () => ar,
  lpenv: () => ur,
  lpf: () => ir,
  lpq: () => Yr,
  lpr: () => Mr,
  lprelease: () => Er,
  lps: () => xr,
  lpsustain: () => Tr,
  lrate: () => Mo,
  lsize: () => Jo,
  lt: () => $a,
  lte: () => Wa,
  mapArgs: () => Dt,
  mask: () => da,
  midi2note: () => Fu,
  midiToFreq: () => et,
  midibend: () => ru,
  midichan: () => Vc,
  midicmd: () => Gc,
  midimap: () => Fc,
  midiport: () => Dc,
  miditouch: () => ou,
  minutes: () => mc,
  mod: () => za,
  mode: () => ai,
  morph: () => Dp,
  mouseX: () => df,
  mouseY: () => ff,
  mousex: () => hf,
  mousey: () => pf,
  mtranspose: () => $o,
  mul: () => Ba,
  n: () => $n,
  nanFallback: () => Je,
  ne: () => Va,
  net: () => Fa,
  never: () => If,
  noise: () => Hr,
  note: () => Rn,
  noteToMidi: () => lt,
  nothing: () => R,
  nrpnn: () => Yc,
  nrpv: () => Zc,
  nudge: () => Ho,
  numeralArgs: () => $,
  objectMap: () => Ue,
  octave: () => Vo,
  octaveR: () => Io,
  octaves: () => ui,
  octer: () => Gi,
  octersub: () => Qi,
  octersubsub: () => Ui,
  off: () => $l,
  offset: () => ci,
  often: () => $f,
  or: () => Ga,
  orbit: () => Fo,
  outerBind: () => _a,
  outside: () => bl,
  overgain: () => Do,
  overshape: () => Go,
  pace: () => gn,
  pairs: () => $e,
  palindrome: () => Il,
  pan: () => Qo,
  panchor: () => Bo,
  panorient: () => Yo,
  panspan: () => Uo,
  pansplay: () => Ko,
  panwidth: () => Xo,
  parseFractional: () => Ne,
  parseNumeral: () => Ft,
  partials: () => oc,
  patt: () => _o,
  pattack: () => bo,
  pcurve: () => Co,
  pdec: () => ko,
  pdecay: () => vo,
  penv: () => xo,
  perlin: () => xf,
  perlinWith: () => Su,
  ph: () => Gs,
  phasdp: () => er,
  phaser: () => Qs,
  phasercenter: () => Xs,
  phaserdepth: () => Zs,
  phaserrate: () => Ds,
  phasersweep: () => Us,
  phc: () => Ys,
  phd: () => tr,
  phs: () => Ks,
  pick: () => Cu,
  pickF: () => Df,
  pickOut: () => Qf,
  pickReset: () => Yf,
  pickRestart: () => Kf,
  pickSqueeze: () => eh,
  pickmod: () => Ou,
  pickmodF: () => Gf,
  pickmodOut: () => Uf,
  pickmodReset: () => Zf,
  pickmodRestart: () => Xf,
  pickmodSqueeze: () => sh,
  pipe: () => Pe,
  pitchJump: () => Cc,
  pitchJumpTime: () => Bc,
  ply: () => fl,
  pm: () => la,
  polyBind: () => qa,
  polyTouch: () => iu,
  polymeter: () => St,
  polyrhythm: () => ua,
  postgain: () => Hn,
  pow: () => Ea,
  pr: () => aa,
  prel: () => To,
  prelease: () => So,
  press: () => Ll,
  pressBy: () => Wl,
  progNum: () => tu,
  psus: () => Ao,
  psustain: () => qo,
  pure: () => P2,
  pw: () => Hs,
  pwrate: () => Vs,
  pwsweep: () => Fs,
  rand: () => W,
  rand2: () => wf,
  randcat: () => Af,
  randrun: () => bu,
  range: () => tl,
  range2: () => nl,
  rangex: () => el,
  rarely: () => Rf,
  rate: () => Zo,
  ratio: () => sl,
  rdim: () => di,
  real: () => nc,
  ref: () => Vp,
  register: () => l,
  registerControl: () => i,
  reify: () => h,
  rel: () => ps,
  release: () => ls,
  removeUndefineds: () => ot,
  repeatCycles: () => ep,
  repeatTime: () => zc,
  repl: () => ch,
  resonance: () => Xr,
  rev: () => dn,
  rfade: () => yi,
  rib: () => mp,
  ribbon: () => dp,
  ring: () => Ki,
  ringdf: () => Yi,
  ringf: () => Xi,
  rlp: () => fi,
  room: () => li,
  roomdim: () => hi,
  roomfade: () => mi,
  roomlp: () => pi,
  roomsize: () => vi,
  rotate: () => je,
  round: () => Ua,
  rsize: () => Ai,
  run: () => gu,
  s: () => Jn,
  s_add: () => Cp,
  s_alt: () => Ap,
  s_cat: () => qp,
  s_contract: () => Ep,
  s_expand: () => Op,
  s_extend: () => zp,
  s_polymeter: () => Sp,
  s_sub: () => Bp,
  s_taper: () => Tp,
  s_taperlist: () => xp,
  s_tour: () => Mp,
  s_zip: () => Jp,
  saw: () => ht,
  saw2: () => re,
  scram: () => uc,
  scramble: () => gf,
  scrub: () => uu,
  seconds: () => yc,
  seg: () => El,
  segment: () => zl,
  semitone: () => ei,
  seq: () => fn,
  seqPLoop: () => ha,
  sequence: () => D,
  sequenceP: () => cn,
  set: () => Aa,
  setStringParser: () => oa,
  setTime: () => Lt,
  shape: () => Si,
  shrink: () => Tn,
  shrinklist: () => Sn,
  shuffle: () => yf,
  signal: () => I,
  silence: () => S,
  sine: () => fu,
  sine2: () => ie,
  size: () => ki,
  slice: () => On,
  slide: () => ti,
  slow: () => yl,
  slowChunk: () => rp,
  slowcat: () => K,
  slowcatPrime: () => Kt,
  slowchunk: () => sp,
  smear: () => cc,
  sol2note: () => Yu,
  someCycles: () => Nf,
  someCyclesBy: () => Pf,
  sometimes: () => jf,
  sometimesBy: () => Jf,
  songPtr: () => gc,
  sound: () => jn,
  source: () => Pn,
  sparsity: () => gl,
  speak: () => oh,
  speed: () => Zt,
  splice: () => $p,
  splitAt: () => Gt,
  spread: () => fo,
  square: () => hu,
  square2: () => of,
  squeeze: () => rh,
  squeezeBind: () => va,
  squiz: () => ji,
  src: () => Nn,
  stack: () => B,
  stackBy: () => pa,
  stackCentre: () => ln,
  stackLeft: () => un,
  stackRight: () => an,
  steady: () => nf,
  stepBind: () => ka,
  stepalt: () => bn,
  stepcat: () => j,
  steps: () => jp,
  stepsPerOctave: () => Lo,
  stretch: () => Mi,
  striate: () => Np,
  stringifyValues: () => Qt,
  struct: () => ma,
  strudelScope: () => Eu,
  stut: () => Xl,
  stutWith: () => Ql,
  stutwith: () => Ul,
  sub: () => Ca,
  superimpose: () => ya,
  sus: () => as,
  sustain: () => us,
  sustainpedal: () => Wi,
  swing: () => Jl,
  swingBy: () => Ml,
  sysex: () => eu,
  sysexdata: () => su,
  sysexid: () => nu,
  sz: () => qi,
  take: () => _n,
  time: () => ce,
  timeCat: () => Bn,
  timecat: () => kp,
  toBipolar: () => Ya,
  tokenizeNote: () => xe,
  tour: () => xn,
  tremolo: () => xs,
  tremolodepth: () => Bs,
  tremolophase: () => zs,
  tremoloshape: () => Es,
  tremoloskew: () => Os,
  tremolosync: () => Cs,
  tri: () => cf,
  tri2: () => uf,
  triode: () => Vi,
  tsdelay: () => ec,
  uid: () => wc,
  undegrade: () => Mf,
  undegradeBy: () => Ef,
  unicodeToBase64: () => Ge,
  uniq: () => Zu,
  uniqsort: () => ta,
  uniqsortr: () => De,
  unison: () => po,
  unit: () => Ji,
  v: () => Ir,
  val: () => bc,
  valueToMidi: () => Hu,
  velocity: () => Ln,
  vib: () => Wr,
  vibmod: () => Vr,
  vibrato: () => Lr,
  vmod: () => Fr,
  voice: () => ni,
  vowel: () => Pi,
  waveloss: () => Ni,
  wchoose: () => Sf,
  wchooseCycles: () => qu,
  when: () => Nl,
  whenKey: () => Vf,
  withValue: () => ga,
  within: () => _p,
  wrandcat: () => Tf,
  xfade: () => zn,
  xsdelay: () => tc,
  zcrush: () => Jc,
  zdelay: () => jc,
  zip: () => Cn,
  zipWith: () => vt,
  zmod: () => Mc,
  znoise: () => Ec,
  zoom: () => Tl,
  zoomArc: () => xl,
  zoomarc: () => Cl,
  zrand: () => Sc,
  zzfx: () => Pc
});

// node_modules/fraction.js/dist/fraction.mjs
if (typeof BigInt === "undefined") BigInt = function(n) {
  if (isNaN(n)) throw new Error("");
  return n;
};
var C_ZERO = BigInt(0);
var C_ONE = BigInt(1);
var C_TWO = BigInt(2);
var C_THREE = BigInt(3);
var C_FIVE = BigInt(5);
var C_TEN = BigInt(10);
var MAX_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);
var MAX_CYCLE_LEN = 2e3;
var P = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE
};
function assign(n, s) {
  try {
    n = BigInt(n);
  } catch (e) {
    throw InvalidParameter();
  }
  return n * s;
}
function ifloor(x3) {
  return typeof x3 === "bigint" ? x3 : Math.floor(x3);
}
function newFraction(n, d2) {
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  const f2 = Object.create(Fraction.prototype);
  f2["s"] = n < C_ZERO ? -C_ONE : C_ONE;
  n = n < C_ZERO ? -n : n;
  const a = gcd(n, d2);
  f2["n"] = n / a;
  f2["d"] = d2 / a;
  return f2;
}
var FACTORSTEPS = [C_TWO * C_TWO, C_TWO, C_TWO * C_TWO, C_TWO, C_TWO * C_TWO, C_TWO * C_THREE, C_TWO, C_TWO * C_THREE];
function factorize(n) {
  const factors = /* @__PURE__ */ Object.create(null);
  if (n <= C_ONE) {
    factors[n] = C_ONE;
    return factors;
  }
  const add = (p) => {
    factors[p] = (factors[p] || C_ZERO) + C_ONE;
  };
  while (n % C_TWO === C_ZERO) {
    add(C_TWO);
    n /= C_TWO;
  }
  while (n % C_THREE === C_ZERO) {
    add(C_THREE);
    n /= C_THREE;
  }
  while (n % C_FIVE === C_ZERO) {
    add(C_FIVE);
    n /= C_FIVE;
  }
  for (let si2 = 0, p = C_TWO + C_FIVE; p * p <= n; ) {
    while (n % p === C_ZERO) {
      add(p);
      n /= p;
    }
    p += FACTORSTEPS[si2];
    si2 = si2 + 1 & 7;
  }
  if (n > C_ONE) add(n);
  return factors;
}
var parse = function(p1, p2) {
  let n = C_ZERO, d2 = C_ONE, s = C_ONE;
  if (p1 === void 0 || p1 === null) {
  } else if (p2 !== void 0) {
    if (typeof p1 === "bigint") {
      n = p1;
    } else if (isNaN(p1)) {
      throw InvalidParameter();
    } else if (p1 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      n = BigInt(p1);
    }
    if (typeof p2 === "bigint") {
      d2 = p2;
    } else if (isNaN(p2)) {
      throw InvalidParameter();
    } else if (p2 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      d2 = BigInt(p2);
    }
    s = n * d2;
  } else if (typeof p1 === "object") {
    if ("d" in p1 && "n" in p1) {
      n = BigInt(p1["n"]);
      d2 = BigInt(p1["d"]);
      if ("s" in p1)
        n *= BigInt(p1["s"]);
    } else if (0 in p1) {
      n = BigInt(p1[0]);
      if (1 in p1)
        d2 = BigInt(p1[1]);
    } else if (typeof p1 === "bigint") {
      n = p1;
    } else {
      throw InvalidParameter();
    }
    s = n * d2;
  } else if (typeof p1 === "number") {
    if (isNaN(p1)) {
      throw InvalidParameter();
    }
    if (p1 < 0) {
      s = -C_ONE;
      p1 = -p1;
    }
    if (p1 % 1 === 0) {
      n = BigInt(p1);
    } else {
      let z2 = 1;
      let A = 0, B3 = 1;
      let C4 = 1, D3 = 1;
      let N2 = 1e7;
      if (p1 >= 1) {
        z2 = 10 ** Math.floor(1 + Math.log10(p1));
        p1 /= z2;
      }
      while (B3 <= N2 && D3 <= N2) {
        let M = (A + C4) / (B3 + D3);
        if (p1 === M) {
          if (B3 + D3 <= N2) {
            n = A + C4;
            d2 = B3 + D3;
          } else if (D3 > B3) {
            n = C4;
            d2 = D3;
          } else {
            n = A;
            d2 = B3;
          }
          break;
        } else {
          if (p1 > M) {
            A += C4;
            B3 += D3;
          } else {
            C4 += A;
            D3 += B3;
          }
          if (B3 > N2) {
            n = C4;
            d2 = D3;
          } else {
            n = A;
            d2 = B3;
          }
        }
      }
      n = BigInt(n) * BigInt(z2);
      d2 = BigInt(d2);
    }
  } else if (typeof p1 === "string") {
    let ndx = 0;
    let v = C_ZERO, w2 = C_ZERO, x3 = C_ZERO, y = C_ONE, z2 = C_ONE;
    let match = p1.replace(/_/g, "").match(/\d+|./g);
    if (match === null)
      throw InvalidParameter();
    if (match[ndx] === "-") {
      s = -C_ONE;
      ndx++;
    } else if (match[ndx] === "+") {
      ndx++;
    }
    if (match.length === ndx + 1) {
      w2 = assign(match[ndx++], s);
    } else if (match[ndx + 1] === "." || match[ndx] === ".") {
      if (match[ndx] !== ".") {
        v = assign(match[ndx++], s);
      }
      ndx++;
      if (ndx + 1 === match.length || match[ndx + 1] === "(" && match[ndx + 3] === ")" || match[ndx + 1] === "'" && match[ndx + 3] === "'") {
        w2 = assign(match[ndx], s);
        y = C_TEN ** BigInt(match[ndx].length);
        ndx++;
      }
      if (match[ndx] === "(" && match[ndx + 2] === ")" || match[ndx] === "'" && match[ndx + 2] === "'") {
        x3 = assign(match[ndx + 1], s);
        z2 = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;
        ndx += 3;
      }
    } else if (match[ndx + 1] === "/" || match[ndx + 1] === ":") {
      w2 = assign(match[ndx], s);
      y = assign(match[ndx + 2], C_ONE);
      ndx += 3;
    } else if (match[ndx + 3] === "/" && match[ndx + 1] === " ") {
      v = assign(match[ndx], s);
      w2 = assign(match[ndx + 2], s);
      y = assign(match[ndx + 4], C_ONE);
      ndx += 5;
    }
    if (match.length <= ndx) {
      d2 = y * z2;
      s = /* void */
      n = x3 + d2 * v + z2 * w2;
    } else {
      throw InvalidParameter();
    }
  } else if (typeof p1 === "bigint") {
    n = p1;
    s = p1;
    d2 = C_ONE;
  } else {
    throw InvalidParameter();
  }
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  P["s"] = s < C_ZERO ? -C_ONE : C_ONE;
  P["n"] = n < C_ZERO ? -n : n;
  P["d"] = d2 < C_ZERO ? -d2 : d2;
};
function modpow(b, e, m2) {
  let r = C_ONE;
  for (; e > C_ZERO; b = b * b % m2, e >>= C_ONE) {
    if (e & C_ONE) {
      r = r * b % m2;
    }
  }
  return r;
}
function cycleLen(n, d2) {
  for (; d2 % C_TWO === C_ZERO; d2 /= C_TWO) {
  }
  for (; d2 % C_FIVE === C_ZERO; d2 /= C_FIVE) {
  }
  if (d2 === C_ONE)
    return C_ZERO;
  let rem = C_TEN % d2;
  let t = 1;
  for (; rem !== C_ONE; t++) {
    rem = rem * C_TEN % d2;
    if (t > MAX_CYCLE_LEN)
      return C_ZERO;
  }
  return BigInt(t);
}
function cycleStart(n, d2, len) {
  let rem1 = C_ONE;
  let rem2 = modpow(C_TEN, len, d2);
  for (let t = 0; t < 300; t++) {
    if (rem1 === rem2)
      return BigInt(t);
    rem1 = rem1 * C_TEN % d2;
    rem2 = rem2 * C_TEN % d2;
  }
  return 0;
}
function gcd(a, b) {
  if (!a)
    return b;
  if (!b)
    return a;
  while (1) {
    a %= b;
    if (!a)
      return b;
    b %= a;
    if (!b)
      return a;
  }
}
function Fraction(a, b) {
  parse(a, b);
  if (this instanceof Fraction) {
    a = gcd(P["d"], P["n"]);
    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  } else {
    return newFraction(P["s"] * P["n"], P["d"]);
  }
}
var DivisionByZero = function() {
  return new Error("Division by Zero");
};
var InvalidParameter = function() {
  return new Error("Invalid argument");
};
var NonIntegerParameter = function() {
  return new Error("Parameters must be integer");
};
Fraction.prototype = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE,
  /**
   * Calculates the absolute value
   *
   * Ex: new Fraction(-4).abs() => 4
   **/
  "abs": function() {
    return newFraction(this["n"], this["d"]);
  },
  /**
   * Inverts the sign of the current fraction
   *
   * Ex: new Fraction(-4).neg() => 4
   **/
  "neg": function() {
    return newFraction(-this["s"] * this["n"], this["d"]);
  },
  /**
   * Adds two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
   **/
  "add": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Subtracts two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
   **/
  "sub": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Multiplies two rational numbers
   *
   * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
   **/
  "mul": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Divides two rational numbers
   *
   * Ex: new Fraction("-17.(345)").inverse().div(3)
   **/
  "div": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["d"],
      this["d"] * P["n"]
    );
  },
  /**
   * Clones the actual object
   *
   * Ex: new Fraction("-17.(345)").clone()
   **/
  "clone": function() {
    return newFraction(this["s"] * this["n"], this["d"]);
  },
  /**
   * Calculates the modulo of two rational numbers - a more precise fmod
   *
   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
   * Ex: new Fraction(20, 10).mod().equals(0) ? "is Integer"
   **/
  "mod": function(a, b) {
    if (a === void 0) {
      return newFraction(this["s"] * this["n"] % this["d"], C_ONE);
    }
    parse(a, b);
    if (C_ZERO === P["n"] * this["d"]) {
      throw DivisionByZero();
    }
    return newFraction(
      this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
      P["d"] * this["d"]
    );
  },
  /**
   * Calculates the fractional gcd of two rational numbers
   *
   * Ex: new Fraction(5,8).gcd(3,7) => 1/56
   */
  "gcd": function(a, b) {
    parse(a, b);
    return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
  },
  /**
   * Calculates the fractional lcm of two rational numbers
   *
   * Ex: new Fraction(5,8).lcm(3,7) => 15
   */
  "lcm": function(a, b) {
    parse(a, b);
    if (P["n"] === C_ZERO && this["n"] === C_ZERO) {
      return newFraction(C_ZERO, C_ONE);
    }
    return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
  },
  /**
   * Gets the inverse of the fraction, means numerator and denominator are exchanged
   *
   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
   **/
  "inverse": function() {
    return newFraction(this["s"] * this["d"], this["n"]);
  },
  /**
   * Calculates the fraction to some integer exponent
   *
   * Ex: new Fraction(-1,2).pow(-3) => -8
   */
  "pow": function(a, b) {
    parse(a, b);
    if (P["d"] === C_ONE) {
      if (P["s"] < C_ZERO) {
        return newFraction((this["s"] * this["d"]) ** P["n"], this["n"] ** P["n"]);
      } else {
        return newFraction((this["s"] * this["n"]) ** P["n"], this["d"] ** P["n"]);
      }
    }
    if (this["s"] < C_ZERO) return null;
    let N2 = factorize(this["n"]);
    let D3 = factorize(this["d"]);
    let n = C_ONE;
    let d2 = C_ONE;
    for (let k in N2) {
      if (k === "1") continue;
      if (k === "0") {
        n = C_ZERO;
        break;
      }
      N2[k] *= P["n"];
      if (N2[k] % P["d"] === C_ZERO) {
        N2[k] /= P["d"];
      } else return null;
      n *= BigInt(k) ** N2[k];
    }
    for (let k in D3) {
      if (k === "1") continue;
      D3[k] *= P["n"];
      if (D3[k] % P["d"] === C_ZERO) {
        D3[k] /= P["d"];
      } else return null;
      d2 *= BigInt(k) ** D3[k];
    }
    if (P["s"] < C_ZERO) {
      return newFraction(d2, n);
    }
    return newFraction(n, d2);
  },
  /**
   * Calculates the logarithm of a fraction to a given rational base
   *
   * Ex: new Fraction(27, 8).log(9, 4) => 3/2
   */
  "log": function(a, b) {
    parse(a, b);
    if (this["s"] <= C_ZERO || P["s"] <= C_ZERO) return null;
    const allPrimes = /* @__PURE__ */ Object.create(null);
    const baseFactors = factorize(P["n"]);
    const T1 = factorize(P["d"]);
    const numberFactors = factorize(this["n"]);
    const T22 = factorize(this["d"]);
    for (const prime in T1) {
      baseFactors[prime] = (baseFactors[prime] || C_ZERO) - T1[prime];
    }
    for (const prime in T22) {
      numberFactors[prime] = (numberFactors[prime] || C_ZERO) - T22[prime];
    }
    for (const prime in baseFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    for (const prime in numberFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    let retN = null;
    let retD = null;
    for (const prime in allPrimes) {
      const baseExponent = baseFactors[prime] || C_ZERO;
      const numberExponent = numberFactors[prime] || C_ZERO;
      if (baseExponent === C_ZERO) {
        if (numberExponent !== C_ZERO) {
          return null;
        }
        continue;
      }
      let curN = numberExponent;
      let curD = baseExponent;
      const gcdValue = gcd(curN, curD);
      curN /= gcdValue;
      curD /= gcdValue;
      if (retN === null && retD === null) {
        retN = curN;
        retD = curD;
      } else if (curN * retD !== retN * curD) {
        return null;
      }
    }
    return retN !== null && retD !== null ? newFraction(retN, retD) : null;
  },
  /**
   * Check if two rational numbers are the same
   *
   * Ex: new Fraction(19.6).equals([98, 5]);
   **/
  "equals": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] < P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] <= P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] > P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] >= P["s"] * P["n"] * this["d"];
  },
  /**
   * Compare two rational numbers
   * < 0 iff this < that
   * > 0 iff this > that
   * = 0 iff this = that
   *
   * Ex: new Fraction(19.6).compare([98, 5]);
   **/
  "compare": function(a, b) {
    parse(a, b);
    let t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
    return (C_ZERO < t) - (t < C_ZERO);
  },
  /**
   * Calculates the ceil of a rational number
   *
   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
   **/
  "ceil": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) + (places * this["n"] % this["d"] > C_ZERO && this["s"] >= C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Calculates the floor of a rational number
   *
   * Ex: new Fraction('4.(3)').floor() => (4 / 1)
   **/
  "floor": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) - (places * this["n"] % this["d"] > C_ZERO && this["s"] < C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Rounds a rational numbers
   *
   * Ex: new Fraction('4.(3)').round() => (4 / 1)
   **/
  "round": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) + this["s"] * ((this["s"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this["n"] % this["d"]) > this["d"] ? C_ONE : C_ZERO),
      places
    );
  },
  /**
    * Rounds a rational number to a multiple of another rational number
    *
    * Ex: new Fraction('0.9').roundTo("1/8") => 7 / 8
    **/
  "roundTo": function(a, b) {
    parse(a, b);
    const n = this["n"] * P["d"];
    const d2 = this["d"] * P["n"];
    const r = n % d2;
    let k = ifloor(n / d2);
    if (r + r >= d2) {
      k++;
    }
    return newFraction(this["s"] * k * P["n"], P["d"]);
  },
  /**
   * Check if two rational numbers are divisible
   *
   * Ex: new Fraction(19.6).divisible(1.5);
   */
  "divisible": function(a, b) {
    parse(a, b);
    if (P["n"] === C_ZERO) return false;
    return this["n"] * P["d"] % (P["n"] * this["d"]) === C_ZERO;
  },
  /**
   * Returns a decimal representation of the fraction
   *
   * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
   **/
  "valueOf": function() {
    return Number(this["s"] * this["n"]) / Number(this["d"]);
  },
  /**
   * Creates a string representation of a fraction with all digits
   *
   * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
   **/
  "toString": function(dec = 15) {
    let N2 = this["n"];
    let D3 = this["d"];
    let cycLen = cycleLen(N2, D3);
    let cycOff = cycleStart(N2, D3, cycLen);
    let str = this["s"] < C_ZERO ? "-" : "";
    str += ifloor(N2 / D3);
    N2 %= D3;
    N2 *= C_TEN;
    if (N2)
      str += ".";
    if (cycLen) {
      for (let i2 = cycOff; i2--; ) {
        str += ifloor(N2 / D3);
        N2 %= D3;
        N2 *= C_TEN;
      }
      str += "(";
      for (let i2 = cycLen; i2--; ) {
        str += ifloor(N2 / D3);
        N2 %= D3;
        N2 *= C_TEN;
      }
      str += ")";
    } else {
      for (let i2 = dec; N2 && i2--; ) {
        str += ifloor(N2 / D3);
        N2 %= D3;
        N2 *= C_TEN;
      }
    }
    return str;
  },
  /**
   * Returns a string-fraction representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
   **/
  "toFraction": function(showMixed = false) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      const whole = ifloor(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        str += " ";
        n %= d2;
      }
      str += n;
      str += "/";
      str += d2;
    }
    return str;
  },
  /**
   * Returns a latex representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
   **/
  "toLatex": function(showMixed = false) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      const whole = ifloor(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        n %= d2;
      }
      str += "\\frac{";
      str += n;
      str += "}{";
      str += d2;
      str += "}";
    }
    return str;
  },
  /**
   * Returns an array of continued fraction elements
   *
   * Ex: new Fraction("7/8").toContinued() => [0,1,7]
   */
  "toContinued": function() {
    let a = this["n"];
    let b = this["d"];
    const res = [];
    while (b) {
      res.push(ifloor(a / b));
      const t = a % b;
      a = b;
      b = t;
    }
    return res;
  },
  "simplify": function(eps = 1e-3) {
    const ieps = BigInt(Math.ceil(1 / eps));
    const thisABS = this["abs"]();
    const cont = thisABS["toContinued"]();
    for (let i2 = 1; i2 < cont.length; i2++) {
      let s = newFraction(cont[i2 - 1], C_ONE);
      for (let k = i2 - 2; k >= 0; k--) {
        s = s["inverse"]()["add"](cont[k]);
      }
      let t = s["sub"](thisABS);
      if (t["n"] * ieps < t["d"]) {
        return s["mul"](this["s"]);
      }
    }
    return this;
  }
};

// node_modules/@strudel/core/dist/index.mjs
var It = "strudel.log";
var Te = 1e3;
var Jt;
var jt;
function Ht(t, e = "cyclist") {
  z(`[${e}] error: ${t.message}`);
}
function z(t, e, n = {}) {
  let s = performance.now();
  Jt === t && s - jt < Te || (Jt = t, jt = s, console.log(`%c${t}`, "background-color: black;color:white;border-radius:15px"), typeof document < "u" && typeof CustomEvent < "u" && document.dispatchEvent(
    new CustomEvent(It, {
      detail: {
        message: t,
        type: e,
        data: n
      }
    })
  ));
}
z.key = It;
var Iu = (t) => /^[a-gA-G][#bs]*[0-9]$/.test(t);
var _t = (t) => /^[a-gA-G][#bsf]*[0-9]?$/.test(t);
var xe = (t) => {
  if (typeof t != "string")
    return [];
  const [e, n = "", s] = t.match(/^([a-gA-G])([#bsf]*)([0-9]*)$/)?.slice(1) || [];
  return e ? [e, n, s ? Number(s) : void 0] : [];
};
var Ce = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 };
var Be = { "#": 1, b: -1, s: 1, f: -1 };
var lt = (t, e = 3) => {
  const [n, s, r = e] = xe(t);
  if (!n)
    throw new Error('not a note: "' + t + '"');
  const o = Ce[n.toLowerCase()], c = s?.split("").reduce((u, a) => u + Be[a], 0) || 0;
  return (Number(r) + 1) * 12 + o + c;
};
var et = (t) => Math.pow(2, (t - 69) / 12) * 440;
var Oe = (t) => 12 * Math.log(t / 440) / Math.LN2 + 69;
var Hu = (t, e) => {
  if (typeof t != "object")
    throw new Error("valueToMidi: expected object value");
  let { freq: n, note: s } = t;
  if (typeof n == "number")
    return Oe(n);
  if (typeof s == "string")
    return lt(s);
  if (typeof s == "number")
    return s;
  if (!e)
    throw new Error("valueToMidi: expected freq or note to be set");
  return e;
};
var Vu = (t, e) => (t - e) * 1e3;
var ze = (t) => et(typeof t == "number" ? t : lt(t));
var Ee = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Fu = (t) => {
  const e = Math.floor(t / 12) - 1;
  return Ee[t % 12] + e;
};
var pt = (t, e) => (t % e + e) % e;
var Me = (t) => t.reduce((e, n) => e + n) / t.length;
function Je(t, e = 0) {
  return isNaN(Number(t)) ? (z(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
var Du = (t, e) => pt(Math.round(Je(t ?? 0, 0)), e);
var Gu = (t) => {
  let { value: e, context: n } = t, s = e;
  if (typeof s == "object" && !Array.isArray(s) && (s = s.note || s.n || s.value, s === void 0))
    throw new Error(`cannot find a playable note for ${JSON.stringify(e)}`);
  if (typeof s == "number" && n.type !== "frequency")
    s = et(t.value);
  else if (typeof s == "number" && n.type === "frequency")
    s = t.value;
  else if (typeof s != "string" || !_t(s))
    throw new Error("not a note: " + JSON.stringify(s));
  return s;
};
var Qu = (t) => {
  let { value: e, context: n } = t;
  if (typeof e == "object")
    return e.freq ? e.freq : ze(e.note || e.n || e.value);
  if (typeof e == "number" && n.type !== "frequency")
    e = et(t.value);
  else if (typeof e == "string" && _t(e))
    e = et(lt(t.value));
  else if (typeof e != "number")
    throw new Error("not a note or frequency: " + e);
  return e;
};
var je = (t, e) => t.slice(e).concat(t.slice(0, e));
var Pe = (...t) => t.reduce(
  (e, n) => (...s) => e(n(...s)),
  (e) => e
);
var Uu = (...t) => Pe(...t.reverse());
var ot = (t) => t.filter((e) => e != null);
var F = (t) => [].concat(...t);
var tt = (t) => t;
var Ku = (t, e) => t;
var Vt = (t, e) => Array.from({ length: e - t + 1 }, (n, s) => s + t);
function g(t, e, n = t.length) {
  const s = function r(...o) {
    if (o.length >= n)
      return t.apply(this, o);
    {
      const c = function(...u) {
        return r.apply(this, o.concat(u));
      };
      return e && e(c, o), c;
    }
  };
  return e && e(s, []), s;
}
function Ft(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  if (_t(t))
    return lt(t);
  throw new Error(`cannot parse as numeral: "${t}"`);
}
function Dt(t, e) {
  return (...n) => t(...n.map(e));
}
function $(t) {
  return Dt(t, Ft);
}
function Ne(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  const n = {
    pi: Math.PI,
    w: 1,
    h: 0.5,
    q: 0.25,
    e: 0.125,
    s: 0.0625,
    t: 1 / 3,
    f: 0.2,
    x: 1 / 6
  }[t];
  if (typeof n < "u")
    return n;
  throw new Error(`cannot parse as fractional: "${t}"`);
}
var Xu = (t) => Dt(t, Ne);
var Gt = function(t, e) {
  return [e.slice(0, t), e.slice(t)];
};
var vt = (t, e, n) => e.map((s, r) => t(s, n[r]));
var $e = function(t) {
  const e = [];
  for (let n = 0; n < t.length - 1; ++n)
    e.push([t[n], t[n + 1]]);
  return e;
};
var Re = (t, e, n) => Math.min(Math.max(t, e), n);
var We = ["Do", "Reb", "Re", "Mib", "Mi", "Fa", "Solb", "Sol", "Lab", "La", "Sib", "Si"];
var Le = [
  "Sa",
  "Re",
  "Ga",
  "Ma",
  "Pa",
  "Dha",
  "Ni"
];
var Ie = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Hb", "H"];
var He = [
  "Ni",
  "Pab",
  "Pa",
  "Voub",
  "Vou",
  "Ga",
  "Dib",
  "Di",
  "Keb",
  "Ke",
  "Zob",
  "Zo"
];
var Ve = [
  "I",
  "Ro",
  "Ha",
  "Ni",
  "Ho",
  "He",
  "To"
];
var Fe = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Yu = (t, e = "letters") => {
  const s = (e === "solfeggio" ? We : e === "indian" ? Le : e === "german" ? Ie : e === "byzantine" ? He : e === "japanese" ? Ve : Fe)[t % 12], r = Math.floor(t / 12) - 1;
  return s + r;
};
function Zu(t) {
  var e = {};
  return t.filter(function(n) {
    return e.hasOwn(n) ? false : e[n] = true;
  });
}
function ta(t) {
  return t.sort().filter(function(e, n, s) {
    return !n || e != s[n - 1];
  });
}
function De(t) {
  return t.sort((e, n) => e.compare(n)).filter(function(e, n, s) {
    return !n || e.ne(s[n - 1]);
  });
}
function Ge(t) {
  const e = new TextEncoder().encode(t);
  return btoa(String.fromCharCode(...e));
}
function Qe(t) {
  const e = new Uint8Array(
    atob(t).split("").map((s) => s.charCodeAt(0))
  );
  return new TextDecoder().decode(e);
}
function ea(t) {
  return encodeURIComponent(Ge(t));
}
function na(t) {
  return Qe(decodeURIComponent(t));
}
function Ue(t, e) {
  return Array.isArray(t) ? t.map(e) : Object.fromEntries(Object.entries(t).map(([n, s], r) => [n, e(s, n, r)]));
}
function Pt(t, e) {
  return t / e;
}
var Ke = class {
  constructor({
    getTargetClockTime: e = Xe,
    weight: n = 16,
    offsetDelta: s = 5e-3,
    checkAfterTime: r = 2,
    resetAfterTime: o = 8
  }) {
    this.offsetTime, this.timeAtPrevOffsetSample, this.prevOffsetTimes = [], this.getTargetClockTime = e, this.weight = n, this.offsetDelta = s, this.checkAfterTime = r, this.resetAfterTime = o, this.reset = () => {
      this.prevOffsetTimes = [], this.offsetTime = null, this.timeAtPrevOffsetSample = null;
    };
  }
  calculateOffset(e) {
    const n = this.getTargetClockTime(), s = n - this.timeAtPrevOffsetSample, r = n - e;
    if (s > this.resetAfterTime && this.reset(), this.offsetTime == null && (this.offsetTime = r), this.prevOffsetTimes.push(r), this.prevOffsetTimes.length > this.weight && this.prevOffsetTimes.shift(), this.timeAtPrevOffsetSample == null || s > this.checkAfterTime) {
      this.timeAtPrevOffsetSample = n;
      const o = Me(this.prevOffsetTimes);
      Math.abs(o - this.offsetTime) > this.offsetDelta && (this.offsetTime = o);
    }
    return this.offsetTime;
  }
  calculateTimestamp(e, n) {
    return this.calculateOffset(e) + n;
  }
};
function sa() {
  return performance.now() * 1e-3;
}
function Xe() {
  return Date.now() * 1e-3;
}
var Ye = /* @__PURE__ */ new Map([
  ["control", "Control"],
  ["ctrl", "Control"],
  ["alt", "Alt"],
  ["shift", "Shift"],
  ["down", "ArrowDown"],
  ["up", "ArrowUp"],
  ["left", "ArrowLeft"],
  ["right", "ArrowRight"]
]);
var Z;
function Ze() {
  if (Z == null) {
    if (typeof window > "u")
      return;
    Z = {}, window.addEventListener("keydown", (t) => {
      Z[t.key] = true;
    }), window.addEventListener("keyup", (t) => {
      Z[t.key] = false;
    });
  }
  return { ...Z };
}
function Qt(t, e = false) {
  return typeof t == "object" ? e ? JSON.stringify(t).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(t) : t;
}
Fraction.prototype.sam = function() {
  return this.floor();
};
Fraction.prototype.nextSam = function() {
  return this.sam().add(1);
};
Fraction.prototype.wholeCycle = function() {
  return new C(this.sam(), this.nextSam());
};
Fraction.prototype.cyclePos = function() {
  return this.sub(this.sam());
};
Fraction.prototype.lt = function(t) {
  return this.compare(t) < 0;
};
Fraction.prototype.gt = function(t) {
  return this.compare(t) > 0;
};
Fraction.prototype.lte = function(t) {
  return this.compare(t) <= 0;
};
Fraction.prototype.gte = function(t) {
  return this.compare(t) >= 0;
};
Fraction.prototype.eq = function(t) {
  return this.compare(t) == 0;
};
Fraction.prototype.ne = function(t) {
  return this.compare(t) != 0;
};
Fraction.prototype.max = function(t) {
  return this.gt(t) ? this : t;
};
Fraction.prototype.maximum = function(...t) {
  return t = t.map((e) => new Fraction(e)), t.reduce((e, n) => n.max(e), this);
};
Fraction.prototype.min = function(t) {
  return this.lt(t) ? this : t;
};
Fraction.prototype.mulmaybe = function(t) {
  return t !== void 0 ? this.mul(t) : void 0;
};
Fraction.prototype.divmaybe = function(t) {
  return t !== void 0 ? this.div(t) : void 0;
};
Fraction.prototype.addmaybe = function(t) {
  return t !== void 0 ? this.add(t) : void 0;
};
Fraction.prototype.submaybe = function(t) {
  return t !== void 0 ? this.sub(t) : void 0;
};
Fraction.prototype.show = function() {
  return this.s * this.n + "/" + this.d;
};
Fraction.prototype.or = function(t) {
  return this.eq(0) ? t : this;
};
var d = (t) => Fraction(t);
var tn = (...t) => {
  if (t = ot(t), t.length !== 0)
    return t.reduce((e, n) => e.gcd(n), d(1));
};
var U = (...t) => {
  if (t = ot(t), t.length === 0)
    return;
  const e = t.pop();
  return t.reduce(
    (n, s) => n === void 0 || s === void 0 ? void 0 : n.lcm(s),
    e
  );
};
d._original = Fraction;
var C = class _C {
  constructor(e, n) {
    this.begin = d(e), this.end = d(n);
  }
  get spanCycles() {
    const e = [];
    var n = this.begin;
    const s = this.end, r = s.sam();
    if (n.equals(s))
      return [new _C(n, s)];
    for (; s.gt(n); ) {
      if (n.sam().equals(r)) {
        e.push(new _C(n, this.end));
        break;
      }
      const o = n.nextSam();
      e.push(new _C(n, o)), n = o;
    }
    return e;
  }
  get duration() {
    return this.end.sub(this.begin);
  }
  cycleArc() {
    const e = this.begin.cyclePos(), n = e.add(this.duration);
    return new _C(e, n);
  }
  withTime(e) {
    return new _C(e(this.begin), e(this.end));
  }
  withEnd(e) {
    return new _C(this.begin, e(this.end));
  }
  withCycle(e) {
    const n = this.begin.sam(), s = n.add(e(this.begin.sub(n))), r = n.add(e(this.end.sub(n)));
    return new _C(s, r);
  }
  intersection(e) {
    const n = this.begin.max(e.begin), s = this.end.min(e.end);
    if (!n.gt(s) && !(n.equals(s) && (n.equals(this.end) && this.begin.lt(this.end) || n.equals(e.end) && e.begin.lt(e.end))))
      return new _C(n, s);
  }
  intersection_e(e) {
    const n = this.intersection(e);
    if (n == null)
      throw "TimeSpans do not intersect";
    return n;
  }
  midpoint() {
    return this.begin.add(this.duration.div(d(2)));
  }
  equals(e) {
    return this.begin.equals(e.begin) && this.end.equals(e.end);
  }
  show() {
    return this.begin.show() + " → " + this.end.show();
  }
};
var x = class _x {
  /*
        Event class, representing a value active during the timespan
        'part'. This might be a fragment of an event, in which case the
        timespan will be smaller than the 'whole' timespan, otherwise the
        two timespans will be the same. The 'part' must never extend outside of the
        'whole'. If the event represents a continuously changing value
        then the whole will be returned as None, in which case the given
        value will have been sampled from the point halfway between the
        start and end of the 'part' timespan.
        The context is to store a list of source code locations causing the event.
  
        The word 'Event' is more or less a reserved word in javascript, hence this
        class is named called 'Hap'.
        */
  constructor(e, n, s, r = {}, o = false) {
    this.whole = e, this.part = n, this.value = s, this.context = r, this.stateful = o, o && console.assert(typeof this.value == "function", "Stateful values must be functions");
  }
  get duration() {
    let e;
    return typeof this.value?.duration == "number" ? e = d(this.value.duration) : e = this.whole.end.sub(this.whole.begin), typeof this.value?.clip == "number" ? e.mul(this.value.clip) : e;
  }
  get endClipped() {
    return this.whole.begin.add(this.duration);
  }
  isActive(e) {
    return this.whole.begin <= e && this.endClipped >= e;
  }
  isInPast(e) {
    return e > this.endClipped;
  }
  isInNearPast(e, n) {
    return n - e <= this.endClipped;
  }
  isInFuture(e) {
    return e < this.whole.begin;
  }
  isInNearFuture(e, n) {
    return n < this.whole.begin && n > this.whole.begin - e;
  }
  isWithinTime(e, n) {
    return this.whole.begin <= n && this.endClipped >= e;
  }
  wholeOrPart() {
    return this.whole ? this.whole : this.part;
  }
  withSpan(e) {
    const n = this.whole ? e(this.whole) : void 0;
    return new _x(n, e(this.part), this.value, this.context);
  }
  withValue(e) {
    return new _x(this.whole, this.part, e(this.value), this.context);
  }
  hasOnset() {
    return this.whole != null && this.whole.begin.equals(this.part.begin);
  }
  hasTag(e) {
    return this.context.tags?.includes(e);
  }
  resolveState(e) {
    if (this.stateful && this.hasOnset()) {
      console.log("stateful");
      const n = this.value, [s, r] = n(e);
      return [s, new _x(this.whole, this.part, r, this.context, false)];
    }
    return [e, this];
  }
  spanEquals(e) {
    return this.whole == null && e.whole == null || this.whole.equals(e.whole);
  }
  equals(e) {
    return this.spanEquals(e) && this.part.equals(e.part) && // TODO would == be better ??
    this.value === e.value;
  }
  show(e = false) {
    const n = typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value;
    var s = "";
    if (this.whole == null)
      s = "~" + this.part.show;
    else {
      var r = this.whole.begin.equals(this.part.begin) && this.whole.end.equals(this.part.end);
      this.whole.begin.equals(this.part.begin) || (s = this.whole.begin.show() + " ⇜ "), r || (s += "("), s += this.part.show(), r || (s += ")"), this.whole.end.equals(this.part.end) || (s += " ⇝ " + this.whole.end.show());
    }
    return "[ " + s + " | " + n + " ]";
  }
  showWhole(e = false) {
    return `${this.whole == null ? "~" : this.whole.show()}: ${Qt(this.value, e)}`;
  }
  combineContext(e) {
    const n = this;
    return { ...n.context, ...e.context, locations: (n.context.locations || []).concat(e.context.locations || []) };
  }
  setContext(e) {
    return new _x(this.whole, this.part, this.value, e);
  }
  ensureObjectValue() {
    if (typeof this.value != "object")
      throw new Error(
        `expected hap.value to be an object, but got "${this.value}". Hint: append .note() or .s() to the end`,
        "error"
      );
  }
};
var nt = class _nt {
  constructor(e, n = {}) {
    this.span = e, this.controls = n;
  }
  // Returns new State with different span
  setSpan(e) {
    return new _nt(e, this.controls);
  }
  withSpan(e) {
    return this.setSpan(e(this.span));
  }
  // Returns new State with different controls
  setControls(e) {
    return new _nt(this.span, e);
  }
};
function en(t, e, n) {
  if (e?.value !== void 0 && Object.keys(e).length === 1)
    return z("[warn]: Can't do arithmetic on control pattern."), t;
  const s = Object.keys(t).filter((r) => Object.keys(e).includes(r));
  return Object.assign({}, t, e, Object.fromEntries(s.map((r) => [r, n(t[r], e[r])])));
}
g((t, e) => t * e);
g((t, e) => e.map(t));
function nn(t, e = 60) {
  let n = 0, s = d(0), r = [""], o = "";
  for (; r[0].length < e; ) {
    const c = t.queryArc(n, n + 1), u = c.filter((m2) => m2.hasOnset()).map((m2) => m2.duration), a = tn(...u), p = a.inverse();
    r = r.map((m2) => m2 + "|"), o += "|";
    for (let m2 = 0; m2 < p; m2++) {
      const [y, b] = [s, s.add(a)], w2 = c.filter((k) => k.whole.begin.lte(y) && k.whole.end.gte(b)), v = w2.length - r.length;
      v > 0 && (r = r.concat(Array(v).fill(o))), r = r.map((k, E) => {
        const M = w2[E];
        if (M) {
          const A = M.whole.begin.eq(y) ? "" + M.value : "-";
          return k + A;
        }
        return k + ".";
      }), o += ".", s = s.add(a);
    }
    n++;
  }
  return r.join(`
`);
}
var gt;
var L = true;
var ra = function(t) {
  L = !!t;
};
var oa = (t) => gt = t;
var f = class _f2 {
  /**
   * Create a pattern. As an end user, you will most likely not create a Pattern directly.
   *
   * @param {function} query - The function that maps a `State` to an array of `Hap`.
   * @noAutocomplete
   */
  constructor(e, n = void 0) {
    this.query = e, this._Pattern = true, this._steps = n;
  }
  get _steps() {
    return this.__steps;
  }
  set _steps(e) {
    this.__steps = e === void 0 ? void 0 : d(e);
  }
  setSteps(e) {
    return this._steps = e, this;
  }
  withSteps(e) {
    return L ? new _f2(this.query, this._steps === void 0 ? void 0 : e(this._steps)) : this;
  }
  get hasSteps() {
    return this._steps !== void 0;
  }
  //////////////////////////////////////////////////////////////////////
  // Haskell-style functor, applicative and monadic operations
  /**
   * Returns a new pattern, with the function applied to the value of
   * each hap. It has the alias `fmap`.
   * @synonyms fmap
   * @param {Function} func to to apply to the value
   * @returns Pattern
   * @example
   * "0 1 2".withValue(v => v + 10).log()
   */
  withValue(e) {
    const n = new _f2((s) => this.query(s).map((r) => r.withValue(e)));
    return n._steps = this._steps, n;
  }
  // runs func on query state
  withState(e) {
    return this.withHaps((n, s) => (e(s), n));
  }
  /**
   * see `withValue`
   * @noAutocomplete
   */
  fmap(e) {
    return this.withValue(e);
  }
  /**
   * Assumes 'this' is a pattern of functions, and given a function to
   * resolve wholes, applies a given pattern of values to that
   * pattern of functions.
   * @param {Function} whole_func
   * @param {Function} func
   * @noAutocomplete
   * @returns Pattern
   */
  appWhole(e, n) {
    const s = this, r = function(o) {
      const c = s.query(o), u = n.query(o), a = function(p, m2) {
        const y = p.part.intersection(m2.part);
        if (y != null)
          return new x(
            e(p.whole, m2.whole),
            y,
            p.value(m2.value),
            m2.combineContext(p)
          );
      };
      return F(
        c.map((p) => ot(u.map((m2) => a(p, m2))))
      );
    };
    return new _f2(r);
  }
  /**
   * When this method is called on a pattern of functions, it matches its haps
   * with those in the given pattern of values.  A new pattern is returned, with
   * each matching value applied to the corresponding function.
   *
   * In this `_appBoth` variant, where timespans of the function and value haps
   * are not the same but do intersect, the resulting hap has a timespan of the
   * intersection. This applies to both the part and the whole timespan.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appBoth(e) {
    const n = this, s = function(o, c) {
      if (!(o == null || c == null))
        return o.intersection_e(c);
    }, r = n.appWhole(s, e);
    return L && (r._steps = U(e._steps, n._steps)), r;
  }
  /**
   * As with `appBoth`, but the `whole` timespan is not the intersection,
   * but the timespan from the function of patterns that this method is called
   * on. In practice, this means that the pattern structure, including onsets,
   * are preserved from the pattern of functions (often referred to as the left
   * hand or inner pattern).
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appLeft(e) {
    const n = this, s = function(o) {
      const c = [];
      for (const u of n.query(o)) {
        const a = e.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m2 = u.whole, y = u.part.intersection(p.part);
          if (y) {
            const b = u.value(p.value), w2 = p.combineContext(u), v = new x(m2, y, b, w2);
            c.push(v);
          }
        }
      }
      return c;
    }, r = new _f2(s);
    return r._steps = this._steps, r;
  }
  /**
   * As with `appLeft`, but `whole` timespans are instead taken from the
   * pattern of values, i.e. structure is preserved from the right hand/outer
   * pattern.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appRight(e) {
    const n = this, s = function(o) {
      const c = [];
      for (const u of e.query(o)) {
        const a = n.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m2 = u.whole, y = p.part.intersection(u.part);
          if (y) {
            const b = p.value(u.value), w2 = u.combineContext(p), v = new x(m2, y, b, w2);
            c.push(v);
          }
        }
      }
      return c;
    }, r = new _f2(s);
    return r._steps = e._steps, r;
  }
  bindWhole(e, n) {
    const s = this, r = function(o) {
      const c = function(a, p) {
        return new x(
          e(a.whole, p.whole),
          p.part,
          p.value,
          Object.assign({}, a.context, p.context, {
            locations: (a.context.locations || []).concat(p.context.locations || [])
          })
        );
      }, u = function(a) {
        return n(a.value).query(o.setSpan(a.part)).map((p) => c(a, p));
      };
      return F(s.query(o).map((a) => u(a)));
    };
    return new _f2(r);
  }
  bind(e) {
    const n = function(s, r) {
      if (!(s == null || r == null))
        return s.intersection_e(r);
    };
    return this.bindWhole(n, e);
  }
  join() {
    return this.bind(tt);
  }
  outerBind(e) {
    return this.bindWhole((n) => n, e).setSteps(this._steps);
  }
  outerJoin() {
    return this.outerBind(tt);
  }
  innerBind(e) {
    return this.bindWhole((n, s) => s, e);
  }
  innerJoin() {
    return this.innerBind(tt);
  }
  // Flatterns patterns of patterns, by retriggering/resetting inner patterns at onsets of outer pattern haps
  resetJoin(e = false) {
    const n = this;
    return new _f2((s) => n.discreteOnly().query(s).map((r) => r.value.late(e ? r.whole.begin : r.whole.begin.cyclePos()).query(s).map(
      (o) => new x(
        // Supports continuous haps in the inner pattern
        o.whole ? o.whole.intersection(r.whole) : void 0,
        o.part.intersection(r.part),
        o.value
      ).setContext(r.combineContext(o))
    ).filter((o) => o.part)).flat());
  }
  restartJoin() {
    return this.resetJoin(true);
  }
  // Like the other joins above, joins a pattern of patterns of values, into a flatter
  // pattern of values. In this case it takes whole cycles of the inner pattern to fit each event
  // in the outer pattern.
  squeezeJoin() {
    const e = this;
    function n(s) {
      const r = e.discreteOnly().query(s);
      function o(u) {
        const p = u.value._focusSpan(u.wholeOrPart()).query(s.setSpan(u.part));
        function m2(y, b) {
          let w2;
          if (b.whole && y.whole && (w2 = b.whole.intersection(y.whole), !w2))
            return;
          const v = b.part.intersection(y.part);
          if (!v)
            return;
          const k = b.combineContext(y);
          return new x(w2, v, b.value, k);
        }
        return p.map((y) => m2(u, y));
      }
      return F(r.map(o)).filter((u) => u);
    }
    return new _f2(n);
  }
  squeezeBind(e) {
    return this.fmap(e).squeezeJoin();
  }
  polyJoin = function() {
    const e = this;
    return e.fmap((n) => n.extend(e._steps.div(n._steps))).outerJoin();
  };
  polyBind(e) {
    return this.fmap(e).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // Utility methods mainly for internal use
  /**
   * Query haps inside the given time span.
   *
   * @param {Fraction | number} begin from time
   * @param {Fraction | number} end to time
   * @returns Hap[]
   * @example
   * const pattern = sequence('a', ['b', 'c'])
   * const haps = pattern.queryArc(0, 1)
   * console.log(haps)
   * silence
   * @noAutocomplete
   */
  queryArc(e, n, s = {}) {
    try {
      return this.query(new nt(new C(e, n), s));
    } catch (r) {
      return z(`[query]: ${r.message}`, "error"), [];
    }
  }
  /**
   * Returns a new pattern, with queries split at cycle boundaries. This makes
   * some calculations easier to express, as all haps are then constrained to
   * happen within a cycle.
   * @returns Pattern
   * @noAutocomplete
   */
  splitQueries() {
    const e = this, n = (s) => F(s.span.spanCycles.map((r) => e.query(s.setSpan(r))));
    return new _f2(n);
  }
  /**
   * Returns a new pattern, where the given function is applied to the query
   * timespan before passing it to the original pattern.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQuerySpan(e) {
    return new _f2((n) => this.query(n.withSpan(e)));
  }
  withQuerySpanMaybe(e) {
    const n = this;
    return new _f2((s) => {
      const r = s.withSpan(e);
      return r.span ? n.query(r) : [];
    });
  }
  /**
   * As with `withQuerySpan`, but the function is applied to both the
   * begin and end time of the query timespan.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQueryTime(e) {
    return new _f2((n) => this.query(n.withSpan((s) => s.withTime(e))));
  }
  /**
   * Similar to `withQuerySpan`, but the function is applied to the timespans
   * of all haps returned by pattern queries (both `part` timespans, and where
   * present, `whole` timespans).
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHapSpan(e) {
    return new _f2((n) => this.query(n).map((s) => s.withSpan(e)));
  }
  /**
   * As with `withHapSpan`, but the function is applied to both the
   * begin and end time of the hap timespans.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withHapTime(e) {
    return this.withHapSpan((n) => n.withTime(e));
  }
  /**
   * Returns a new pattern with the given function applied to the list of haps returned by every query.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHaps(e) {
    const n = new _f2((s) => e(this.query(s), s));
    return n._steps = this._steps, n;
  }
  /**
   * As with `withHaps`, but applies the function to every hap, rather than every list of haps.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHap(e) {
    return this.withHaps((n) => n.map(e));
  }
  /**
   * Returns a new pattern with the context field set to every hap set to the given value.
   * @param {*} context
   * @returns Pattern
   * @noAutocomplete
   */
  setContext(e) {
    return this.withHap((n) => n.setContext(e));
  }
  /**
   * Returns a new pattern with the given function applied to the context field of every hap.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withContext(e) {
    const n = this.withHap((s) => s.setContext(e(s.context)));
    return this.__pure !== void 0 && (n.__pure = this.__pure, n.__pure_loc = this.__pure_loc), n;
  }
  /**
   * Returns a new pattern with the context field of every hap set to an empty object.
   * @returns Pattern
   * @noAutocomplete
   */
  stripContext() {
    return this.withHap((e) => e.setContext({}));
  }
  /**
   * Returns a new pattern with the given location information added to the
   * context of every hap.
   * @param {Number} start start offset
   * @param {Number} end end offset
   * @returns Pattern
   * @noAutocomplete
   */
  withLoc(e, n) {
    const s = {
      start: e,
      end: n
    }, r = this.withContext((o) => {
      const c = (o.locations || []).concat([s]);
      return { ...o, locations: c };
    });
    return this.__pure && (r.__pure = this.__pure, r.__pure_loc = s), r;
  }
  /**
   * Returns a new Pattern, which only returns haps that meet the given test.
   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern
   * @returns Pattern
   * @noAutocomplete
   */
  filterHaps(e) {
    return new _f2((n) => this.query(n).filter(e));
  }
  /**
   * As with `filterHaps`, but the function is applied to values
   * inside haps.
   * @param {Function} value_test
   * @returns Pattern
   * @noAutocomplete
   */
  filterValues(e) {
    return new _f2((n) => this.query(n).filter((s) => e(s.value))).setSteps(this._steps);
  }
  /**
   * Returns a new pattern, with haps containing undefined values removed from
   * query results.
   * @returns Pattern
   * @noAutocomplete
   */
  removeUndefineds() {
    return this.filterValues((e) => e != null);
  }
  /**
   * Returns a new pattern, with all haps without onsets filtered out. A hap
   * with an onset is one with a `whole` timespan that begins at the same time
   * as its `part` timespan.
   * @returns Pattern
   * @noAutocomplete
   */
  onsetsOnly() {
    return this.filterHaps((e) => e.hasOnset());
  }
  /**
   * Returns a new pattern, with 'continuous' haps (those without 'whole'
   * timespans) removed from query results.
   * @returns Pattern
   * @noAutocomplete
   */
  discreteOnly() {
    return this.filterHaps((e) => e.whole);
  }
  /**
   * Combines adjacent haps with the same value and whole.  Only
   * intended for use in tests.
   * @noAutocomplete
   */
  defragmentHaps() {
    return this.discreteOnly().withHaps((n) => {
      const s = [];
      for (var r = 0; r < n.length; ++r) {
        for (var o = true, c = n[r]; o; ) {
          const p = JSON.stringify(n[r].value);
          for (var u = false, a = r + 1; a < n.length; a++) {
            const m2 = n[a];
            if (c.whole.equals(m2.whole)) {
              if (c.part.begin.eq(m2.part.end)) {
                if (p === JSON.stringify(m2.value)) {
                  c = new x(c.whole, new C(m2.part.begin, c.part.end), c.value), n.splice(a, 1), u = true;
                  break;
                }
              } else if (m2.part.begin.eq(c.part.end) && p == JSON.stringify(m2.value)) {
                c = new x(c.whole, new C(c.part.begin, m2.part.end), c.value), n.splice(a, 1), u = true;
                break;
              }
            }
          }
          o = u;
        }
        s.push(c);
      }
      return s;
    });
  }
  /**
   * Queries the pattern for the first cycle, returning Haps. Mainly of use when
   * debugging a pattern.
   * @param {Boolean} with_context - set to true, otherwise the context field
   * will be stripped from the resulting haps.
   * @returns [Hap]
   * @noAutocomplete
   */
  firstCycle(e = false) {
    var n = this;
    return e || (n = n.stripContext()), n.query(new nt(new C(d(0), d(1))));
  }
  /**
   * Accessor for a list of values returned by querying the first cycle.
   * @noAutocomplete
   */
  get firstCycleValues() {
    return this.firstCycle().map((e) => e.value);
  }
  /**
   * More human-readable version of the `firstCycleValues` accessor.
   * @noAutocomplete
   */
  get showFirstCycle() {
    return this.firstCycle().map(
      (e) => `${e.value}: ${e.whole.begin.toFraction()} - ${e.whole.end.toFraction()}`
    );
  }
  /**
   * Returns a new pattern, which returns haps sorted in temporal order. Mainly
   * of use when comparing two patterns for equality, in tests.
   * @returns Pattern
   * @noAutocomplete
   */
  sortHapsByPart() {
    return this.withHaps(
      (e) => e.sort(
        (n, s) => n.part.begin.sub(s.part.begin).or(n.part.end.sub(s.part.end)).or(n.whole.begin.sub(s.whole.begin).or(n.whole.end.sub(s.whole.end)))
      )
    );
  }
  asNumber() {
    return this.fmap(Ft);
  }
  //////////////////////////////////////////////////////////////////////
  // Operators - see 'make composers' later..
  _opIn(e, n) {
    return this.fmap(n).appLeft(h(e));
  }
  _opOut(e, n) {
    return this.fmap(n).appRight(h(e));
  }
  _opMix(e, n) {
    return this.fmap(n).appBoth(h(e));
  }
  _opSqueeze(e, n) {
    const s = h(e);
    return this.fmap((r) => s.fmap((o) => n(r)(o))).squeezeJoin();
  }
  _opSqueezeOut(e, n) {
    const s = this;
    return h(e).fmap((o) => s.fmap((c) => n(c)(o))).squeezeJoin();
  }
  _opReset(e, n) {
    return h(e).fmap((r) => this.fmap((o) => n(o)(r))).resetJoin();
  }
  _opRestart(e, n) {
    return h(e).fmap((r) => this.fmap((o) => n(o)(r))).restartJoin();
  }
  _opPoly(e, n) {
    const s = h(e);
    return this.fmap((r) => s.fmap((o) => n(o)(r))).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // End-user methods.
  // Those beginning with an underscore (_) are 'patternified',
  // i.e. versions are created without the underscore, that are
  // magically transformed to accept patterns for all their arguments.
  //////////////////////////////////////////////////////////////////////
  // Methods without corresponding toplevel functions
  /**
   * Layers the result of the given function(s). Like `superimpose`, but without the original pattern:
   * @name layer
   * @memberof Pattern
   * @synonyms apply
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .layer(x=>x.add("0,2"))
   *   .scale('C minor').note()
   */
  layer(...e) {
    return B(...e.map((n) => n(this)));
  }
  /**
   * Superimposes the result of the given function(s) on top of the original pattern:
   * @name superimpose
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .superimpose(x=>x.add(2))
   *   .scale('C minor').note()
   */
  superimpose(...e) {
    return this.stack(...e.map((n) => n(this)));
  }
  //////////////////////////////////////////////////////////////////////
  // Multi-pattern functions
  stack(...e) {
    return B(this, ...e);
  }
  sequence(...e) {
    return D(this, ...e);
  }
  seq(...e) {
    return D(this, ...e);
  }
  cat(...e) {
    return pn(this, ...e);
  }
  fastcat(...e) {
    return N(this, ...e);
  }
  slowcat(...e) {
    return K(this, ...e);
  }
  //////////////////////////////////////////////////////////////////////
  // Context methods - ones that deal with metadata
  onTrigger(e, n = true) {
    return this.withHap(
      (s) => s.setContext({
        ...s.context,
        onTrigger: (...r) => {
          s.context.onTrigger?.(...r), e(...r);
        },
        // if dominantTrigger is set to true, the default output (webaudio) will be disabled
        // when using multiple triggers, you cannot flip this flag to false again!
        // example: x.csound('CooLSynth').log() as well as x.log().csound('CooLSynth') should work the same
        dominantTrigger: s.context.dominantTrigger || n
      })
    );
  }
  /**
   * Writes the content of the current event to the console (visible in the side menu).
   * @name log
   * @memberof Pattern
   * @example
   * s("bd sd").log()
   */
  log(e = (s) => `[hap] ${s.showWhole(true)}`, n = (s) => ({ hap: s })) {
    return this.onTrigger((...s) => {
      z(e(...s), void 0, n(...s));
    }, false);
  }
  /**
   * A simplified version of `log` which writes all "values" (various configurable parameters)
   * within the event to the console (visible in the side menu).
   * @name logValues
   * @memberof Pattern
   * @example
   * s("bd sd").gain("0.25 0.5 1").n("2 1 0").logValues()
   */
  logValues(e = (n) => `[hap] ${Qt(n, true)}`) {
    return this.log((n) => e(n.value));
  }
  //////////////////////////////////////////////////////////////////////
  // Visualisation
  drawLine() {
    return console.log(nn(this)), this;
  }
  //////////////////////////////////////////////////////////////////////
  // methods relating to breaking patterns into subcycles
  // Breaks a pattern into a pattern of patterns, according to the structure of the given binary pattern.
  unjoin(e, n = tt) {
    return e.withHap(
      (s) => s.withValue((r) => r ? n(this.ribbon(s.whole.begin, s.whole.duration)) : this)
    );
  }
  /**
   * Breaks a pattern into pieces according to the structure of a given pattern.
   * True values in the given pattern cause the corresponding subcycle of the
   * source pattern to be looped, and for an (optional) given function to be
   * applied. False values result in the corresponding part of the source pattern
   * to be played unchanged.
   * @name into
   * @memberof Pattern
   * @example
   * sound("bd sd ht lt").into("1 0", hurry(2))
   */
  into(e, n) {
    return this.unjoin(e, n).innerJoin();
  }
};
function sn(t, e) {
  let n = [];
  return e.forEach((s) => {
    const r = n.findIndex(([o]) => t(s, o));
    r === -1 ? n.push([s]) : n[r].push(s);
  }), n;
}
var rn = (t, e) => t.spanEquals(e);
f.prototype.collect = function() {
  return this.withHaps(
    (t) => sn(rn, t).map((e) => new x(e[0].whole, e[0].part, e, {}))
  );
};
var ia = l("arpWith", (t, e) => e.collect().fmap((n) => h(t(n))).innerJoin().withHap((n) => new x(n.whole, n.part, n.value.value, n.combineContext(n.value))));
var ca = l(
  "arp",
  (t, e) => e.arpWith((n) => h(t).fmap((s) => n[s % n.length])),
  false
);
function ut(t) {
  return !Array.isArray(t) && typeof t == "object";
}
function on(t, e, n) {
  return ut(t) || ut(e) ? (ut(t) || (t = { value: t }), ut(e) || (e = { value: e }), en(t, e, n)) : n(t, e);
}
(function() {
  const t = {
    set: [(n, s) => s],
    keep: [(n) => n],
    keepif: [(n, s) => s ? n : void 0],
    // numerical functions
    /**
     *
     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.
     * @name add
     * @memberof Pattern
     * @example
     * // Here, the triad 0, 2, 4 is shifted by different amounts
     * n("0 2 4".add("<0 3 4 0>")).scale("C:major")
     * // Without add, the equivalent would be:
     * // n("<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>").scale("C:major")
     * @example
     * // You can also use add with notes:
     * note("c3 e3 g3".add("<0 5 7 0>"))
     * // Behind the scenes, the notes are converted to midi numbers:
     * // note("48 52 55".add("<0 5 7 0>"))
     */
    add: [$((n, s) => n + s)],
    // support string concatenation
    /**
     *
     * Like add, but the given numbers are subtracted.
     * @name sub
     * @memberof Pattern
     * @example
     * n("0 2 4".sub("<0 1 2 3>")).scale("C4:minor")
     * // See add for more information.
     */
    sub: [$((n, s) => n - s)],
    /**
     *
     * Multiplies each number by the given factor.
     * @name mul
     * @memberof Pattern
     * @example
     * "<1 1.5 [1.66, <2 2.33>]>*4".mul(150).freq()
     */
    mul: [$((n, s) => n * s)],
    /**
     *
     * Divides each number by the given factor.
     * @name div
     * @memberof Pattern
     */
    div: [$((n, s) => n / s)],
    mod: [$(pt)],
    pow: [$(Math.pow)],
    log2: [$(Math.log2)],
    band: [$((n, s) => n & s)],
    bor: [$((n, s) => n | s)],
    bxor: [$((n, s) => n ^ s)],
    blshift: [$((n, s) => n << s)],
    brshift: [$((n, s) => n >> s)],
    // TODO - force numerical comparison if both look like numbers?
    lt: [(n, s) => n < s],
    gt: [(n, s) => n > s],
    lte: [(n, s) => n <= s],
    gte: [(n, s) => n >= s],
    eq: [(n, s) => n == s],
    eqt: [(n, s) => n === s],
    ne: [(n, s) => n != s],
    net: [(n, s) => n !== s],
    and: [(n, s) => n && s],
    or: [(n, s) => n || s],
    //  bitwise ops
    func: [(n, s) => s(n)]
  }, e = ["In", "Out", "Mix", "Squeeze", "SqueezeOut", "Reset", "Restart", "Poly"];
  for (const [n, [s, r]] of Object.entries(t)) {
    f.prototype["_" + n] = function(o) {
      return this.fmap((c) => s(c, o));
    }, Object.defineProperty(f.prototype, n, {
      // a getter that returns a function, so 'pat' can be
      // accessed by closures that are methods of that function..
      get: function() {
        const o = this, c = (...u) => o[n].in(...u);
        for (const u of e)
          c[u.toLowerCase()] = function(...a) {
            var p = o;
            a = D(a), r && (p = r(p), a = r(a));
            var m2;
            return n === "keepif" ? (m2 = p["_op" + u](a, (y) => (b) => s(y, b)), m2 = m2.removeUndefineds()) : m2 = p["_op" + u](a, (y) => (b) => on(y, b, s)), m2;
          };
        return c.squeezein = c.squeeze, c;
      }
    });
    for (const o of e)
      f.prototype[o.toLowerCase()] = function(...c) {
        return this.set[o.toLowerCase()](c);
      };
  }
  f.prototype.struct = function(...n) {
    return this.keepif.out(...n);
  }, f.prototype.structAll = function(...n) {
    return this.keep.out(...n);
  }, f.prototype.mask = function(...n) {
    return this.keepif.in(...n);
  }, f.prototype.maskAll = function(...n) {
    return this.keep.in(...n);
  }, f.prototype.reset = function(...n) {
    return this.keepif.reset(...n);
  }, f.prototype.resetAll = function(...n) {
    return this.keep.reset(...n);
  }, f.prototype.restart = function(...n) {
    return this.keepif.restart(...n);
  }, f.prototype.restartAll = function(...n) {
    return this.keep.restart(...n);
  };
})();
var ua = B;
var aa = B;
var la = St;
var it = (t) => new f(() => [], t);
var S = it(1);
var R = it(0);
function P2(t) {
  function e(s) {
    return s.span.spanCycles.map((r) => new x(d(r.begin).wholeCycle(), r, t));
  }
  const n = new f(e, 1);
  return n.__pure = t, n;
}
function Ut(t) {
  return t instanceof f || t?._Pattern;
}
function h(t) {
  return Ut(t) ? t : gt && typeof t == "string" ? gt(t) : P2(t);
}
function cn(t) {
  let e = P2([]);
  for (const n of t)
    e = e.bind((s) => n.fmap((r) => s.concat([r])));
  return e;
}
function B(...t) {
  t = t.map((s) => Array.isArray(s) ? D(...s) : h(s));
  const e = (s) => F(t.map((r) => r.query(s))), n = new f(e);
  return L && (n._steps = U(...t.map((s) => s._steps))), n;
}
function kt(t, e) {
  if (e = e.map((o) => Array.isArray(o) ? D(...o) : h(o)), e.length === 0)
    return S;
  if (e.length === 1)
    return e[0];
  const [n, ...s] = e.map((o) => o._steps), r = L ? n.maximum(...s) : void 0;
  return B(...t(r, e));
}
function un(...t) {
  return kt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : j(s, it(e.sub(s._steps)))),
    t
  );
}
function an(...t) {
  return kt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : j(it(e.sub(s._steps)), s)),
    t
  );
}
function ln(...t) {
  return kt(
    (e, n) => n.map((s) => {
      if (s._steps.eq(e))
        return s;
      const r = it(e.sub(s._steps).div(2));
      return j(r, s, r);
    }),
    t
  );
}
function pa(t, ...e) {
  const [n, ...s] = e.map((c) => c._steps), r = n.maximum(...s), o = {
    centre: ln,
    left: un,
    right: an,
    expand: B,
    repeat: (...c) => St(...c).steps(r)
  };
  return t.inhabit(o).fmap((c) => c(...e)).innerJoin().setSteps(r);
}
function K(...t) {
  if (t = t.map((s) => Array.isArray(s) ? N(...s) : h(s)), t.length == 1)
    return t[0];
  const e = function(s) {
    const r = s.span, o = pt(r.begin.sam(), t.length), c = t[o];
    if (!c)
      return [];
    const u = r.begin.floor().sub(r.begin.div(t.length).floor());
    return c.withHapTime((a) => a.add(u)).query(s.setSpan(r.withTime((a) => a.sub(u))));
  }, n = L ? U(...t.map((s) => s._steps)) : void 0;
  return new f(e).splitQueries().setSteps(n);
}
function Kt(...t) {
  t = t.map(h);
  const e = function(n) {
    const s = Math.floor(n.span.begin) % t.length;
    return t[s]?.query(n) || [];
  };
  return new f(e).splitQueries();
}
function pn(...t) {
  return K(...t);
}
function fa(...t) {
  const e = t.reduce((n, [s]) => n + s, 0);
  return t = t.map(([n, s]) => [n, s.fast(n)]), j(...t).slow(e);
}
function ha(...t) {
  let e = d(0);
  for (let n of t)
    n.length == 2 && n.unshift(e), e = n[1];
  return B(
    ...t.map(
      ([n, s, r]) => P2(h(r)).compress(d(n).div(e), d(s).div(e))
    )
  ).slow(e).innerJoin();
}
function N(...t) {
  let e = K(...t);
  return t.length > 1 && (e = e._fast(t.length), e._steps = t.length), t.length == 1 && t[0].__steps_source && (t._steps = t[0]._steps), e;
}
function D(...t) {
  return N(...t);
}
function fn(...t) {
  return N(...t);
}
function wt(t) {
  return Array.isArray(t) ? t.length == 0 ? [S, 0] : t.length == 1 ? wt(t[0]) : [N(...t.map((e) => wt(e)[0])), t.length] : [h(t), 1];
}
var da = g((t, e) => h(e).mask(t));
var ma = g((t, e) => h(e).struct(t));
var ya = g((t, e) => h(e).superimpose(...t));
var ga = g((t, e) => h(e).withValue(t));
var wa = g((t, e) => h(e).bind(t));
var ba = g((t, e) => h(e).innerBind(t));
var _a = g((t, e) => h(e).outerBind(t));
var va = g((t, e) => h(e).squeezeBind(t));
var ka = g((t, e) => h(e).stepBind(t));
var qa = g((t, e) => h(e).polyBind(t));
var Aa = g((t, e) => h(e).set(t));
var Sa = g((t, e) => h(e).keep(t));
var Ta = g((t, e) => h(e).keepif(t));
var xa = g((t, e) => h(e).add(t));
var Ca = g((t, e) => h(e).sub(t));
var Ba = g((t, e) => h(e).mul(t));
var Oa = g((t, e) => h(e).div(t));
var za = g((t, e) => h(e).mod(t));
var Ea = g((t, e) => h(e).pow(t));
var Ma = g((t, e) => h(e).band(t));
var Ja = g((t, e) => h(e).bor(t));
var ja = g((t, e) => h(e).bxor(t));
var Pa = g((t, e) => h(e).blshift(t));
var Na = g((t, e) => h(e).brshift(t));
var $a = g((t, e) => h(e).lt(t));
var Ra = g((t, e) => h(e).gt(t));
var Wa = g((t, e) => h(e).lte(t));
var La = g((t, e) => h(e).gte(t));
var Ia = g((t, e) => h(e).eq(t));
var Ha = g((t, e) => h(e).eqt(t));
var Va = g((t, e) => h(e).ne(t));
var Fa = g((t, e) => h(e).net(t));
var Da = g((t, e) => h(e).and(t));
var Ga = g((t, e) => h(e).or(t));
var Qa = g((t, e) => h(e).func(t));
function l(t, e, n = true, s = false, r = (o) => o.innerJoin()) {
  if (Array.isArray(t)) {
    const u = {};
    for (const a of t)
      u[a] = l(a, e, n, s, r);
    return u;
  }
  const o = e.length;
  var c;
  return n ? c = function(...u) {
    u = u.map(h);
    const a = u[u.length - 1];
    let p;
    if (o === 1)
      p = e(a);
    else {
      const m2 = u.slice(0, -1);
      if (m2.every((y) => y.__pure != null)) {
        const y = m2.map((w2) => w2.__pure), b = m2.filter((w2) => w2.__pure_loc).map((w2) => w2.__pure_loc);
        p = e(...y, a), p = p.withContext((w2) => {
          const v = (w2.locations || []).concat(b);
          return { ...w2, locations: v };
        });
      } else {
        const [y, ...b] = m2;
        let w2 = (...v) => e(...v, a);
        w2 = g(w2, null, o - 1), p = r(b.reduce((v, k) => v.appLeft(k), y.fmap(w2)));
      }
    }
    return s && (p._steps = a._steps), p;
  } : c = function(...u) {
    u = u.map(h);
    const a = e(...u);
    return s && (a._steps = u[u.length - 1]._steps), a;
  }, f.prototype[t] = function(...u) {
    if (o === 2 && u.length !== 1)
      u = [D(...u)];
    else if (o !== u.length + 1)
      throw new Error(`.${t}() expects ${o - 1} inputs but got ${u.length}.`);
    return u = u.map(h), c(...u, this);
  }, o > 1 && (f.prototype["_" + t] = function(...u) {
    const a = e(...u, this);
    return s && a.setSteps(this._steps), a;
  }), g(c, null, o);
}
function ct(t, e, n = true, s = false, r = (o) => o.stepJoin()) {
  return l(t, e, n, s, r);
}
var Ua = l("round", function(t) {
  return t.asNumber().fmap((e) => Math.round(e));
});
var Ka = l("floor", function(t) {
  return t.asNumber().fmap((e) => Math.floor(e));
});
var Xa = l("ceil", function(t) {
  return t.asNumber().fmap((e) => Math.ceil(e));
});
var Ya = l("toBipolar", function(t) {
  return t.fmap((e) => e * 2 - 1);
});
var Za = l("fromBipolar", function(t) {
  return t.fmap((e) => (e + 1) / 2);
});
var tl = l("range", function(t, e, n) {
  return n.mul(e - t).add(t);
});
var el = l("rangex", function(t, e, n) {
  return n._range(Math.log(t), Math.log(e)).fmap(Math.exp);
});
var nl = l("range2", function(t, e, n) {
  return n.fromBipolar()._range(t, e);
});
var sl = l(
  "ratio",
  (t) => t.fmap((e) => Array.isArray(e) ? e.slice(1).reduce((n, s) => n / s, e[0]) : e)
);
var rl = l("compress", function(t, e, n) {
  return t = d(t), e = d(e), t.gt(e) || t.gt(1) || e.gt(1) || t.lt(0) || e.lt(0) ? S : n._fastGap(d(1).div(e.sub(t)))._late(t);
});
var { compressSpan: ol, compressspan: il } = l(["compressSpan", "compressspan"], function(t, e) {
  return e._compress(t.begin, t.end);
});
var { fastGap: cl, fastgap: ul } = l(["fastGap", "fastgap"], function(t, e) {
  const n = function(r) {
    const o = r.begin.sam(), c = r.begin.sub(o).mul(t).min(1), u = r.end.sub(o).mul(t).min(1);
    if (!(c >= 1))
      return new C(o.add(c), o.add(u));
  }, s = function(r) {
    const o = r.part.begin, c = r.part.end, u = o.sam(), a = o.sub(u).div(t).min(1), p = c.sub(u).div(t).min(1), m2 = new C(u.add(a), u.add(p)), y = r.whole ? new C(
      m2.begin.sub(o.sub(r.whole.begin).div(t)),
      m2.end.add(r.whole.end.sub(c).div(t))
    ) : void 0;
    return new x(y, m2, r.value, r.context);
  };
  return e.withQuerySpanMaybe(n).withHap(s).splitQueries();
});
var al = l("focus", function(t, e, n) {
  return t = d(t), e = d(e), n._early(t.sam())._fast(d(1).div(e.sub(t)))._late(t);
});
var { focusSpan: ll, focusspan: pl } = l(["focusSpan", "focusspan"], function(t, e) {
  return e._focus(t.begin, t.end);
});
var fl = l("ply", function(t, e) {
  const n = e.fmap((s) => P2(s)._fast(t)).squeezeJoin();
  return L && (n._steps = d(t).mulmaybe(e._steps)), n;
});
var { fast: hl, density: dl } = l(
  ["fast", "density"],
  function(t, e) {
    return t === 0 ? S : (t = d(t), e.withQueryTime((s) => s.mul(t)).withHapTime((s) => s.div(t)).setSteps(e._steps));
  },
  true,
  true
);
var ml = l("hurry", function(t, e) {
  return e._fast(t).mul(P2({ speed: t }));
});
var { slow: yl, sparsity: gl } = l(["slow", "sparsity"], function(t, e) {
  return t === 0 ? S : e._fast(d(1).div(t));
});
var wl = l("inside", function(t, e, n) {
  return e(n._slow(t))._fast(t);
});
var bl = l("outside", function(t, e, n) {
  return e(n._fast(t))._slow(t);
});
var _l = l("lastOf", function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.push(e(n)), Kt(...s);
});
var { firstOf: vl, every: kl } = l(["firstOf", "every"], function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.unshift(e(n)), Kt(...s);
});
var ql = l("apply", function(t, e) {
  return t(e);
});
var Al = l("cpm", function(t, e) {
  return e._fast(t / 60 / 1);
});
var Sl = l(
  "early",
  function(t, e) {
    return t = d(t), e.withQueryTime((n) => n.add(t)).withHapTime((n) => n.sub(t));
  },
  true,
  true
);
var hn = l(
  "late",
  function(t, e) {
    return t = d(t), e._early(d(0).sub(t));
  },
  true,
  true
);
var Tl = l("zoom", function(t, e, n) {
  if (e = d(e), t = d(t), t.gte(e))
    return R;
  const s = e.sub(t), r = L ? n._steps?.mulmaybe(s) : void 0;
  return n.withQuerySpan((o) => o.withCycle((c) => c.mul(s).add(t))).withHapSpan((o) => o.withCycle((c) => c.sub(t).div(s))).splitQueries().setSteps(r);
});
var { zoomArc: xl, zoomarc: Cl } = l(["zoomArc", "zoomarc"], function(t, e) {
  return e.zoom(t.begin, t.end);
});
var Bl = l(
  "bite",
  (t, e, n) => e.fmap((s) => (r) => {
    const o = d(s).div(r).mod(1), c = o.add(d(1).div(r));
    return n.zoom(o, c);
  }).appLeft(t).squeezeJoin(),
  false
);
var Ol = l(
  "linger",
  function(t, e) {
    return t == 0 ? S : t < 0 ? e._zoom(t.add(1), 1)._slow(t) : e._zoom(0, t)._slow(t);
  },
  true,
  true
);
var { segment: zl, seg: El } = l(["segment", "seg"], function(t, e) {
  return e.struct(P2(true)._fast(t)).setSteps(t);
});
var Ml = l("swingBy", (t, e, n) => n.inside(e, hn(fn(0, t / 2))));
var Jl = l("swing", (t, e) => e.swingBy(1 / 3, t));
var { invert: jl, inv: Pl } = l(
  ["invert", "inv"],
  function(t) {
    return t.fmap((e) => !e);
  },
  true,
  true
);
var Nl = l("when", function(t, e, n) {
  return t ? e(n) : n;
});
var $l = l("off", function(t, e, n) {
  return B(n, e(n.late(t)));
});
var Rl = l("brak", function(t) {
  return t.when(K(false, true), (e) => N(e, S)._late(0.25));
});
var dn = l(
  "rev",
  function(t) {
    const e = function(n) {
      const s = n.span, r = s.begin.sam(), o = s.begin.nextSam(), c = function(a) {
        const p = a.withTime((y) => r.add(o.sub(y))), m2 = p.begin;
        return p.begin = p.end, p.end = m2, p;
      };
      return t.query(n.setSpan(c(s))).map((a) => a.withSpan(c));
    };
    return new f(e).splitQueries();
  },
  false,
  true
);
var Wl = l("pressBy", function(t, e) {
  return e.fmap((n) => P2(n).compress(t, 1)).squeezeJoin();
});
var Ll = l("press", function(t) {
  return t._pressBy(0.5);
});
f.prototype.hush = function() {
  return S;
};
var Il = l(
  "palindrome",
  function(t) {
    return t.lastOf(2, dn);
  },
  true,
  true
);
var { juxBy: Hl, juxby: Vl } = l(["juxBy", "juxby"], function(t, e, n) {
  t /= 2;
  const s = function(c, u, a) {
    return u in c ? c[u] : a;
  }, r = n.withValue((c) => Object.assign({}, c, { pan: s(c, "pan", 0.5) - t })), o = e(n.withValue((c) => Object.assign({}, c, { pan: s(c, "pan", 0.5) + t })));
  return B(r, o).setSteps(L ? U(r._steps, o._steps) : void 0);
});
var Fl = l("jux", function(t, e) {
  return e._juxBy(1, t, e);
});
var { echoWith: Dl, echowith: Gl, stutWith: Ql, stutwith: Ul } = l(
  ["echoWith", "echowith", "stutWith", "stutwith"],
  function(t, e, n, s) {
    return B(...Vt(0, t - 1).map((r) => n(s.late(d(e).mul(r)), r)));
  }
);
var Kl = l("echo", function(t, e, n, s) {
  return s._echoWith(t, e, (r, o) => r.gain(Math.pow(n, o)));
});
var Xl = l("stut", function(t, e, n, s) {
  return s._echoWith(t, n, (r, o) => r.gain(Math.pow(e, o)));
});
var qt = function(t, e, n = false) {
  return t = d(t), K(
    ...Vt(0, t.sub(1)).map(
      (s) => n ? e.late(d(s).div(t)) : e.early(d(s).div(t))
    )
  );
};
var Yl = l(
  "iter",
  function(t, e) {
    return qt(t, e, false);
  },
  true,
  true
);
var { iterBack: Zl, iterback: tp } = l(
  ["iterBack", "iterback"],
  function(t, e) {
    return qt(t, e, true);
  },
  true,
  true
);
var { repeatCycles: ep } = l(
  "repeatCycles",
  function(t, e) {
    return new f(function(n) {
      const s = n.span.begin.sam(), r = s.div(t).sam(), o = s.sub(r);
      return n = n.withSpan((c) => c.withTime((u) => u.sub(o))), e.query(n).map((c) => c.withSpan((u) => u.withTime((a) => a.add(o))));
    }).splitQueries();
  },
  true,
  true
);
var At = function(t, e, n, s = false, r = false) {
  const o = Array(t - 1).fill(false);
  o.unshift(true);
  const c = qt(t, D(...o), !s);
  return r || (n = n.repeatCycles(t)), n.when(c, e);
};
var { chunk: np, slowchunk: sp, slowChunk: rp } = l(
  ["chunk", "slowchunk", "slowChunk"],
  function(t, e, n) {
    return At(t, e, n, false, false);
  },
  true,
  true
);
var { chunkBack: op, chunkback: ip } = l(
  ["chunkBack", "chunkback"],
  function(t, e, n) {
    return At(t, e, n, true);
  },
  true,
  true
);
var { fastchunk: cp, fastChunk: up } = l(
  ["fastchunk", "fastChunk"],
  function(t, e, n) {
    return At(t, e, n, false, true);
  },
  true,
  true
);
var { chunkinto: ap, chunkInto: lp } = l(["chunkinto", "chunkInto"], function(t, e, n) {
  return n.into(N(true, ...Array(t - 1).fill(false))._iterback(t), e);
});
var { chunkbackinto: pp, chunkBackInto: fp } = l(["chunkbackinto", "chunkBackInto"], function(t, e, n) {
  return n.into(
    N(true, ...Array(t - 1).fill(false))._iter(t)._early(1),
    e
  );
});
var hp = l(
  "bypass",
  function(t, e) {
    return t = !!parseInt(t), t ? S : e;
  },
  true,
  true
);
var { ribbon: dp, rib: mp } = l(
  ["ribbon", "rib"],
  (t, e, n) => n.early(t).restart(P2(1).slow(e))
);
var yp = l("hsla", (t, e, n, s, r) => r.color(`hsla(${t}turn,${e * 100}%,${n * 100}%,${s})`));
var gp = l("hsl", (t, e, n, s) => s.color(`hsl(${t}turn,${e * 100}%,${n * 100}%)`));
f.prototype.tag = function(t) {
  return this.withContext((e) => ({ ...e, tags: (e.tags || []).concat([t]) }));
};
var wp = l("filter", (t, e) => e.withHaps((n) => n.filter(t)));
var bp = l("filterWhen", (t, e) => e.filter((n) => t(n.whole.begin)));
var _p = l(
  "within",
  (t, e, n, s) => B(
    n(s.filterWhen((r) => r.cyclePos() >= t && r.cyclePos() <= e)),
    s.filterWhen((r) => r.cyclePos() < t || r.cyclePos() > e)
  )
);
f.prototype.stepJoin = function() {
  const t = this, e = j(...Nt($t(t.queryArc(0, 1))))._steps, n = function(s) {
    const o = t.early(s.span.begin.sam()).query(s.setSpan(new C(d(0), d(1))));
    return j(...Nt($t(o))).query(s);
  };
  return new f(n, e);
};
f.prototype.stepBind = function(t) {
  return this.fmap(t).stepJoin();
};
function Nt(t) {
  const e = t.filter((o, c) => c.hasSteps).reduce((o, c) => o.add(c), d(0)), n = ot(t.map((o, c) => c._steps)).reduce(
    (o, c) => o.add(c),
    d(0)
  ), s = e.eq(0) ? void 0 : n.div(e);
  function r(o, c) {
    return c._steps === void 0 ? [o.mulmaybe(s), c] : [c._steps, c];
  }
  return t.map((o) => r(...o));
}
function $t(t) {
  const e = F(t.map((r) => [r.part.begin, r.part.end])), n = De([d(0), d(1), ...e]);
  return $e(n).map((r) => [
    r[1].sub(r[0]),
    B(...mn(new C(...r), t).map((o) => o.value.withHap((c) => c.setContext(c.combineContext(o)))))
  ]);
}
function mn(t, e) {
  return ot(e.map((n) => yn(t, n)));
}
function yn(t, e) {
  const n = t.intersection(e.part);
  if (n != null)
    return new x(e.whole, n, e.value, e.context);
}
var gn = l("pace", function(t, e) {
  return e._steps === void 0 ? e : e._steps.eq(d(0)) ? R : e._fast(d(t).div(e._steps)).setSteps(t);
});
function wn(t, ...e) {
  const n = e.map((r) => wt(r));
  if (n.length == 0)
    return S;
  t == 0 && (t = n[0][1]);
  const s = [];
  for (const r of n)
    r[1] != 0 && (t == r[1] ? s.push(r[0]) : s.push(r[0]._fast(d(t).div(d(r[1])))));
  return B(...s);
}
function St(...t) {
  if (Array.isArray(t[0]))
    return wn(0, ...t);
  if (t = t.filter((s) => s.hasSteps), t.length == 0)
    return S;
  const e = U(...t.map((s) => s._steps));
  if (e.eq(d(0)))
    return R;
  const n = B(...t.map((s) => s.pace(e)));
  return n._steps = e, n;
}
function j(...t) {
  if (t.length === 0)
    return R;
  const e = (c) => Array.isArray(c) ? c : [c._steps ?? 1, c];
  if (t = t.map(e), t.find((c) => c[0] === void 0)) {
    const c = t.map((a) => a[0]).filter((a) => a !== void 0);
    if (c.length === 0)
      return N(...t.map((a) => a[1]));
    if (c.length === t.length)
      return R;
    const u = c.reduce((a, p) => a.add(p), d(0)).div(c.length);
    for (let a of t)
      a[0] === void 0 && (a[0] = u);
  }
  if (t.length == 1)
    return h(t[0][1]).withSteps((u) => t[0][0]);
  const n = t.map((c) => c[0]).reduce((c, u) => c.add(u), d(0));
  let s = d(0);
  const r = [];
  for (const [c, u] of t) {
    if (d(c).eq(0))
      continue;
    const a = s.add(c);
    r.push(h(u)._compress(s.div(n), a.div(n))), s = a;
  }
  const o = B(...r);
  return o._steps = n, o;
}
function bn(...t) {
  t = t.map((r) => Array.isArray(r) ? r.map(h) : [h(r)]);
  const e = U(...t.map((r) => d(r.length)));
  let n = [];
  for (let r = 0; r < e; ++r)
    n.push(...t.map((o) => o.length == 0 ? S : o[r % o.length]));
  n = n.filter((r) => r.hasSteps && r._steps > 0);
  const s = n.reduce((r, o) => r.add(o._steps), d(0));
  return n = j(...n), n._steps = s, n;
}
var _n = ct("take", function(t, e) {
  if (!e.hasSteps || e._steps.lte(0) || (t = d(t), t.eq(0)))
    return R;
  const n = t < 0;
  n && (t = t.abs());
  const s = t.div(e._steps);
  return s.lte(0) ? R : s.gte(1) ? e : n ? e.zoom(d(1).sub(s), 1) : e.zoom(0, s);
});
var vn = ct("drop", function(t, e) {
  return e.hasSteps ? (t = d(t), t.lt(0) ? e.take(e._steps.add(t)) : e.take(d(0).sub(e._steps.sub(t)))) : R;
});
var kn = ct("extend", function(t, e) {
  return e.fast(t).expand(t);
});
var qn = ct("expand", function(t, e) {
  return e.withSteps((n) => n.mul(d(t)));
});
var An = ct("contract", function(t, e) {
  return e.withSteps((n) => n.div(d(t)));
});
f.prototype.shrinklist = function(t) {
  const e = this;
  if (!e.hasSteps)
    return [e];
  let [n, s] = Array.isArray(t) ? t : [t, e._steps];
  if (n = d(n), s === 0 || n === 0)
    return [e];
  const r = n > 0, o = [];
  if (r) {
    const c = d(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = c.mul(u);
      if (a.gt(1))
        break;
      o.push([a, 1]);
    }
  } else {
    n = d(0).sub(n);
    const c = d(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = d(1).sub(c.mul(u));
      if (a.lt(0))
        break;
      o.push([d(0), a]);
    }
  }
  return o.map((c) => e.zoom(...c));
};
var Sn = (t, e) => e.shrinklist(t);
var Tn = l(
  "shrink",
  function(t, e) {
    if (!e.hasSteps)
      return R;
    const n = e.shrinklist(t), s = j(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), d(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var vp = l(
  "grow",
  function(t, e) {
    if (!e.hasSteps)
      return R;
    const n = e.shrinklist(d(0).sub(t));
    n.reverse();
    const s = j(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), d(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var xn = function(t, ...e) {
  return t.tour(...e);
};
f.prototype.tour = function(...t) {
  return j(
    ...[].concat(
      ...t.map((e, n) => [...t.slice(0, t.length - n), this, ...t.slice(t.length - n)]),
      this,
      ...t
    )
  );
};
var Cn = function(...t) {
  t = t.filter((s) => s.hasSteps);
  const e = K(...t.map((s) => s._slow(s._steps))), n = U(...t.map((s) => s._steps));
  return e._fast(n).setSteps(n);
};
var kp = j;
var Bn = j;
var qp = j;
var Ap = bn;
var Sp = St;
f.prototype.s_polymeter = f.prototype.polymeter;
var Tp = Tn;
f.prototype.s_taper = f.prototype.shrink;
var xp = Sn;
f.prototype.s_taperlist = f.prototype.shrinklist;
var Cp = _n;
f.prototype.s_add = f.prototype.take;
var Bp = vn;
f.prototype.s_sub = f.prototype.drop;
var Op = qn;
f.prototype.s_expand = f.prototype.expand;
var zp = kn;
f.prototype.s_extend = f.prototype.extend;
var Ep = An;
f.prototype.s_contract = f.prototype.contract;
var Mp = xn;
f.prototype.s_tour = f.prototype.tour;
var Jp = Cn;
f.prototype.s_zip = f.prototype.zip;
var jp = gn;
f.prototype.steps = f.prototype.pace;
var Pp = l("chop", function(t, e) {
  const s = Array.from({ length: t }, (c, u) => u).map((c) => ({ begin: c / t, end: (c + 1) / t })), r = function(c, u) {
    if ("begin" in c && "end" in c && c.begin !== void 0 && c.end !== void 0) {
      const a = c.end - c.begin;
      u = { begin: c.begin + u.begin * a, end: c.begin + u.end * a };
    }
    return Object.assign({}, c, u);
  }, o = function(c) {
    return D(s.map((u) => r(c, u)));
  };
  return e.squeezeBind(o).setSteps(L ? d(t).mulmaybe(e._steps) : void 0);
});
var Np = l("striate", function(t, e) {
  const s = Array.from({ length: t }, (o, c) => c).map((o) => ({ begin: o / t, end: (o + 1) / t })), r = K(...s);
  return e.set(r)._fast(t).setSteps(L ? d(t).mulmaybe(e._steps) : void 0);
});
var Xt = function(t, e, n = 0.5) {
  return e.speed(1 / t * n).unit("c").slow(t);
};
var On = l(
  "slice",
  function(t, e, n) {
    return t.innerBind(
      (s) => e.outerBind(
        (r) => n.outerBind((o) => {
          o = o instanceof Object ? o : { s: o };
          const c = Array.isArray(s) ? s[r] : r / s, u = Array.isArray(s) ? s[r + 1] : (r + 1) / s;
          return P2({ begin: c, end: u, _slices: s, ...o });
        })
      )
    ).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
f.prototype.onTriggerTime = function(t) {
  return this.onTrigger((e, n, s, r) => {
    const o = r - n;
    window.setTimeout(() => {
      t(e);
    }, o * 1e3);
  }, false);
};
var $p = l(
  "splice",
  function(t, e, n) {
    const s = On(t, e, n);
    return new f((r) => {
      const o = r.controls._cps || 1;
      return s.query(r).map(
        (u) => u.withValue((a) => ({
          speed: o / a._slices / u.whole.duration * (a.speed || 1),
          unit: "c",
          ...a
        }))
      );
    }).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
var { loopAt: Rp, loopat: Wp } = l(["loopAt", "loopat"], function(t, e) {
  const n = e._steps ? e._steps.div(t) : void 0;
  return new f((s) => Xt(t, e, s.controls._cps).query(s), n);
});
var Lp = l(
  "fit",
  (t) => t.withHaps(
    (e, n) => e.map(
      (s) => s.withValue((r) => {
        const o = ("end" in r ? r.end : 1) - ("begin" in r ? r.begin : 0);
        return {
          ...r,
          speed: (n.controls._cps || 1) / s.whole.duration * o,
          unit: "c"
        };
      })
    )
  )
);
var { loopAtCps: Ip, loopatcps: Hp } = l(["loopAtCps", "loopatcps"], function(t, e, n) {
  return Xt(t, n, e);
});
var Vp = (t) => P2(1).withValue(() => h(t())).innerJoin();
var Rt = (t) => t < 0.5 ? 1 : 1 - (t - 0.5) / 0.5;
var zn = (t, e, n) => {
  e = h(e), t = h(t), n = h(n);
  let s = e.fmap((o) => ({ gain: Rt(o) })), r = e.fmap((o) => ({ gain: Rt(1 - o) }));
  return B(t.mul(s), n.mul(r));
};
f.prototype.xfade = function(t, e) {
  return zn(this, t, e);
};
var En = (t) => (e, n, s) => {
  e = d(e).mod(n), n = d(n);
  const r = e.div(n), o = e.add(1).div(n);
  return t(s.fmap((c) => P2(c)._compress(r, o)));
};
var { beat: Fp } = l(
  ["beat"],
  En((t) => t.innerJoin())
);
var Yt = (t, e, n) => {
  n = d(n);
  const s = d(1).div(t.length), r = (u) => {
    const a = [];
    for (const [p, m2] of u.entries())
      m2 && a.push([d(p).div(u.length), m2]);
    return a;
  }, o = vt(
    ([u, a], [p, m2]) => {
      const y = n.mul(p - u).add(u), b = y.add(s);
      return new C(y, b);
    },
    r(t),
    r(e)
  );
  function c(u) {
    const a = u.span.begin.sam(), p = u.span.cycleArc(), m2 = [];
    for (const y of o) {
      const b = y.intersection(p);
      b !== void 0 && m2.push(
        new x(
          y.withTime((w2) => w2.add(a)),
          b.withTime((w2) => w2.add(a)),
          true
        )
      );
    }
    return m2;
  }
  return new f(c).splitQueries();
};
var Dp = (t, e, n) => (t = h(t), e = h(e), n = h(n), t.innerBind((s) => e.innerBind((r) => n.innerBind((o) => Yt(s, r, o)))));
function Tt(t) {
  let e = Array.isArray(t);
  t = e ? t : [t];
  const n = t[0], s = (o) => {
    let c;
    if (typeof o == "object" && o.value !== void 0 && (c = { ...o }, o = o.value, delete c.value), e && Array.isArray(o)) {
      const u = c || {};
      return o.forEach((a, p) => {
        p < t.length && (u[t[p]] = a);
      }), u;
    } else return c ? (c[n] = o, c) : { [n]: o };
  }, r = function(o, c) {
    return c ? typeof o > "u" ? c.fmap(s) : c.set(h(o).withValue(s)) : h(o).withValue(s);
  };
  return f.prototype[n] = function(o) {
    return r(o, this);
  }, r;
}
var st = /* @__PURE__ */ new Map();
function Mn(t) {
  return st.has(t);
}
function i(t, ...e) {
  const n = Array.isArray(t) ? t[0] : t;
  let s = {};
  return s[n] = Tt(t), st.set(n, n), e.forEach((r) => {
    s[r] = s[n], st.set(r, n), f.prototype[r] = f.prototype[n];
  }), s;
}
var { s: Jn, sound: jn } = i(["s", "n", "gain"], "sound");
var { source: Pn, src: Nn } = i("source", "src");
var { n: $n } = i("n");
var { note: Rn } = i(["note", "n"]);
var { accelerate: Wn } = i("accelerate");
var { velocity: Ln } = i("velocity");
var { gain: In } = i("gain");
var { postgain: Hn } = i("postgain");
var { amp: Vn } = i("amp");
var { attack: Fn, att: Dn } = i("attack", "att");
var { fmh: Gn } = i(["fmh", "fmi"], "fmh");
var { fmi: Qn, fm: Un } = i(["fmi", "fmh"], "fm");
var { fmenv: Kn } = i("fmenv");
var { fmattack: Xn } = i("fmattack");
var { fmwave: Yn } = i("fmwave");
var { fmdecay: Zn } = i("fmdecay");
var { fmsustain: ts } = i("fmsustain");
var { fmrelease: es } = i("fmrelease");
var { fmvelocity: ns } = i("fmvelocity");
var { bank: ss } = i("bank");
var { analyze: rs } = i("analyze");
var { fft: os } = i("fft");
var { decay: is, dec: cs } = i("decay", "dec");
var { sustain: us, sus: as } = i("sustain", "sus");
var { release: ls, rel: ps } = i("release", "rel");
var { hold: fs } = i("hold");
var { bandf: hs, bpf: ds, bp: ms } = i(["bandf", "bandq", "bpenv"], "bpf", "bp");
var { bandq: ys, bpq: gs } = i("bandq", "bpq");
var { begin: ws } = i("begin");
var { end: bs } = i("end");
var { loop: _s } = i("loop");
var { loopBegin: vs, loopb: ks } = i("loopBegin", "loopb");
var { loopEnd: qs, loope: As } = i("loopEnd", "loope");
var { crush: Ss } = i("crush");
var { coarse: Ts } = i("coarse");
var { tremolo: xs } = i(["tremolo", "tremolodepth", "tremoloskew", "tremolophase"], "trem");
var { tremolosync: Cs } = i(
  ["tremolosync", "tremolodepth", "tremoloskew", "tremolophase"],
  "tremsync"
);
var { tremolodepth: Bs } = i("tremolodepth", "tremdepth");
var { tremoloskew: Os } = i("tremoloskew", "tremskew");
var { tremolophase: zs } = i("tremolophase", "tremphase");
var { tremoloshape: Es } = i("tremoloshape", "tremshape");
var { duck: Ms } = i("duckorbit", "duck");
var { duckdepth: Js } = i("duckdepth");
var { duckattack: js } = i("duckattack", "duckatt");
var { drive: Ps } = i("drive");
var { byteBeatExpression: Ns, bbexpr: $s } = i("byteBeatExpression", "bbexpr");
var { byteBeatStartTime: Rs, bbst: Ws } = i("byteBeatStartTime", "bbst");
var { channels: Ls, ch: Is } = i("channels", "ch");
var { pw: Hs } = i(["pw", "pwrate", "pwsweep"]);
var { pwrate: Vs } = i("pwrate");
var { pwsweep: Fs } = i("pwsweep");
var { phaserrate: Ds, ph: Gs, phaser: Qs } = i(
  ["phaserrate", "phaserdepth", "phasercenter", "phasersweep"],
  "ph",
  "phaser"
);
var { phasersweep: Us, phs: Ks } = i("phasersweep", "phs");
var { phasercenter: Xs, phc: Ys } = i("phasercenter", "phc");
var { phaserdepth: Zs, phd: tr, phasdp: er } = i("phaserdepth", "phd", "phasdp");
var { channel: nr } = i("channel");
var { cut: sr } = i("cut");
var { cutoff: rr, ctf: or, lpf: ir, lp: cr } = i(["cutoff", "resonance", "lpenv"], "ctf", "lpf", "lp");
var { lpenv: ur, lpe: ar } = i("lpenv", "lpe");
var { hpenv: lr, hpe: pr } = i("hpenv", "hpe");
var { bpenv: fr, bpe: hr } = i("bpenv", "bpe");
var { lpattack: dr, lpa: mr } = i("lpattack", "lpa");
var { hpattack: yr, hpa: gr } = i("hpattack", "hpa");
var { bpattack: wr, bpa: br } = i("bpattack", "bpa");
var { lpdecay: _r, lpd: vr } = i("lpdecay", "lpd");
var { hpdecay: kr, hpd: qr } = i("hpdecay", "hpd");
var { bpdecay: Ar, bpd: Sr } = i("bpdecay", "bpd");
var { lpsustain: Tr, lps: xr } = i("lpsustain", "lps");
var { hpsustain: Cr, hps: Br } = i("hpsustain", "hps");
var { bpsustain: Or, bps: zr } = i("bpsustain", "bps");
var { lprelease: Er, lpr: Mr } = i("lprelease", "lpr");
var { hprelease: Jr, hpr: jr } = i("hprelease", "hpr");
var { bprelease: Pr, bpr: Nr } = i("bprelease", "bpr");
var { ftype: $r } = i("ftype");
var { fanchor: Rr } = i("fanchor");
var { vib: Wr, vibrato: Lr, v: Ir } = i(["vib", "vibmod"], "vibrato", "v");
var { noise: Hr } = i("noise");
var { vibmod: Vr, vmod: Fr } = i(["vibmod", "vib"], "vmod");
var { hcutoff: Dr, hpf: Gr, hp: Qr } = i(["hcutoff", "hresonance", "hpenv"], "hpf", "hp");
var { hresonance: Ur, hpq: Kr } = i("hresonance", "hpq");
var { resonance: Xr, lpq: Yr } = i("resonance", "lpq");
var { djf: Zr } = i("djf");
var { delay: to } = i(["delay", "delaytime", "delayfeedback"]);
var { delayfeedback: eo, delayfb: no, dfb: so } = i("delayfeedback", "delayfb", "dfb");
var { delaytime: ro, delayt: oo, dt: io } = i("delaytime", "delayt", "dt");
var { delaysync: co } = i("delaysync");
var { lock: uo } = i("lock");
var { detune: ao, det: lo } = i("detune", "det");
var { unison: po } = i("unison");
var { spread: fo } = i("spread");
var { dry: ho } = i("dry");
var { fadeTime: mo, fadeOutTime: yo } = i("fadeTime", "fadeOutTime");
var { fadeInTime: go } = i("fadeInTime");
var { freq: wo } = i("freq");
var { pattack: bo, patt: _o } = i("pattack", "patt");
var { pdecay: vo, pdec: ko } = i("pdecay", "pdec");
var { psustain: qo, psus: Ao } = i("psustain", "psus");
var { prelease: So, prel: To } = i("prelease", "prel");
var { penv: xo } = i("penv");
var { pcurve: Co } = i("pcurve");
var { panchor: Bo } = i("panchor");
var { gate: Oo, gat: zo } = i("gate", "gat");
var { leslie: Eo } = i("leslie");
var { lrate: Mo } = i("lrate");
var { lsize: Jo } = i("lsize");
var { activeLabel: jo } = i("activeLabel");
var { label: Po } = i(["label", "activeLabel"]);
var { degree: No } = i("degree");
var { mtranspose: $o } = i("mtranspose");
var { ctranspose: Ro } = i("ctranspose");
var { harmonic: Wo } = i("harmonic");
var { stepsPerOctave: Lo } = i("stepsPerOctave");
var { octaveR: Io } = i("octaveR");
var { nudge: Ho } = i("nudge");
var { octave: Vo } = i("octave");
var { orbit: Fo } = i("orbit");
var { overgain: Do } = i("overgain");
var { overshape: Go } = i("overshape");
var { pan: Qo } = i("pan");
var { panspan: Uo } = i("panspan");
var { pansplay: Ko } = i("pansplay");
var { panwidth: Xo } = i("panwidth");
var { panorient: Yo } = i("panorient");
var { rate: Zo } = i("rate");
var { slide: ti } = i("slide");
var { semitone: ei } = i("semitone");
var { voice: ni } = i("voice");
var { chord: si } = i("chord");
var { dictionary: ri, dict: oi } = i("dictionary", "dict");
var { anchor: ii } = i("anchor");
var { offset: ci } = i("offset");
var { octaves: ui } = i("octaves");
var { mode: ai } = i(["mode", "anchor"]);
var { room: li } = i(["room", "size"]);
var { roomlp: pi, rlp: fi } = i("roomlp", "rlp");
var { roomdim: hi, rdim: di } = i("roomdim", "rdim");
var { roomfade: mi, rfade: yi } = i("roomfade", "rfade");
var { ir: gi, iresponse: wi } = i(["ir", "i"], "iresponse");
var { irspeed: bi } = i("irspeed");
var { irbegin: _i } = i("irbegin");
var { roomsize: vi, size: ki, sz: qi, rsize: Ai } = i("roomsize", "size", "sz", "rsize");
var { shape: Si } = i(["shape", "shapevol"]);
var { distort: Ti, dist: xi } = i(["distort", "distortvol"], "dist");
var { compressor: Ci } = i([
  "compressor",
  "compressorRatio",
  "compressorKnee",
  "compressorAttack",
  "compressorRelease"
]);
var { compressorKnee: Bi } = i("compressorKnee");
var { compressorRatio: Oi } = i("compressorRatio");
var { compressorAttack: zi } = i("compressorAttack");
var { compressorRelease: Ei } = i("compressorRelease");
var { speed: Zt } = i("speed");
var { stretch: Mi } = i("stretch");
var { unit: Ji } = i("unit");
var { squiz: ji } = i("squiz");
var { vowel: Pi } = i("vowel");
var { waveloss: Ni } = i("waveloss");
var { density: $i } = i("density");
var { expression: Ri } = i("expression");
var { sustainpedal: Wi } = i("sustainpedal");
var { fshift: Li } = i("fshift");
var { fshiftnote: Ii } = i("fshiftnote");
var { fshiftphase: Hi } = i("fshiftphase");
var { triode: Vi } = i("triode");
var { krush: Fi } = i("krush");
var { kcutoff: Di } = i("kcutoff");
var { octer: Gi } = i("octer");
var { octersub: Qi } = i("octersub");
var { octersubsub: Ui } = i("octersubsub");
var { ring: Ki } = i("ring");
var { ringf: Xi } = i("ringf");
var { ringdf: Yi } = i("ringdf");
var { freeze: Zi } = i("freeze");
var { xsdelay: tc } = i("xsdelay");
var { tsdelay: ec } = i("tsdelay");
var { real: nc } = i("real");
var { imag: sc } = i("imag");
var { enhance: rc } = i("enhance");
var { partials: oc } = i("partials");
var { comb: ic } = i("comb");
var { smear: cc } = i("smear");
var { scram: uc } = i("scram");
var { binshift: ac } = i("binshift");
var { hbrick: lc } = i("hbrick");
var { lbrick: pc } = i("lbrick");
var { frameRate: fc } = i("frameRate");
var { frames: hc } = i("frames");
var { hours: dc } = i("hours");
var { minutes: mc } = i("minutes");
var { seconds: yc } = i("seconds");
var { songPtr: gc } = i("songPtr");
var { uid: wc } = i("uid");
var { val: bc } = i("val");
var { cps: _c } = i("cps");
var { clip: vc, legato: kc } = i("clip", "legato");
var { duration: qc, dur: Ac } = i("duration", "dur");
var { zrand: Sc } = i("zrand");
var { curve: Tc } = i("curve");
var { deltaSlide: xc } = i("deltaSlide");
var { pitchJump: Cc } = i("pitchJump");
var { pitchJumpTime: Bc } = i("pitchJumpTime");
var { lfo: Oc, repeatTime: zc } = i("lfo", "repeatTime");
var { znoise: Ec } = i("znoise");
var { zmod: Mc } = i("zmod");
var { zcrush: Jc } = i("zcrush");
var { zdelay: jc } = i("zdelay");
var { zzfx: Pc } = i("zzfx");
var { color: Nc, colour: $c } = i(["color", "colour"]);
var Rc = (...t) => t.reduce((e, n) => Object.assign(e, { [n]: Tt(n) }), {});
var Wc = l("adsr", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s, r, o] = t;
  return e.set({ attack: n, decay: s, sustain: r, release: o });
});
var Lc = l("ad", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.attack(n).decay(s);
});
var Ic = l("ds", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = 0] = t;
  return e.set({ decay: n, sustain: s });
});
var Hc = l("ar", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.set({ attack: n, release: s });
});
var { midichan: Vc } = i("midichan");
var { midimap: Fc } = i("midimap");
var { midiport: Dc } = i("midiport");
var { midicmd: Gc } = i("midicmd");
var Qc = l("control", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("control expects an array of [ccn, ccv]");
  const [n, s] = t;
  return e.ccn(n).ccv(s);
});
var { ccn: Uc } = i("ccn");
var { ccv: Kc } = i("ccv");
var { ctlNum: Xc } = i("ctlNum");
var { nrpnn: Yc } = i("nrpnn");
var { nrpv: Zc } = i("nrpv");
var { progNum: tu } = i("progNum");
var eu = l("sysex", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("sysex expects an array of [id, data]");
  const [n, s] = t;
  return e.sysexid(n).sysexdata(s);
});
var { sysexid: nu } = i("sysexid");
var { sysexdata: su } = i("sysexdata");
var { midibend: ru } = i("midibend");
var { miditouch: ou } = i("miditouch");
var { polyTouch: iu } = i("polyTouch");
var te = (t) => st.has(t) ? st.get(t) : t;
var cu = l("as", (t, e) => (t = Array.isArray(t) ? t : [t], e.fmap((n) => (n = Array.isArray(n) ? n : [n], n = Object.fromEntries(t.map((s, r) => [te(s), n[r]])), n))));
var uu = l(
  "scrub",
  (t, e) => t.outerBind((n) => {
    Array.isArray(n) || (n = [n]);
    const [s, r = 1] = n;
    return e.begin(s).mul(Zt(r)).clip(1);
  }),
  false
);
var Gp = Object.freeze(Object.defineProperty({
  __proto__: null,
  accelerate: Wn,
  activeLabel: jo,
  ad: Lc,
  adsr: Wc,
  amp: Vn,
  analyze: rs,
  anchor: ii,
  ar: Hc,
  as: cu,
  att: Dn,
  attack: Fn,
  bandf: hs,
  bandq: ys,
  bank: ss,
  bbexpr: $s,
  bbst: Ws,
  begin: ws,
  binshift: ac,
  bp: ms,
  bpa: br,
  bpattack: wr,
  bpd: Sr,
  bpdecay: Ar,
  bpe: hr,
  bpenv: fr,
  bpf: ds,
  bpq: gs,
  bpr: Nr,
  bprelease: Pr,
  bps: zr,
  bpsustain: Or,
  byteBeatExpression: Ns,
  byteBeatStartTime: Rs,
  ccn: Uc,
  ccv: Kc,
  ch: Is,
  channel: nr,
  channels: Ls,
  chord: si,
  clip: vc,
  coarse: Ts,
  color: Nc,
  colour: $c,
  comb: ic,
  compressor: Ci,
  compressorAttack: zi,
  compressorKnee: Bi,
  compressorRatio: Oi,
  compressorRelease: Ei,
  control: Qc,
  cps: _c,
  createParam: Tt,
  createParams: Rc,
  crush: Ss,
  ctf: or,
  ctlNum: Xc,
  ctranspose: Ro,
  curve: Tc,
  cut: sr,
  cutoff: rr,
  dec: cs,
  decay: is,
  degree: No,
  delay: to,
  delayfb: no,
  delayfeedback: eo,
  delaysync: co,
  delayt: oo,
  delaytime: ro,
  deltaSlide: xc,
  density: $i,
  det: lo,
  detune: ao,
  dfb: so,
  dict: oi,
  dictionary: ri,
  dist: xi,
  distort: Ti,
  djf: Zr,
  drive: Ps,
  dry: ho,
  ds: Ic,
  dt: io,
  duck: Ms,
  duckattack: js,
  duckdepth: Js,
  dur: Ac,
  duration: qc,
  end: bs,
  enhance: rc,
  expression: Ri,
  fadeInTime: go,
  fadeOutTime: yo,
  fadeTime: mo,
  fanchor: Rr,
  fft: os,
  fm: Un,
  fmattack: Xn,
  fmdecay: Zn,
  fmenv: Kn,
  fmh: Gn,
  fmi: Qn,
  fmrelease: es,
  fmsustain: ts,
  fmvelocity: ns,
  fmwave: Yn,
  frameRate: fc,
  frames: hc,
  freeze: Zi,
  freq: wo,
  fshift: Li,
  fshiftnote: Ii,
  fshiftphase: Hi,
  ftype: $r,
  gain: In,
  gat: zo,
  gate: Oo,
  getControlName: te,
  harmonic: Wo,
  hbrick: lc,
  hcutoff: Dr,
  hold: fs,
  hours: dc,
  hp: Qr,
  hpa: gr,
  hpattack: yr,
  hpd: qr,
  hpdecay: kr,
  hpe: pr,
  hpenv: lr,
  hpf: Gr,
  hpq: Kr,
  hpr: jr,
  hprelease: Jr,
  hps: Br,
  hpsustain: Cr,
  hresonance: Ur,
  imag: sc,
  ir: gi,
  irbegin: _i,
  iresponse: wi,
  irspeed: bi,
  isControlName: Mn,
  kcutoff: Di,
  krush: Fi,
  label: Po,
  lbrick: pc,
  legato: kc,
  leslie: Eo,
  lfo: Oc,
  lock: uo,
  loop: _s,
  loopBegin: vs,
  loopEnd: qs,
  loopb: ks,
  loope: As,
  lp: cr,
  lpa: mr,
  lpattack: dr,
  lpd: vr,
  lpdecay: _r,
  lpe: ar,
  lpenv: ur,
  lpf: ir,
  lpq: Yr,
  lpr: Mr,
  lprelease: Er,
  lps: xr,
  lpsustain: Tr,
  lrate: Mo,
  lsize: Jo,
  midibend: ru,
  midichan: Vc,
  midicmd: Gc,
  midimap: Fc,
  midiport: Dc,
  miditouch: ou,
  minutes: mc,
  mode: ai,
  mtranspose: $o,
  n: $n,
  noise: Hr,
  note: Rn,
  nrpnn: Yc,
  nrpv: Zc,
  nudge: Ho,
  octave: Vo,
  octaveR: Io,
  octaves: ui,
  octer: Gi,
  octersub: Qi,
  octersubsub: Ui,
  offset: ci,
  orbit: Fo,
  overgain: Do,
  overshape: Go,
  pan: Qo,
  panchor: Bo,
  panorient: Yo,
  panspan: Uo,
  pansplay: Ko,
  panwidth: Xo,
  partials: oc,
  patt: _o,
  pattack: bo,
  pcurve: Co,
  pdec: ko,
  pdecay: vo,
  penv: xo,
  ph: Gs,
  phasdp: er,
  phaser: Qs,
  phasercenter: Xs,
  phaserdepth: Zs,
  phaserrate: Ds,
  phasersweep: Us,
  phc: Ys,
  phd: tr,
  phs: Ks,
  pitchJump: Cc,
  pitchJumpTime: Bc,
  polyTouch: iu,
  postgain: Hn,
  prel: To,
  prelease: So,
  progNum: tu,
  psus: Ao,
  psustain: qo,
  pw: Hs,
  pwrate: Vs,
  pwsweep: Fs,
  rate: Zo,
  rdim: di,
  real: nc,
  registerControl: i,
  rel: ps,
  release: ls,
  repeatTime: zc,
  resonance: Xr,
  rfade: yi,
  ring: Ki,
  ringdf: Yi,
  ringf: Xi,
  rlp: fi,
  room: li,
  roomdim: hi,
  roomfade: mi,
  roomlp: pi,
  roomsize: vi,
  rsize: Ai,
  s: Jn,
  scram: uc,
  scrub: uu,
  seconds: yc,
  semitone: ei,
  shape: Si,
  size: ki,
  slide: ti,
  smear: cc,
  songPtr: gc,
  sound: jn,
  source: Pn,
  speed: Zt,
  spread: fo,
  squiz: ji,
  src: Nn,
  stepsPerOctave: Lo,
  stretch: Mi,
  sus: as,
  sustain: us,
  sustainpedal: Wi,
  sysex: eu,
  sysexdata: su,
  sysexid: nu,
  sz: qi,
  tremolo: xs,
  tremolodepth: Bs,
  tremolophase: zs,
  tremoloshape: Es,
  tremoloskew: Os,
  tremolosync: Cs,
  triode: Vi,
  tsdelay: ec,
  uid: wc,
  unison: po,
  unit: Ji,
  v: Ir,
  val: bc,
  velocity: Ln,
  vib: Wr,
  vibmod: Vr,
  vibrato: Lr,
  vmod: Fr,
  voice: ni,
  vowel: Pi,
  waveloss: Ni,
  xsdelay: tc,
  zcrush: Jc,
  zdelay: jc,
  zmod: Mc,
  znoise: Ec,
  zrand: Sc,
  zzfx: Pc
}, Symbol.toStringTag, { value: "Module" }));
var au = function(t, e) {
  const [n, s] = t, [r, o] = e, [c, u] = Gt(s, r);
  return [
    [s, n - s],
    [vt((a, p) => a.concat(p), c, o), u]
  ];
};
var lu = function(t, e) {
  const [n, s] = t, [r, o] = e, [c, u] = Gt(n, o);
  return [
    [n, s - n],
    [vt((p, m2) => p.concat(m2), r, c), u]
  ];
};
var ee = function(t, e) {
  const [n, s] = t;
  return Math.min(n, s) <= 1 ? [t, e] : ee(...n > s ? au(t, e) : lu(t, e));
};
var ne = function(t, e) {
  const n = t < 0, s = Math.abs(t), r = e - s, o = Array(s).fill([1]), c = Array(r).fill([0]), u = ee([s, r], [o, c]), a = F(u[1][0]).concat(F(u[1][1]));
  return n ? a.map((p) => 1 - p) : a;
};
var ft = function(t, e, n) {
  const s = ne(t, e);
  return n ? je(s, -n) : s;
};
var Qp = l("euclid", function(t, e, n) {
  return n.struct(ft(t, e, 0));
});
var Up = l("e", function(t, e) {
  Array.isArray(t) || (t = [t]);
  const [n, s = n, r = 0] = t;
  return e.struct(ft(n, s, r));
});
var { euclidrot: Kp, euclidRot: Xp } = l(["euclidrot", "euclidRot"], function(t, e, n, s) {
  return s.struct(ft(t, e, n));
});
var se = function(t, e, n, s) {
  if (t < 1)
    return S;
  const o = ft(t, e, 0).join("").split("1").slice(1).map((c) => [c.length + 1, true]);
  return s.struct(Bn(...o)).late(d(n).div(e));
};
var Yp = l(["euclidLegato"], function(t, e, n) {
  return se(t, e, 0, n);
});
var Zp = l(["euclidLegatoRot"], function(t, e, n, s) {
  return se(t, e, n, s);
});
var { euclidish: tf, eish: ef } = l(["euclidish", "eish"], function(t, e, n, s) {
  const r = Yt(ne(t, e), new Array(t).fill(1), n);
  return s.struct(r).setSteps(e);
});
function pu(t, e, n = 0.05, s = 0.1, r = 0.1, o = globalThis.setInterval, c = globalThis.clearInterval, u = true) {
  let a = 0, p = 0, m2 = 10 ** 4, y = 0.01;
  const b = (J3) => n = J3(n);
  r = r || s / 2;
  const w2 = () => {
    const J3 = t(), G3 = J3 + s + r;
    for (p === 0 && (p = J3 + y); p < G3; )
      p = u ? Math.round(p * m2) / m2 : p, e(p, n, a, J3), p += n, a++;
  };
  let v;
  const k = () => {
    E(), w2(), v = o(w2, s * 1e3);
  }, E = () => {
    v !== void 0 && c(v), v = void 0;
  };
  return { setDuration: b, start: k, stop: () => {
    a = 0, p = 0, E();
  }, pause: () => E(), duration: n, interval: s, getPhase: () => p, minLatency: y };
}
function nf(t) {
  return new f((e) => [new x(void 0, e.span, t)]);
}
var I = (t) => {
  const e = (n) => [new x(void 0, n.span, t(n.span.begin))];
  return new f(e);
};
var ht = I((t) => t % 1);
var re = ht.toBipolar();
var xt = I((t) => 1 - t % 1);
var oe = xt.toBipolar();
var ie = I((t) => Math.sin(Math.PI * 2 * t));
var fu = ie.fromBipolar();
var sf = fu._early(d(1).div(4));
var rf = ie._early(d(1).div(4));
var hu = I((t) => Math.floor(t * 2 % 2));
var of = hu.toBipolar();
var cf = N(ht, xt);
var uf = N(re, oe);
var af = N(xt, ht);
var lf = N(oe, re);
var ce = I(tt);
var Ct = 0;
var Bt = 0;
typeof window < "u" && document.addEventListener("mousemove", (t) => {
  Ct = t.clientY / document.body.clientHeight, Bt = t.clientX / document.body.clientWidth;
});
var pf = I(() => Ct);
var ff = I(() => Ct);
var hf = I(() => Bt);
var df = I(() => Bt);
var ue = (t) => {
  const e = t << 13 ^ t, n = e >> 17 ^ e;
  return n << 5 ^ n;
};
var du = (t) => t - Math.trunc(t);
var ae = (t) => ue(Math.trunc(du(t / 300) * 536870912));
var le = (t) => t % 536870912 / 536870912;
var rt = (t) => Math.abs(le(ae(t)));
var mu = (t, e) => {
  const n = [];
  for (let s = 0; s < e; ++s)
    n.push(le(t)), t = ue(t);
  return n;
};
var yu = (t, e) => mu(ae(t), e);
var gu = (t) => ht.range(0, t).round().segment(t);
var mf = (t) => {
  const e = h(t).log2(0).floor().add(1);
  return wu(t, e);
};
var wu = (t, e = 16) => {
  e = h(e);
  const n = gu(e).mul(-1).add(e.sub(1));
  return h(t).segment(e).brshift(n).band(P2(1));
};
var bu = (t) => I((e) => {
  const s = yu(e.floor().add(0.5), t).map((o, c) => [o, c]).sort((o, c) => (o[0] > c[0]) - (o[0] < c[0])).map((o) => o[1]), r = e.cyclePos().mul(t).floor() % t;
  return s[r];
})._segment(t);
var pe = (t, e, n) => {
  const s = [...Array(e).keys()].map((r) => n.zoom(d(r).div(e), d(r + 1).div(e)));
  return t.fmap((r) => s[r].repeatCycles(e)._fast(e)).innerJoin();
};
var yf = l("shuffle", (t, e) => pe(bu(t), t, e));
var gf = l("scramble", (t, e) => pe(he(t)._segment(t), t, e));
var W = I(rt);
var wf = W.toBipolar();
var fe = (t) => W.fmap((e) => e < t);
var bf = (t) => h(t).fmap(fe).innerJoin();
var _f = fe(0.5);
var he = (t) => W.fmap((e) => Math.trunc(e * t));
var vf = (t) => h(t).fmap(he).innerJoin();
var de = (t, e) => (e = e.map(h), e.length == 0 ? S : t.range(0, e.length).fmap((n) => {
  const s = Math.min(Math.max(Math.floor(n), 0), e.length - 1);
  return e[s];
}));
var Ot = (t, e) => de(t, e).outerJoin();
var me = (t, e) => de(t, e).innerJoin();
var _u = (...t) => Ot(W, t);
var kf = (...t) => me(W, t);
var qf = _u;
f.prototype.choose = function(...t) {
  return Ot(this, t);
};
f.prototype.choose2 = function(...t) {
  return Ot(this.fromBipolar(), t);
};
var vu = (...t) => me(W.segment(1), t);
var Af = vu;
var ye = function(t, ...e) {
  const n = e.map((u) => h(u[0])), s = [];
  let r = P2(0);
  for (const u of e)
    r = r.add(u[1]), s.push(r);
  const o = cn(s), c = function(u) {
    const a = r.mul(u);
    return o.fmap((p) => (m2) => n[p.findIndex((y) => y > m2, p)]).appLeft(a);
  };
  return t.bind(c);
};
var ku = (...t) => ye(...t).outerJoin();
var Sf = (...t) => ku(W, ...t);
var qu = (...t) => ye(W.segment(1), ...t).innerJoin();
var Tf = qu;
function Au(t) {
  let e = Math.floor(t), n = e + 1;
  const s = (c) => 6 * c ** 5 - 15 * c ** 4 + 10 * c ** 3;
  return (/* @__PURE__ */ ((c) => (u) => (a) => u + s(c) * (a - u))(t - e))(rt(e))(rt(n));
}
var Su = (t) => t.fmap(Au);
function Tu(t) {
  const e = Math.floor(t), n = e + 1, s = rt(e), r = rt(n) + s, o = (t - e) / (n - e);
  return ((u, a, p) => u + (a - u) * p)(s, r, o) / 2;
}
var xu = (t) => t.fmap(Tu);
var xf = Su(ce.fmap((t) => Number(t)));
var Cf = xu(ce.fmap((t) => Number(t)));
var Bf = l(
  "degradeByWith",
  (t, e, n) => n.fmap((s) => (r) => s).appLeft(t.filterValues((s) => s > e)),
  true,
  true
);
var Of = l(
  "degradeBy",
  function(t, e) {
    return e._degradeByWith(W, t);
  },
  true,
  true
);
var zf = l("degrade", (t) => t._degradeBy(0.5), true, true);
var Ef = l(
  "undegradeBy",
  function(t, e) {
    return e._degradeByWith(
      W.fmap((n) => 1 - n),
      t
    );
  },
  true,
  true
);
var Mf = l("undegrade", (t) => t._undegradeBy(0.5), true, true);
var Jf = l("sometimesBy", function(t, e, n) {
  return h(t).fmap((s) => B(n._degradeBy(s), e(n._undegradeBy(1 - s)))).innerJoin();
});
var jf = l("sometimes", function(t, e) {
  return e._sometimesBy(0.5, t);
});
var Pf = l("someCyclesBy", function(t, e, n) {
  return h(t).fmap(
    (s) => B(
      n._degradeByWith(W._segment(1), s),
      e(n._degradeByWith(W.fmap((r) => 1 - r)._segment(1), 1 - s))
    )
  ).innerJoin();
});
var Nf = l("someCycles", function(t, e) {
  return e._someCyclesBy(0.5, t);
});
var $f = l("often", function(t, e) {
  return e.sometimesBy(0.75, t);
});
var Rf = l("rarely", function(t, e) {
  return e.sometimesBy(0.25, t);
});
var Wf = l("almostNever", function(t, e) {
  return e.sometimesBy(0.1, t);
});
var Lf = l("almostAlways", function(t, e) {
  return e.sometimesBy(0.9, t);
});
var If = l("never", function(t, e) {
  return e;
});
var Hf = l("always", function(t, e) {
  return t(e);
});
function ge(t) {
  Array.isArray(t) === false && (t = [t]);
  const e = Ze();
  return t.every((n) => {
    const s = Ye.get(n) ?? n;
    return e[s];
  });
}
var Vf = l("whenKey", function(t, e, n) {
  return n.when(ge(t), e);
});
var Ff = l("keyDown", function(t) {
  return t.fmap(ge);
});
var H = function(t, e, n = true) {
  const s = Array.isArray(t), r = Object.keys(t).length;
  return t = Ue(t, h), r === 0 ? S : e.fmap((o) => {
    let c = o;
    return s && (c = n ? Math.round(c) % r : Re(Math.round(c), 0, t.length - 1)), t[c];
  });
};
var Cu = function(t, e) {
  return Array.isArray(e) && ([e, t] = [t, e]), Bu(t, e);
};
var Bu = l("pick", function(t, e) {
  return H(t, e, false).innerJoin();
});
var Ou = l("pickmod", function(t, e) {
  return H(t, e, true).innerJoin();
});
var Df = l("pickF", function(t, e, n) {
  return n.apply(Cu(t, e));
});
var Gf = l("pickmodF", function(t, e, n) {
  return n.apply(Ou(t, e));
});
var Qf = l("pickOut", function(t, e) {
  return H(t, e, false).outerJoin();
});
var Uf = l("pickmodOut", function(t, e) {
  return H(t, e, true).outerJoin();
});
var Kf = l("pickRestart", function(t, e) {
  return H(t, e, false).restartJoin();
});
var Xf = l("pickmodRestart", function(t, e) {
  return H(t, e, true).restartJoin();
});
var Yf = l("pickReset", function(t, e) {
  return H(t, e, false).resetJoin();
});
var Zf = l("pickmodReset", function(t, e) {
  return H(t, e, true).resetJoin();
});
var { inhabit: th, pickSqueeze: eh } = l(["inhabit", "pickSqueeze"], function(t, e) {
  return H(t, e, false).squeezeJoin();
});
var { inhabitmod: nh, pickmodSqueeze: sh } = l(["inhabitmod", "pickmodSqueeze"], function(t, e) {
  return H(t, e, true).squeezeJoin();
});
var rh = (t, e) => (e = e.map(h), e.length == 0 ? S : t.fmap((n) => {
  const s = pt(Math.round(n), e.length);
  return e[s];
}).squeezeJoin());
var at;
try {
  at = window?.speechSynthesis;
} catch {
  console.warn("cannot use window: not in browser?");
}
var Wt = at?.getVoices();
function zu(t, e, n) {
  at.cancel();
  const s = new SpeechSynthesisUtterance(t);
  s.lang = e, Wt = at.getVoices();
  const r = Wt.filter((o) => o.lang.includes(e));
  typeof n == "number" ? s.voice = r[n % r.length] : typeof n == "string" && (s.voice = r.find((o) => o.name === o)), speechSynthesis.speak(s);
}
var oh = l("speak", function(t, e, n) {
  return n.onTrigger((s) => {
    zu(s.value, t, e);
  });
});
var Eu = {};
var Mu = async (...t) => {
  const e = await Promise.allSettled(t), n = e.filter((s) => s.status === "fulfilled").map((s) => s.value);
  return e.forEach((s, r) => {
    s.status === "rejected" && console.warn(`evalScope: module with index ${r} could not be loaded:`, s.reason);
  }), n.forEach((s) => {
    Object.entries(s).forEach(([r, o]) => {
      globalThis[r] = o, Eu[r] = o;
    });
  }), n;
};
function Ju(t, e = {}) {
  const { wrapExpression: n = true, wrapAsync: s = true } = e;
  n && (t = `{${t}}`), s && (t = `(async ()=>${t})()`);
  const r = `"use strict";return (${t})`;
  return Function(r)();
}
var ju = async (t, e, n) => {
  let s = {};
  if (e) {
    const c = e(t, n);
    t = c.output, s = c;
  }
  return { mode: "javascript", pattern: await Ju(t, { wrapExpression: !!e }), meta: s };
};
var Pu = class {
  constructor({ onTrigger: e, onToggle: n, getTime: s }) {
    this.started = false, this.cps = 0.5, this.getTime = s, this.time_at_last_tick_message = 0, this.collator = new Ke({ getTargetClockTime: s }), this.onToggle = n, this.latency = 0.1, this.cycle = 0, this.id = Math.round(Date.now() * Math.random()), this.worker = new SharedWorker(new URL(
      /* @vite-ignore */
      "" + new URL("assets/clockworker-ZDiUtESR.js", import.meta.url).href,
      import.meta.url
    )), this.worker.port.start(), this.channel = new BroadcastChannel("strudeltick");
    const r = (c) => {
      const { cps: u, begin: a, end: p, cycle: m2, time: y } = c;
      this.cps = u, this.cycle = m2;
      const b = this.collator.calculateOffset(y) + y;
      o(a, p, b), this.time_at_last_tick_message = b;
    }, o = (c, u, a) => {
      if (this.started === false)
        return;
      this.pattern.queryArc(c, u, { _cps: this.cps }).forEach((m2) => {
        if (m2.hasOnset()) {
          const b = Pt(m2.whole.begin - this.cycle, this.cps) + a + this.latency, w2 = Pt(m2.duration, this.cps);
          e?.(m2, 0, w2, this.cps, b);
        }
      });
    };
    this.channel.onmessage = (c) => {
      if (!this.started)
        return;
      const { payload: u, type: a } = c.data;
      switch (a) {
        case "tick":
          r(u);
      }
    };
  }
  sendMessage(e, n) {
    this.worker.port.postMessage({ type: e, payload: n, id: this.id });
  }
  now() {
    const e = (this.getTime() - this.time_at_last_tick_message) * this.cps;
    return this.cycle + e;
  }
  setCps(e = 1) {
    this.sendMessage("cpschange", { cps: e });
  }
  setCycle(e) {
    this.sendMessage("setcycle", { cycle: e });
  }
  setStarted(e) {
    this.sendMessage("toggle", { started: e }), this.started = e, this.onToggle?.(e);
  }
  start() {
    z("[cyclist] start"), this.setStarted(true);
  }
  stop() {
    z("[cyclist] stop"), this.collator.reset(), this.setStarted(false);
  }
  setPattern(e, n = false) {
    this.pattern = e, n && !this.started && this.start();
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var Nu = class {
  constructor({
    interval: e,
    onTrigger: n,
    onToggle: s,
    onError: r,
    getTime: o,
    latency: c = 0.1,
    setInterval: u,
    clearInterval: a,
    beforeStart: p
  }) {
    this.started = false, this.beforeStart = p, this.cps = 0.5, this.num_ticks_since_cps_change = 0, this.lastTick = 0, this.lastBegin = 0, this.lastEnd = 0, this.getTime = o, this.num_cycles_at_cps_change = 0, this.seconds_at_cps_change, this.onToggle = s, this.latency = c, this.clock = pu(
      o,
      // called slightly before each cycle
      (m2, y, b, w2) => {
        this.num_ticks_since_cps_change === 0 && (this.num_cycles_at_cps_change = this.lastEnd, this.seconds_at_cps_change = m2), this.num_ticks_since_cps_change++;
        const k = this.num_ticks_since_cps_change * y * this.cps;
        try {
          const E = this.lastEnd;
          this.lastBegin = E;
          const M = this.num_cycles_at_cps_change + k;
          if (this.lastEnd = M, this.lastTick = m2, m2 < w2) {
            console.log("skip query: too late");
            return;
          }
          this.pattern.queryArc(E, M, { _cps: this.cps }).forEach((A) => {
            if (A.hasOnset()) {
              const J3 = (A.whole.begin - this.num_cycles_at_cps_change) / this.cps + this.seconds_at_cps_change + c, G3 = A.duration / this.cps, V2 = J3 - m2;
              n?.(A, V2, G3, this.cps, J3), A.value.cps !== void 0 && this.cps != A.value.cps && (this.cps = A.value.cps, this.num_ticks_since_cps_change = 0);
            }
          });
        } catch (E) {
          Ht(E), r?.(E);
        }
      },
      e,
      // duration of each cycle
      0.1,
      0.1,
      u,
      a
    );
  }
  now() {
    if (!this.started)
      return 0;
    const e = this.getTime() - this.lastTick - this.clock.duration;
    return this.lastBegin + e * this.cps;
  }
  setStarted(e) {
    this.started = e, this.onToggle?.(e);
  }
  async start() {
    if (await this.beforeStart?.(), this.num_ticks_since_cps_change = 0, this.num_cycles_at_cps_change = 0, !this.pattern)
      throw new Error("Scheduler: no pattern set! call .setPattern first.");
    z("[cyclist] start"), this.clock.start(), this.setStarted(true);
  }
  pause() {
    z("[cyclist] pause"), this.clock.pause(), this.setStarted(false);
  }
  stop() {
    z("[cyclist] stop"), this.clock.stop(), this.lastEnd = 0, this.setStarted(false);
  }
  async setPattern(e, n = false) {
    this.pattern = e, n && !this.started && await this.start();
  }
  setCps(e = 0.5) {
    this.cps !== e && (this.cps = e, this.num_ticks_since_cps_change = 0);
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var bt;
function ih() {
  if (!bt)
    throw new Error("no time set! use setTime to define a time source");
  return bt();
}
function Lt(t) {
  bt = t;
}
function ch({
  defaultOutput: t,
  onEvalError: e,
  beforeEval: n,
  beforeStart: s,
  afterEval: r,
  getTime: o,
  transpiler: c,
  onToggle: u,
  editPattern: a,
  onUpdateState: p,
  sync: m2 = false,
  setInterval: y,
  clearInterval: b,
  id: w2,
  mondo: v = false
}) {
  const k = {
    schedulerError: void 0,
    evalError: void 0,
    code: "// LOADING",
    activeCode: "// LOADING",
    pattern: void 0,
    miniLocations: [],
    widgets: [],
    pending: false,
    started: false
  }, E = {
    id: w2
  }, M = (_2) => {
    Object.assign(k, _2), k.isDirty = k.code !== k.activeCode, k.error = k.evalError || k.schedulerError, p?.(k);
  }, X2 = {
    onTrigger: $u({ defaultOutput: t, getTime: o }),
    getTime: o,
    onToggle: (_2) => {
      M({ started: _2 }), u?.(_2);
    },
    setInterval: y,
    clearInterval: b,
    beforeStart: s
  }, A = m2 && typeof SharedWorker < "u" ? new Pu(X2) : new Nu(X2);
  let J3 = {}, G3 = 0, V2;
  const zt = function() {
    return J3 = {}, G3 = 0, V2 = void 0, S;
  }, Et = async (_2, q3 = true) => (_2 = a?.(_2) || _2, await A.setPattern(_2, q3), _2);
  Lt(() => A.now());
  const we2 = () => A.stop(), be3 = () => A.start(), _e = () => A.pause(), ve2 = () => A.toggle(), dt = (_2) => A.setCps(_2), Mt = (_2) => A.setCps(_2 / 60);
  let Y2 = [];
  const ke = function(_2) {
    return Y2.push(_2), S;
  }, qe = function(_2) {
    return V2 = _2, S;
  }, Ae = () => {
    f.prototype.p = function(q3) {
      return typeof q3 == "string" && (q3.startsWith("_") || q3.endsWith("_")) ? S : (q3 === "$" && (q3 = `$${G3}`, G3++), J3[q3] = this, this);
    }, f.prototype.q = function(q3) {
      return S;
    };
    try {
      for (let q3 = 1; q3 < 10; ++q3)
        Object.defineProperty(f.prototype, `d${q3}`, {
          get() {
            return this.p(q3);
          },
          configurable: true
        }), Object.defineProperty(f.prototype, `p${q3}`, {
          get() {
            return this.p(q3);
          },
          configurable: true
        }), f.prototype[`q${q3}`] = S;
    } catch (q3) {
      console.warn("injectPatternMethods: error:", q3);
    }
    const _2 = l("cpm", function(q3, mt) {
      return mt._fast(q3 / 60 / A.cps);
    });
    return Mu({
      all: ke,
      each: qe,
      hush: zt,
      cpm: _2,
      setCps: dt,
      setcps: dt,
      setCpm: Mt,
      setcpm: Mt
    });
  };
  return { scheduler: A, evaluate: async (_2, q3 = true, mt = true) => {
    if (!_2)
      throw new Error("no code to evaluate");
    try {
      M({ code: _2, pending: true }), await Ae(), Lt(() => A.now()), await n?.({ code: _2 }), Y2 = [], mt && zt(), v && (_2 = `mondolang\`${_2}\``);
      let { pattern: O2, meta: yt2 } = await ju(_2, c, E);
      if (Object.keys(J3).length) {
        let Q3 = Object.values(J3);
        V2 && (Q3 = Q3.map((Se) => V2(Se))), O2 = B(...Q3);
      } else V2 && (O2 = V2(O2));
      if (Y2.length)
        for (let Q3 in Y2)
          O2 = Y2[Q3](O2);
      if (!Ut(O2)) {
        const Q3 = `got "${typeof evaluated}" instead of pattern`;
        throw new Error(Q3 + (typeof evaluated == "function" ? ", did you forget to call a function?" : "."));
      }
      return z("[eval] code updated"), O2 = await Et(O2, q3), M({
        miniLocations: yt2?.miniLocations || [],
        widgets: yt2?.widgets || [],
        activeCode: _2,
        pattern: O2,
        evalError: void 0,
        schedulerError: void 0,
        pending: false
      }), r?.({ code: _2, pattern: O2, meta: yt2 }), O2;
    } catch (O2) {
      z(`[eval] error: ${O2.message}`, "error"), console.error(O2), M({ evalError: O2, pending: false }), e?.(O2);
    }
  }, start: be3, stop: we2, pause: _e, setCps: dt, setPattern: Et, setCode: (_2) => M({ code: _2 }), toggle: ve2, state: k };
}
var $u = ({ getTime: t, defaultOutput: e }) => async (n, s, r, o, c) => {
  try {
    (!n.context.onTrigger || !n.context.dominantTrigger) && await e(n, s, r, o, c), n.context.onTrigger && await n.context.onTrigger(n, t(), o, c);
  } catch (u) {
    Ht(u, "getTrigger");
  }
};
var uh = function(t, e = {}) {
  const n = document.getElementById("code"), s = "background-image:url(" + t + ");background-size:contain;";
  n.style = s;
  const { className: r } = n, o = (a, p) => {
    ({
      style: () => n.style = s + ";" + p,
      className: () => n.className = p + " " + r
    })[a]();
  }, c = Object.entries(e).filter(([a, p]) => typeof p == "function");
  Object.entries(e).filter(([a, p]) => typeof p == "string").forEach(([a, p]) => o(a, p)), c.length;
};
var ah = () => {
  const t = document.getElementById("code");
  t && (t.style = "");
};
z("🌀 @strudel/core loaded 🌀");
globalThis._strudelLoaded && console.warn(
  `@strudel/core was loaded more than once...
This might happen when you have multiple versions of strudel installed. 
Please check with "npm ls @strudel/core".`
);
globalThis._strudelLoaded = true;

// node_modules/nanostores/clean-stores/index.js
var clean = Symbol("clean");

// node_modules/nanostores/atom/index.js
var listenerQueue = [];
var lqIndex = 0;
var QUEUE_ITEMS_PER_LISTENER = 4;
var epoch = 0;
var atom = (initialValue) => {
  let listeners = [];
  let $atom = {
    get() {
      if (!$atom.lc) {
        $atom.listen(() => {
        })();
      }
      return $atom.value;
    },
    lc: 0,
    listen(listener) {
      $atom.lc = listeners.push(listener);
      return () => {
        for (let i2 = lqIndex + QUEUE_ITEMS_PER_LISTENER; i2 < listenerQueue.length; ) {
          if (listenerQueue[i2] === listener) {
            listenerQueue.splice(i2, QUEUE_ITEMS_PER_LISTENER);
          } else {
            i2 += QUEUE_ITEMS_PER_LISTENER;
          }
        }
        let index = listeners.indexOf(listener);
        if (~index) {
          listeners.splice(index, 1);
          if (!--$atom.lc) $atom.off();
        }
      };
    },
    notify(oldValue, changedKey) {
      epoch++;
      let runListenerQueue = !listenerQueue.length;
      for (let listener of listeners) {
        listenerQueue.push(
          listener,
          $atom.value,
          oldValue,
          changedKey
        );
      }
      if (runListenerQueue) {
        for (lqIndex = 0; lqIndex < listenerQueue.length; lqIndex += QUEUE_ITEMS_PER_LISTENER) {
          listenerQueue[lqIndex](
            listenerQueue[lqIndex + 1],
            listenerQueue[lqIndex + 2],
            listenerQueue[lqIndex + 3]
          );
        }
        listenerQueue.length = 0;
      }
    },
    /* It will be called on last listener unsubscribing.
       We will redefine it in onMount and onStop. */
    off() {
    },
    set(newValue) {
      let oldValue = $atom.value;
      if (oldValue !== newValue) {
        $atom.value = newValue;
        $atom.notify(oldValue);
      }
    },
    subscribe(listener) {
      let unbind = $atom.listen(listener);
      listener($atom.value);
      return unbind;
    },
    value: initialValue
  };
  if (true) {
    $atom[clean] = () => {
      listeners = [];
      $atom.lc = 0;
      $atom.off();
    };
  }
  return $atom;
};

// node_modules/nanostores/map/index.js
var map = (initial = {}) => {
  let $map = atom(initial);
  $map.setKey = function(key, value) {
    let oldMap = $map.value;
    if (typeof value === "undefined" && key in $map.value) {
      $map.value = { ...$map.value };
      delete $map.value[key];
      $map.notify(oldMap, key);
    } else if ($map.value[key] !== value) {
      $map.value = {
        ...$map.value,
        [key]: value
      };
      $map.notify(oldMap, key);
    }
  };
  return $map;
};

// node_modules/superdough/dist/index.mjs
if (typeof DelayNode < "u") {
  class t extends DelayNode {
    constructor(n, o, a, c) {
      super(n), o = Math.abs(o), this.delayTime.value = a;
      const s = n.createGain();
      s.gain.value = Math.min(Math.abs(c), 0.995), this.feedback = s.gain;
      const d2 = n.createGain();
      return d2.gain.value = o, this.delayGain = d2, this.connect(s), this.connect(d2), s.connect(this), this.connect = (l2) => d2.connect(l2), this;
    }
    start(n) {
      this.delayGain.gain.setValueAtTime(this.delayGain.gain.value, n + this.delayTime.value);
    }
  }
  AudioContext.prototype.createFeedbackDelay = function(e, n, o) {
    return new t(this, e, n, o);
  };
}
var Pt2 = {};
Pt2.generateReverb = function(t, e) {
  for (var n = t.audioContext || new AudioContext(), o = n.sampleRate, a = t.numChannels || 2, c = t.decayTime * 1.5, s = Math.round(t.decayTime * o), d2 = Math.round(c * o), l2 = Math.round((t.fadeInTime || 0) * o), i2 = Math.pow(1 / 1e3, 1 / s), r = n.createBuffer(a, d2, o), h2 = 0; h2 < a; h2++) {
    for (var m2 = r.getChannelData(h2), u = 0; u < d2; u++)
      m2[u] = an2() * Math.pow(i2, u);
    for (var u = 0; u < l2; u++)
      m2[u] *= u / l2;
  }
  cn2(r, t.lpFreqStart || 0, t.lpFreqEnd || 0, t.decayTime, e);
};
Pt2.generateGraph = function(t, e, n, o, a) {
  var c = document.createElement("canvas");
  c.width = e, c.height = n;
  var s = c.getContext("2d");
  s.fillStyle = "#000", s.fillRect(0, 0, c.width, c.height), s.fillStyle = "#fff";
  for (var d2 = e / t.length, l2 = n / (a - o), i2 = 0; i2 < t.length; i2++)
    s.fillRect(i2 * d2, n - (t[i2] - o) * l2, 1, 1);
  return c;
};
var cn2 = function(t, e, n, o, a) {
  if (e == 0) {
    a(t);
    return;
  }
  var c = sn2(t), s = new OfflineAudioContext(t.numberOfChannels, c[0].length, t.sampleRate), d2 = s.createBufferSource();
  d2.buffer = t;
  var l2 = s.createBiquadFilter();
  e = Math.min(e, t.sampleRate / 2), n = Math.min(n, t.sampleRate / 2), l2.type = "lowpass", l2.Q.value = 1e-4, l2.frequency.setValueAtTime(e, 0), l2.frequency.linearRampToValueAtTime(n, o), d2.connect(l2), l2.connect(s.destination), d2.start(), s.oncomplete = function(i2) {
    a(i2.renderedBuffer);
  }, s.startRendering(), window.filterNode = l2;
};
var sn2 = function(t) {
  for (var e = [], n = 0; n < t.numberOfChannels; n++)
    e[n] = t.getChannelData(n);
  return e;
};
var an2 = function() {
  return Math.random() * 2 - 1;
};
var be = (t) => console.log(t);
var J = (...t) => be(...t);
var so2 = (t) => {
  be = t;
};
var $2 = (t, e, n) => Math.min(Math.max(t, e), n);
function U2(t, e = 0, n) {
  return isNaN(Number(t)) ? (!n && J(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
typeof AudioContext < "u" && (AudioContext.prototype.adjustLength = function(t, e, n = 1, o = 0) {
  const a = Math.floor($2(o, 0, 1) * e.length), c = e.sampleRate * t, s = this.createBuffer(e.numberOfChannels, e.length, e.sampleRate);
  for (let d2 = 0; d2 < e.numberOfChannels; d2++) {
    let l2 = e.getChannelData(d2), i2 = s.getChannelData(d2);
    for (let r = 0; r < c; r++) {
      let h2 = (a + r * Math.abs(n)) % l2.length;
      n < 1 && (h2 = h2 * -1), i2[r] = l2.at(h2) || 0;
    }
  }
  return s;
}, AudioContext.prototype.createReverb = function(t, e, n, o, a, c, s) {
  const d2 = this.createConvolver();
  return d2.generate = (l2 = 2, i2 = 0.1, r = 15e3, h2 = 1e3, m2, u, p) => {
    d2.duration = l2, d2.fade = i2, d2.lp = r, d2.dim = h2, d2.ir = m2, d2.irspeed = u, d2.irbegin = p, m2 ? d2.buffer = this.adjustLength(l2, m2, u, p) : Pt2.generateReverb(
      {
        audioContext: this,
        numChannels: 2,
        decayTime: l2,
        fadeInTime: i2,
        lpFreqStart: r,
        lpFreqEnd: h2
      },
      (Z3) => {
        d2.buffer = Z3;
      }
    );
  }, d2.generate(t, e, n, o, a, c, s), d2;
});
var ue2 = {
  a: { freqs: [660, 1120, 2750, 3e3, 3350], gains: [1, 0.5012, 0.0708, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  e: { freqs: [440, 1800, 2700, 3e3, 3300], gains: [1, 0.1995, 0.1259, 0.1, 0.1], qs: [70, 80, 100, 120, 120] },
  i: { freqs: [270, 1850, 2900, 3350, 3590], gains: [1, 0.0631, 0.0631, 0.0158, 0.0158], qs: [40, 90, 100, 120, 120] },
  o: { freqs: [430, 820, 2700, 3e3, 3300], gains: [1, 0.3162, 0.0501, 0.0794, 0.01995], qs: [40, 80, 100, 120, 120] },
  u: { freqs: [370, 630, 2750, 3e3, 3400], gains: [1, 0.1, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  ae: { freqs: [650, 1515, 2400, 3e3, 3350], gains: [1, 0.5, 0.1008, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  aa: { freqs: [560, 900, 2570, 3e3, 3300], gains: [1, 0.5, 0.0708, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  oe: { freqs: [500, 1430, 2300, 3e3, 3300], gains: [1, 0.2, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  ue: { freqs: [250, 1750, 2150, 3200, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  y: { freqs: [400, 1460, 2400, 3e3, 3300], gains: [1, 0.2, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  uh: { freqs: [600, 1250, 2100, 3100, 3500], gains: [1, 0.3, 0.0608, 0.0316, 0.01995], qs: [40, 70, 100, 120, 130] },
  un: { freqs: [500, 1240, 2280, 3e3, 3500], gains: [1, 0.1, 0.1708, 0.0216, 0.02995], qs: [40, 60, 100, 120, 120] },
  en: { freqs: [600, 1480, 2450, 3200, 3300], gains: [1, 0.15, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  an: { freqs: [700, 1050, 2500, 3e3, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  on: { freqs: [500, 1080, 2350, 3e3, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  get æ() {
    return this.ae;
  },
  get ø() {
    return this.oe;
  },
  get ɑ() {
    return this.aa;
  },
  get å() {
    return this.aa;
  },
  get ö() {
    return this.oe;
  },
  get ü() {
    return this.ue;
  },
  get ı() {
    return this.y;
  }
};
if (typeof GainNode < "u") {
  class t extends GainNode {
    constructor(n, o) {
      if (super(n), !ue2[o])
        throw new Error("vowel: unknown vowel " + o);
      const { gains: a, qs: c, freqs: s } = ue2[o], d2 = n.createGain();
      for (let l2 = 0; l2 < 5; l2++) {
        const i2 = n.createGain();
        i2.gain.value = a[l2];
        const r = n.createBiquadFilter();
        r.type = "bandpass", r.Q.value = c[l2], r.frequency.value = s[l2], this.connect(r), r.connect(i2), i2.connect(d2);
      }
      return d2.gain.value = 8, this.connect = (l2) => d2.connect(l2), this;
    }
  }
  AudioContext.prototype.createVowelFilter = function(e) {
    return new t(this, e);
  };
}
var me2 = (t, e, n, o) => o - n === 0 ? 0 : (e - t) / (o - n);
var Q = (t, e, n, o, a, c, s, d2, l2, i2 = "exponential") => {
  e = U2(e), n = U2(n), o = U2(o), a = U2(a);
  const r = i2 === "exponential" ? "exponentialRampToValueAtTime" : "linearRampToValueAtTime";
  i2 === "exponential" && (c = c === 0 ? 1e-3 : c, s = s === 0 ? 1e-3 : s);
  const h2 = s - c, m2 = s, u = c + o * h2, p = l2 - d2, Z3 = (X2) => {
    let y;
    if (e > X2) {
      let b = me2(c, m2, 0, e);
      y = X2 * b + (c > m2 ? c : 0);
    } else
      y = (X2 - e) * me2(m2, u, 0, n) + m2;
    return i2 === "exponential" && (y = y || 1e-3), y;
  };
  t.setValueAtTime(c, d2), e > p ? t[r](Z3(p), l2) : e + n > p ? (t[r](Z3(e), d2 + e), t[r](Z3(p), l2)) : (t[r](Z3(e), d2 + e), t[r](Z3(e + n), d2 + e + n), t.setValueAtTime(u, l2)), t[r](c, l2 + a);
};
var B2 = (t, e = "linear", n) => {
  const [s, d2, l2, i2] = t;
  if (s == null && d2 == null && l2 == null && i2 == null)
    return n ?? [1e-3, 1e-3, 1, 0.01];
  const r = l2 ?? (s != null && d2 == null || s == null && d2 == null ? 1 : 1e-3);
  return [Math.max(s ?? 0, 1e-3), Math.max(d2 ?? 0, 1e-3), Math.min(r, 1), Math.max(i2 ?? 0, 0.01)];
};
var yn2 = ["linear", "exponential"];
function Xt2(t, e, n, o) {
  if (!(e.pattack ?? e.pdecay ?? e.psustain ?? e.prelease ?? e.penv))
    return;
  const c = U2(e.penv, 1, true), s = yn2[e.pcurve ?? 0];
  let [d2, l2, i2, r] = B2(
    [e.pattack, e.pdecay, e.psustain, e.prelease],
    s,
    [0.2, 1e-3, 1, 1e-3]
  ), h2 = e.panchor ?? i2;
  const m2 = c * 100, u = 0 - m2 * h2, p = m2 - m2 * h2;
  Q(t, d2, l2, i2, r, u, p, n, o, s);
}
function yt(t, e, n) {
  const { vibmod: o = 0.5, vib: a } = e;
  let c;
  if (a > 0) {
    c = W2().createOscillator(), c.frequency.value = a;
    const s = W2().createGain();
    return s.gain.value = o * 100, c.connect(s), s.connect(t), c.start(n), c;
  }
}
var j2 = map();
function q(t, e, n = {}) {
  t = t.toLowerCase().replace(/\s+/g, "_"), j2.setKey(t, { onTrigger: e, data: n });
}
var lt2 = {
  s: "triangle",
  gain: 0.8,
  postgain: 1,
  density: ".03",
  ftype: "12db",
  fanchor: 0,
  resonance: 1,
  hresonance: 1,
  bandq: 1,
  channels: [1, 2],
  phaserdepth: 0.75,
  shapevol: 1,
  distortvol: 1,
  delay: 0,
  byteBeatExpression: "0",
  delayfeedback: 0.5,
  delaysync: 3 / 16,
  orbit: 1,
  i: 1,
  velocity: 1,
  fft: 8
};
var Kn2 = Object.freeze({ ...lt2 });
var kt2 = new Map(Object.entries(lt2));
var Gt2;
var Nn2 = () => (Gt2 = new AudioContext(), Gt2);
var W2 = () => Gt2 || Nn2();
var P3 = {};
var ot2 = {};
function Vo2(t = "time", e = 1) {
  const n = {
    time: () => P3[e]?.getFloatTimeDomainData(ot2[e]),
    frequency: () => P3[e]?.getFloatFrequencyData(ot2[e])
  }[t];
  if (!n)
    throw new Error(`getAnalyzerData: ${t} not supported. use one of ${Object.keys(n).join(", ")}`);
  return n(), ot2[e];
}
var ct2;
var Fe2 = () => {
  ct2 && (ct2?.stop(), ct2?.node?.disconnect());
};
typeof window < "u" && window.addEventListener("message", (t) => {
  t.data === "strudel-stop" ? Fe2() : t.data?.dough && ct2?.node.port.postMessage(t.data);
});
function Ro2(t, e, n, o) {
  window.postMessage({ time: o, dough: t.value, currentTime: e, duration: t.duration, cps: n });
}

// node_modules/@strudel/draw/dist/index.mjs
var Z2 = (t = "test-canvas", e) => {
  let { contextType: n = "2d", pixelated: o = false, pixelRatio: a = window.devicePixelRatio } = e || {}, r = document.querySelector("#" + t);
  if (!r) {
    r = document.createElement("canvas"), r.id = t, r.width = window.innerWidth * a, r.height = window.innerHeight * a, r.style = "pointer-events:none;width:100%;height:100%;position:fixed;top:0;left:0", o && (r.style.imageRendering = "pixelated"), document.body.prepend(r);
    let l2;
    window.addEventListener("resize", () => {
      l2 && clearTimeout(l2), l2 = setTimeout(() => {
        r.width = window.innerWidth * a, r.height = window.innerHeight * a;
      }, 200);
    });
  }
  return r.getContext(n, { willReadFrequently: true });
};
var $3 = {};
function pe2(t) {
  $3[t] !== void 0 && (cancelAnimationFrame($3[t]), delete $3[t]);
}
var R2 = {};
f.prototype.draw = function(t, e) {
  if (typeof window > "u")
    return this;
  let { id: n = 1, lookbehind: o = 0, lookahead: a = 0 } = e, r = Math.max(ih(), 0);
  pe2(n), o = Math.abs(o), R2[n] = (R2[n] || []).filter((g2) => !g2.isInFuture(r));
  let l2 = this.queryArc(r, r + a).filter((g2) => g2.hasOnset());
  R2[n] = R2[n].concat(l2);
  let f2;
  const i2 = () => {
    const g2 = ih(), u = g2 + a;
    R2[n] = R2[n].filter((d2) => d2.isInNearPast(o, g2));
    let c = Math.max(f2 || u, u - 1 / 10);
    const b = this.queryArc(c, u).filter((d2) => d2.hasOnset());
    R2[n] = R2[n].concat(b), f2 = u, t(R2[n], g2, u, this), $3[n] = requestAnimationFrame(i2);
  };
  return $3[n] = requestAnimationFrame(i2), this;
};
f.prototype.onPaint = function(t) {
  return this.withState((e) => {
    e.controls.painters || (e.controls.painters = []), e.controls.painters.push(t);
  });
};
f.prototype.getPainters = function() {
  let t = [];
  return this.queryArc(0, 0, { painters: t }), t;
};
var ye2 = {
  background: "#222",
  foreground: "#75baff",
  caret: "#ffcc00",
  selection: "rgba(128, 203, 196, 0.5)",
  selectionMatch: "#036dd626",
  lineHighlight: "#00000050",
  gutterBackground: "transparent",
  gutterForeground: "#8a919966"
};
function W3() {
  return ye2;
}
var fe2 = "#22222210";
f.prototype.animate = function({ callback: t, sync: e = false, smear: n = 0.5 } = {}) {
  window.frame && cancelAnimationFrame(window.frame);
  const o = Z2();
  let { clientWidth: a, clientHeight: r } = o.canvas;
  a *= window.devicePixelRatio, r *= window.devicePixelRatio;
  let l2 = n === 0 ? "99" : Number((1 - n) * 100).toFixed(0);
  l2 = l2.length === 1 ? `0${l2}` : l2, fe2 = `#200010${l2}`;
  const f2 = (i2) => {
    let g2;
    i2 = Math.round(i2), g2 = this.slow(1e3).queryArc(i2, i2), o.fillStyle = fe2, o.fillRect(0, 0, a, r), g2.forEach((u) => {
      let { x: c, y: b, w: d2, h: w2, s: p, r: k, angle: h2 = 0, fill: S3 = "darkseagreen" } = u.value;
      if (d2 *= a, w2 *= r, k !== void 0 && h2 !== void 0) {
        const v = h2 * 2 * Math.PI, [y, P4] = [(a - d2) / 2, (r - w2) / 2];
        c = y + Math.cos(v) * k * y, b = P4 + Math.sin(v) * k * P4;
      } else
        c *= a - d2, b *= r - w2;
      const A = { ...u.value, x: c, y: b, w: d2, h: w2 };
      o.fillStyle = S3, p === "rect" ? o.fillRect(c, b, d2, w2) : p === "ellipse" && (o.beginPath(), o.ellipse(c + d2 / 2, b + w2 / 2, d2 / 2, w2 / 2, 0, 0, 2 * Math.PI), o.fill()), t && t(o, A, u);
    }), window.frame = requestAnimationFrame(f2);
  };
  return window.frame = requestAnimationFrame(f2), S;
};
var { x: we, y: xe2, w: et2, h: tt2, angle: nt2, r: rt2, fill: at2, smear: ot3 } = Rc("x", "y", "w", "h", "angle", "r", "fill", "smear");
var it2 = l("rescale", function(t, e) {
  return e.mul(we(t).w(t).y(t).h(t));
});
var lt3 = l("moveXY", function(t, e, n) {
  return n.add(we(t).y(e));
});
var st2 = l("zoomIn", function(t, e) {
  const n = P2(1).sub(t).div(2);
  return e.rescale(t).move(n, n);
});
var G = (t, e, n) => t * (n - e) + e;
var he2 = (t) => {
  let { value: e } = t;
  typeof t.value != "object" && (e = { value: e });
  let { note: n, n: o, freq: a, s: r } = e;
  if (a)
    return Oe(a);
  if (n = n ?? o, typeof n == "string")
    try {
      return lt(n);
    } catch {
      return 0;
    }
  return typeof n == "number" ? n : r ? "_" + r : e;
};
f.prototype.pianoroll = function(t = {}) {
  let { cycles: e = 4, playhead: n = 0.5, overscan: o = 0, hideNegative: a = false, ctx: r = Z2(), id: l2 = 1 } = t, f2 = -e * n, i2 = e * (1 - n);
  const g2 = (u, c) => (!a || u.whole.begin >= 0) && u.isWithinTime(c + f2, c + i2);
  return this.draw(
    (u, c) => {
      ee2({
        ...t,
        time: c,
        ctx: r,
        haps: u.filter((b) => g2(b, c))
      });
    },
    {
      lookbehind: f2 - o,
      lookahead: i2 + o,
      id: l2
    }
  ), this;
};
function ee2({
  time: t,
  haps: e,
  cycles: n = 4,
  playhead: o = 0.5,
  flipTime: a = 0,
  flipValues: r = 0,
  hideNegative: l2 = false,
  inactive: f2 = W3().foreground,
  active: i2 = W3().foreground,
  background: g2 = "transparent",
  smear: u = 0,
  playheadColor: c = W3().foreground,
  minMidi: b = 10,
  maxMidi: d2 = 90,
  autorange: w2 = 0,
  timeframe: p,
  fold: k = 1,
  vertical: h2 = 0,
  labels: S3 = false,
  fill: A = 1,
  fillActive: v = false,
  strokeActive: y = true,
  stroke: P4,
  hideInactive: H2 = 0,
  colorizeInactive: q3 = 1,
  fontFamily: C4,
  ctx: s,
  id: _2
} = {}) {
  const T3 = s.canvas.width, I2 = s.canvas.height;
  let z2 = -n * o, j4 = n * (1 - o);
  _2 && (e = e.filter((m2) => m2.hasTag(_2))), p && (console.warn("timeframe is deprecated! use from/to instead"), z2 = 0, j4 = p);
  const N2 = h2 ? I2 : T3, E = h2 ? T3 : I2;
  let L3 = h2 ? [N2, 0] : [0, N2];
  const J3 = j4 - z2, te2 = h2 ? [0, E] : [E, 0];
  let K2 = d2 - b + 1, D3 = E / K2, Q3 = [];
  a && L3.reverse(), r && te2.reverse();
  const { min: ke, max: Pe2, values: Te2 } = e.reduce(
    ({ min: m2, max: F2, values: X2 }, Y2) => {
      const M = he2(Y2);
      return {
        min: M < m2 ? M : m2,
        max: M > F2 ? M : F2,
        values: X2.includes(M) ? X2 : [...X2, M]
      };
    },
    { min: 1 / 0, max: -1 / 0, values: [] }
  );
  w2 && (b = ke, d2 = Pe2, K2 = d2 - b + 1), Q3 = Te2.sort(
    (m2, F2) => typeof m2 == "number" && typeof F2 == "number" ? m2 - F2 : typeof m2 == "number" ? 1 : String(m2).localeCompare(String(F2))
  ), D3 = k ? E / Q3.length : E / K2, s.fillStyle = g2, s.globalAlpha = 1, u || (s.clearRect(0, 0, T3, I2), s.fillRect(0, 0, T3, I2)), e.forEach((m2) => {
    const F2 = m2.whole.begin <= t && m2.endClipped > t;
    let X2 = P4 ?? (y && F2), Y2 = !F2 && A || F2 && v;
    if (H2 && !F2)
      return;
    let M = m2.value?.color;
    i2 = M || i2, f2 = q3 && M || f2, M = F2 ? i2 : f2, s.fillStyle = Y2 ? M : "transparent", s.strokeStyle = M;
    const { velocity: Ae = 1, gain: qe = 1 } = m2.value || {};
    s.globalAlpha = Ae * qe;
    const Fe3 = (m2.whole.begin - (a ? j4 : z2)) / J3, ne2 = G(Fe3, ...L3);
    let B3 = G(m2.duration / J3, 0, N2);
    const re3 = he2(m2), Me2 = k ? Q3.indexOf(re3) / Q3.length : (Number(re3) - b) / K2, ae3 = G(Me2, ...te2);
    let oe2 = 0;
    const ie2 = G(t / J3, ...L3);
    let V2;
    if (h2 ? V2 = [
      ae3 + 1 - (r ? D3 : 0),
      // x
      N2 - ie2 + ne2 + oe2 + 1 - (a ? 0 : B3),
      // y
      D3 - 2,
      // width
      B3 - 2
      // height
    ] : V2 = [
      ne2 - ie2 + oe2 + 1 - (a ? B3 : 0),
      // x
      ae3 + 1 - (r ? 0 : D3),
      // y
      B3 - 2,
      // widith
      D3 - 2
      // height
    ], X2 && s.strokeRect(...V2), Y2 && s.fillRect(...V2), S3) {
      const Se = m2.value.note ?? m2.value.s + (m2.value.n ? `:${m2.value.n}` : ""), { label: le2, activeLabel: Ce2 } = m2.value, He2 = (F2 && Ce2 || le2) ?? Se;
      let Ie2 = h2 ? B3 : D3 * 0.75;
      s.font = `${Ie2}px ${C4 || "monospace"}`, s.fillStyle = /* isActive &&  */
      Y2 ? "black" : M, s.textBaseline = "top", s.fillText(He2, ...V2);
    }
  }), s.globalAlpha = 1;
  const U3 = G(-z2 / J3, ...L3);
  return s.strokeStyle = c, s.beginPath(), h2 ? (s.moveTo(0, U3), s.lineTo(E, U3)) : (s.moveTo(U3, 0), s.lineTo(U3, E)), s.stroke(), this;
}
function ve(t, e = {}) {
  let [n, o] = t;
  n = Math.abs(n);
  const a = o + n, r = a !== 0 ? n / a : 0;
  return { fold: 1, ...e, cycles: a, playhead: r };
}
var je2 = (t = {}) => (e, n, o, a) => ee2({ ctx: e, time: n, haps: o, ...ve(a, t) });
f.prototype.punchcard = function(t) {
  return this.onPaint(je2(t));
};
f.prototype.wordfall = function(t) {
  return this.punchcard({ vertical: 1, labels: 1, stroke: 0, fillActive: 1, active: "white", ...t });
};
function Xe2(t, e, n, o) {
  const a = (t - 90) * Math.PI / 180;
  return [n + Math.cos(a) * e, o + Math.sin(a) * e];
}
var ue3 = (t, e, n, o, a = 0) => Xe2((t + a) * 360, e * t, n, o);
function me3(t) {
  let {
    ctx: e,
    from: n = 0,
    to: o = 3,
    margin: a = 50,
    cx: r = 100,
    cy: l2 = 100,
    rotate: f2 = 0,
    thickness: i2 = a / 2,
    color: g2 = W3().foreground,
    cap: u = "round",
    stretch: c = 1,
    fromOpacity: b = 1,
    toOpacity: d2 = 1
  } = t;
  n *= c, o *= c, f2 *= c, e.lineWidth = i2, e.lineCap = u, e.strokeStyle = g2, e.globalAlpha = b, e.beginPath();
  let [w2, p] = ue3(n, a, r, l2, f2);
  e.moveTo(w2, p);
  const k = 1 / 60;
  let h2 = n;
  for (; h2 <= o; ) {
    const [S3, A] = ue3(h2, a, r, l2, f2);
    e.globalAlpha = (h2 - n) / (o - n) * d2, e.lineTo(S3, A), h2 += k;
  }
  e.stroke();
}
function Ye2(t) {
  let {
    stretch: e = 1,
    size: n = 80,
    thickness: o = n / 2,
    cap: a = "butt",
    // round butt squar,
    inset: r = 3,
    // start angl,
    playheadColor: l2 = "#ffffff",
    playheadLength: f2 = 0.02,
    playheadThickness: i2 = o,
    padding: g2 = 0,
    steady: u = 1,
    activeColor: c = W3().foreground,
    inactiveColor: b = W3().gutterForeground,
    colorizeInactive: d2 = 0,
    fade: w2 = true,
    // logSpiral = true,
    ctx: p,
    time: k,
    haps: h2,
    drawTime: S3,
    id: A
  } = t;
  A && (h2 = h2.filter((T3) => T3.hasTag(A)));
  const [v, y] = [p.canvas.width, p.canvas.height];
  p.clearRect(0, 0, v * 2, y * 2);
  const [P4, H2] = [v / 2, y / 2], q3 = {
    margin: n / e,
    cx: P4,
    cy: H2,
    stretch: e,
    cap: a,
    thickness: o
  }, C4 = {
    ...q3,
    thickness: i2,
    from: r - f2,
    to: r,
    color: l2
  }, [s] = S3, _2 = u * k;
  h2.forEach((T3) => {
    const I2 = T3.whole.begin <= k && T3.endClipped > k, z2 = T3.whole.begin - k + r, j4 = T3.endClipped - k + r - g2, N2 = T3.value?.color || c, E = d2 || I2 ? N2 : b, L3 = w2 ? 1 - Math.abs((T3.whole.begin - k) / s) : 1;
    me3({
      ctx: p,
      ...q3,
      from: z2,
      to: j4,
      rotate: _2,
      color: E,
      fromOpacity: L3,
      toOpacity: L3
    });
  }), me3({
    ctx: p,
    ...C4,
    rotate: _2
  });
}
f.prototype.spiral = function(t = {}) {
  return this.onPaint((e, n, o, a) => Ye2({ ctx: e, time: n, haps: o, drawTime: a, ...t }));
};
var Be2 = et(36);
var ge2 = (t, e, n, o) => {
  o = o * Math.PI * 2;
  const a = Math.sin(o) * n + t, r = Math.cos(o) * n + e;
  return [a, r];
};
var be2 = (t, e) => 0.5 - Math.log2(t / e) % 1;
function Ve2({
  haps: t,
  ctx: e,
  id: n,
  hapcircles: o = 1,
  circle: a = 0,
  edo: r = 12,
  root: l2 = Be2,
  thickness: f2 = 3,
  hapRadius: i2 = 6,
  mode: g2 = "flake",
  margin: u = 10
} = {}) {
  const c = g2 === "polygon", b = g2 === "flake", d2 = e.canvas.width, w2 = e.canvas.height;
  e.clearRect(0, 0, d2, w2);
  const p = W3().foreground, h2 = Math.min(d2, w2) / 2 - f2 / 2 - i2 - u, S3 = d2 / 2, A = w2 / 2;
  n && (t = t.filter((y) => y.hasTag(n))), e.strokeStyle = p, e.fillStyle = p, e.globalAlpha = 1, e.lineWidth = f2, a && (e.beginPath(), e.arc(S3, A, h2, 0, 2 * Math.PI), e.stroke()), r && (Array.from({ length: r }, (y, P4) => {
    const H2 = be2(l2 * Math.pow(2, P4 / r), l2), [q3, C4] = ge2(S3, A, h2, H2);
    e.beginPath(), e.arc(q3, C4, i2, 0, 2 * Math.PI), e.fill();
  }), e.stroke());
  let v = [];
  e.lineWidth = i2, t.forEach((y) => {
    let P4;
    try {
      P4 = Qu(y);
    } catch {
      return;
    }
    const H2 = be2(P4, l2), [q3, C4] = ge2(S3, A, h2, H2), s = y.value.color || p;
    e.strokeStyle = s, e.fillStyle = s;
    const { velocity: _2 = 1, gain: T3 = 1 } = y.value || {}, I2 = _2 * T3;
    e.globalAlpha = I2, v.push([q3, C4, H2, s, I2]), e.beginPath(), o && (e.moveTo(q3 + i2, C4), e.arc(q3, C4, i2, 0, 2 * Math.PI), e.fill()), b && (e.moveTo(S3, A), e.lineTo(q3, C4)), e.stroke();
  }), e.strokeStyle = p, e.globalAlpha = 1, c && v.length && (v = v.sort((y, P4) => y[2] - P4[2]), e.beginPath(), e.moveTo(v[0][0], v[0][1]), v.forEach(([y, P4, H2, q3, C4]) => {
    e.strokeStyle = q3, e.globalAlpha = C4, e.lineTo(y, P4);
  }), e.lineTo(v[0][0], v[0][1]), e.stroke());
}
f.prototype.pitchwheel = function(t = {}) {
  let { ctx: e = Z2(), id: n = 1 } = t;
  return this.tag(n).onPaint(
    (o, a, r) => Ve2({
      ...t,
      time: a,
      ctx: e,
      haps: r.filter((l2) => l2.isActive(a)),
      id: n
    })
  );
};

// node_modules/@strudel/webaudio/dist/index.mjs
var { Pattern: O, logger: W4, repl: $4 } = dist_exports;
so2(W4);
O.prototype.dough = function() {
  return this.onTrigger(Ro2, 1);
};
function j3(e, {
  align: t = true,
  color: o = "white",
  thickness: s = 3,
  scale: f2 = 0.25,
  pos: a = 0.75,
  trigger: u = 0,
  ctx: r = Z2(),
  id: y = 1
} = {}) {
  r.lineWidth = s, r.strokeStyle = o;
  let c = r.canvas;
  if (!e) {
    r.beginPath();
    let l2 = a * c.height;
    r.moveTo(0, l2), r.lineTo(c.width, l2), r.stroke();
    return;
  }
  const n = Vo2("time", y);
  r.beginPath();
  const p = e.frequencyBinCount;
  let h2 = t ? Array.from(n).findIndex((l2, d2, g2) => d2 && g2[d2 - 1] > -u && l2 <= -u) : 0;
  h2 = Math.max(h2, 0);
  const w2 = c.width * 1 / p;
  let i2 = 0;
  for (let l2 = h2; l2 < p; l2++) {
    const d2 = n[l2] + 1, g2 = (a - f2 * (d2 - 1)) * c.height;
    l2 === 0 ? r.moveTo(i2, g2) : r.lineTo(i2, g2), i2 += w2;
  }
  r.stroke();
}
function L2(e, { color: t = "white", scale: o = 0.25, pos: s = 0.75, lean: f2 = 0.5, min: a = -150, max: u = 0, ctx: r = Z2(), id: y = 1 } = {}) {
  if (!e) {
    r.beginPath();
    let i2 = s * n.height;
    r.moveTo(0, i2), r.lineTo(n.width, i2), r.stroke();
    return;
  }
  const c = Vo2("frequency", y), n = r.canvas;
  r.fillStyle = t;
  const p = e.frequencyBinCount, h2 = n.width * 1 / p;
  let w2 = 0;
  for (let i2 = 0; i2 < p; i2++) {
    const d2 = Re((c[i2] - a) / (u - a), 0, 1) * o, g2 = d2 * n.height, D3 = (s - d2 * f2) * n.height;
    r.fillRect(w2, D3, Math.max(h2, 1), g2), w2 += h2;
  }
}
function C2(e = 0, t = "0,0,0", o = Z2()) {
  e ? (o.fillStyle = `rgba(${t},${1 - e})`, o.fillRect(0, 0, o.canvas.width, o.canvas.height)) : o.clearRect(0, 0, o.canvas.width, o.canvas.height);
}
f.prototype.fscope = function(e = {}) {
  let t = e.id ?? 1;
  return this.analyze(t).draw(
    () => {
      C2(e.smear, "0,0,0", e.ctx), P3[t] && L2(P3[t], e);
    },
    { id: t }
  );
};
f.prototype.tscope = function(e = {}) {
  let t = e.id ?? 1;
  return this.analyze(t).draw(
    (o) => {
      e.color = o[0]?.value?.color || W3().foreground, e.color, C2(e.smear, "0,0,0", e.ctx), j3(P3[t], e);
    },
    { id: t }
  );
};
f.prototype.scope = f.prototype.tscope;
var T = {};
f.prototype.spectrum = function(e = {}) {
  let t = e.id ?? 1;
  return this.analyze(t).draw(
    (o) => {
      e.color = o[0]?.value?.color || T[t] || W3().foreground, T[t] = e.color, V(P3[t], e);
    },
    { id: t }
  );
};
f.prototype.scope = f.prototype.tscope;
var S2 = /* @__PURE__ */ new Map();
function V(e, { thickness: t = 3, speed: o = 1, min: s = -80, max: f2 = 0, ctx: a = Z2(), id: u = 1, color: r } = {}) {
  if (a.lineWidth = t, a.strokeStyle = r, !e)
    return;
  const y = o, c = Vo2("frequency", u), n = a.canvas;
  a.fillStyle = r;
  const p = e.frequencyBinCount;
  let h2 = S2.get(u) || a.getImageData(0, 0, n.width, n.height);
  S2.set(u, h2), a.clearRect(0, 0, a.canvas.width, a.canvas.height), a.putImageData(h2, -y, 0);
  let w2 = n.width - o;
  for (let i2 = 0; i2 < p; i2++) {
    const l2 = Re((c[i2] - s) / (f2 - s), 0, 1);
    a.globalAlpha = l2;
    const d2 = Math.log(i2 + 1) / Math.log(p) * n.height;
    a.fillRect(w2, n.height - d2, y, 2);
  }
  S2.set(u, a.getImageData(0, 0, n.width, n.height));
}

// node_modules/sfumato/dist/sfumato.js
var import_soundfont2 = __toESM(require_SoundFont2());
var m = (e) => Math.pow(2, e / 1200);
var Q2 = (e) => e / 1e3;
var G2 = (e, t) => {
  const n = Math.pow(10, t);
  return Math.round(e * n) / n;
};
typeof AudioParam < "u" && (AudioParam.prototype.dahdsr = function(e, t, n, o, r, s, a, c, i2) {
  r = Math.max(G2(r, 4), 1e-3), a = Math.max(G2(a, 4), 1e-3), i2 = G2(i2, 4), t = Math.max(t, 1e-3);
  let l2 = e;
  return this.setValueAtTime(t, l2), this.setValueAtTime(t, l2 += o), this.exponentialRampToValueAtTime(n, l2 += r), this.setValueAtTime(n, l2 += s), this.exponentialRampToValueAtTime(Math.max(c * n, 1e-3), l2 += a), (d2, u) => {
    this.cancelAndHoldAtTime(d2);
    const f2 = Math.max(u != null ? u : t, 1e-3);
    this.exponentialRampToValueAtTime(f2, d2 + i2);
  };
});
var T2 = {
  0: "startAddrOffset",
  1: "endAddrOffset",
  2: "startloopAddrsOffset",
  3: "endloopAddrsOffset",
  4: "startAddrsCoarseOffset",
  5: "modLfoToPitch",
  6: "vibLfoToPitch",
  7: "modEnvToPitch",
  8: "initialFilterFc",
  9: "initialFilterQ",
  10: "modLfoToFilterFc",
  11: "modEnvToFilterFc",
  12: "endAddrsCoarseOffset",
  13: "modLfoToVolume",
  14: "unused1",
  15: "chorusEffectsSend",
  16: "reverbEffectsSend",
  17: "pan",
  18: "unused2",
  19: "unused3",
  20: "unused4",
  21: "delayModLFO",
  22: "freqModLFO",
  23: "delayVibLFO",
  24: "freqVibLFO",
  25: "delayModEnv",
  26: "attackModEnv",
  27: "holdModEnv",
  28: "decayModEnv",
  29: "sustainModEnv",
  30: "releaseModEnv",
  31: "keyNumToModEnvHold",
  32: "keyNumToModEnvDecay",
  33: "delayVolEnv",
  34: "attackVolEnv",
  35: "holdVolEnv",
  36: "decayVolEnv",
  37: "sustainVolEnv",
  38: "releaseVolEnv",
  39: "keyNumToVolEnvHold",
  40: "keyNumToVolEnvDecay",
  41: "instrument",
  42: "reserved1",
  43: "keyRange",
  44: "velRange",
  45: "startloopAddrsCoarseOffset",
  46: "keyNum",
  47: "velocity",
  48: "initialAttenuation",
  49: "reserved2",
  50: "endloopAddrsCoarseOffset",
  51: "coarseTune",
  52: "fineTune",
  53: "sampleID",
  54: "sampleModes",
  55: "reserved3",
  56: "scaleTuning",
  57: "exclusiveClass",
  58: "overridingRootKey",
  59: "unused5",
  60: "endOper"
};
var re2 = Object.fromEntries(
  Object.entries(import_soundfont2.DEFAULT_GENERATOR_VALUES).map(([e, t]) => [T2[e], t])
);
var D2 = (e, t, n, o, r) => {
  var h2, g2, y, E, b, A, O2;
  const s = import_soundfont2.DEFAULT_GENERATOR_VALUES[e];
  if (typeof s != "number")
    throw new Error(`no default value found for generator with index ${e}`);
  const a = t.generators[e], c = (g2 = (h2 = n.globalZone) == null ? void 0 : h2.generators) == null ? void 0 : g2[e], i2 = (y = o == null ? void 0 : o.generators) == null ? void 0 : y[e], l2 = (b = (E = r.globalZone) == null ? void 0 : E.generators) == null ? void 0 : b[e], d2 = a && "value" in a ? a.value : void 0, u = c && "value" in c ? c.value : void 0, f2 = i2 && "value" in i2 ? i2.value : void 0, v = l2 && "value" in l2 ? l2.value : void 0, p = (A = d2 != null ? d2 : u) != null ? A : s, M = (O2 = f2 != null ? f2 : v) != null ? O2 : 0;
  return p + M;
};
var J2 = (e) => import_soundfont2.DEFAULT_GENERATOR_VALUES[e] !== void 0;
var W5 = (e, t, n) => {
  var o, r, s, a;
  return Object.fromEntries(
    Array.from(
      new Set(
        [
          Object.keys((r = (o = n.globalZone) == null ? void 0 : o.generators) != null ? r : {}),
          Object.keys(t.generators),
          Object.keys((a = (s = t.instrument.globalZone) == null ? void 0 : s.generators) != null ? a : {}),
          Object.keys(e.generators)
        ].flat()
      )
    ).filter(J2).map((c) => [T2[c], D2(parseInt(c), e, t.instrument, t, n)])
  );
};
async function ae2(e) {
  const t = await fetch(e).then((o) => o.arrayBuffer()), n = new Uint8Array(t);
  return new import_soundfont2.SoundFont2(n);
}
function X(e, t, n) {
  let { time: o = e.currentTime } = n;
  const {
    midi: r,
    start: s,
    velocity: a = 0.3,
    startLoop: c,
    endLoop: i2,
    sampleRate: l2,
    originalPitch: d2,
    pitchCorrection: u,
    type: f2,
    sampleModes: v = 0,
    overridingRootKey: p,
    fineTune: M = 0,
    startloopAddrsOffset: h2 = 0,
    startloopAddrsCoarseOffset: g2 = 0,
    endloopAddrsOffset: y = 0,
    endloopAddrsCoarseOffset: E = 0,
    delayVolEnv: b = -12e3,
    attackVolEnv: A = -12e3,
    holdVolEnv: O2 = -12e3,
    decayVolEnv: N2 = -12e3,
    sustainVolEnv: F2 = 0,
    releaseVolEnv: L3 = -12e3,
    pan: P4 = 0,
    ...Z3
  } = n, B3 = 100 * (p !== void 0 && p !== -1 ? p : d2) + u - M, I2 = r * 100 - B3, K2 = 1 * Math.pow(2, I2 / 1200);
  t.playbackRate.value = K2;
  const j4 = c + h2 + g2 * 32768, S3 = i2 + y + E * 32768;
  S3 > j4 && v === 1 ? (t.loopStart = j4 / l2, t.loopEnd = S3 / l2, t.loop = true) : v === 3 && console.warn("unimplemented sampleMode 3 (play till end on note off)"), Object.keys(Z3).filter(
    (V2) => !["name", "instrument", "keyRange", "sampleID", "end"].includes(V2)
  ).length;
  const k = e.createGain(), H2 = [
    o,
    0,
    a,
    m(b),
    m(A),
    m(O2),
    m(N2),
    F2 >= 960 ? 0 : 1 - Q2(F2),
    m(L3)
  ], U3 = k.gain.dahdsr(...H2), R3 = e.createStereoPanner();
  return R3.pan.value = P4 / 1e3, k.connect(R3), t.connect(k), R3.connect(e.destination), t.start(o), (V2 = e.currentTime) => {
    t.stop(V2 + m(L3)), U3(V2);
  };
}
function Y(e, t, n = {}) {
  const { header: o, data: r } = t, s = new Float32Array(r.length);
  for (let l2 = 0; l2 < r.length; l2++)
    s[l2] = r[l2] / 32768;
  const a = e.createBuffer(1, s.length, o.sampleRate);
  a.getChannelData(0).set(s);
  const i2 = e.createBufferSource();
  return i2.buffer = a, n = { ...o, ...n }, X(e, i2, n);
}
var C3 = (e, t) => !e.keyRange || e.keyRange.lo <= t && t <= e.keyRange.hi;
var x2 = (e, t) => e.zones.filter((o) => C3(o, t) && o.instrument).map((o) => o.instrument.zones.filter((r) => C3(r, t)).map((r) => {
  const s = W5(r, o, e);
  return {
    ...r,
    mergedGenerators: s
  };
})).flat();
var ce2 = (e, t, n, o = e.currentTime) => {
  const s = x2(t, n).map(
    (a) => Y(e, a.sample, {
      ...a.mergedGenerators,
      midi: n,
      time: o
    })
  );
  return (a = e.currentTime) => {
    s.forEach((c) => c(a));
  };
};

// node_modules/@strudel/soundfonts/dist/index.mjs
var gm = {
  gm_piano: [
    //'gm_acoustic_piano': [
    // Acoustic Grand Piano: Piano
    "0000_JCLive_sf2_file",
    "0000_FluidR3_GM_sf2_file",
    "0000_Aspirin_sf2_file",
    "0000_Chaos_sf2_file",
    "0000_GeneralUserGS_sf2_file",
    //0000_SBLive_sf2
    //0000_SoundBlasterOld_sf2
    "0001_FluidR3_GM_sf2_file",
    "0001_GeneralUserGS_sf2_file",
    //],
    //'gm_bright_acoustic_piano': [
    // Bright Acoustic Piano: Piano
    "0010_Aspirin_sf2_file",
    "0010_Chaos_sf2_file",
    "0010_FluidR3_GM_sf2_file",
    "0010_GeneralUserGS_sf2_file",
    "0010_JCLive_sf2_file",
    //0010_SBLive_sf2
    //0010_SoundBlasterOld_sf2
    "0011_Aspirin_sf2_file",
    "0011_FluidR3_GM_sf2_file",
    "0011_GeneralUserGS_sf2_file",
    "0012_GeneralUserGS_sf2_file",
    //],
    //'gm_electric_grand_piano': [
    // Electric Grand Piano: Piano
    "0020_Aspirin_sf2_file",
    "0020_Chaos_sf2_file",
    "0020_FluidR3_GM_sf2_file",
    "0020_GeneralUserGS_sf2_file",
    "0020_JCLive_sf2_file",
    //0020_SBLive_sf2
    //0020_SoundBlasterOld_sf2
    "0021_Aspirin_sf2_file",
    "0021_GeneralUserGS_sf2_file",
    // ?
    "0022_Aspirin_sf2_file",
    //],
    //'gm_honky_tonk_piano': [
    // Honky_tonk Piano: Piano
    "0030_Aspirin_sf2_file",
    "0030_Chaos_sf2_file",
    "0030_FluidR3_GM_sf2_file",
    "0030_GeneralUserGS_sf2_file",
    "0030_JCLive_sf2_file",
    //0030_SBLive_sf2
    //0030_SoundBlasterOld_sf2
    "0031_Aspirin_sf2_file",
    "0031_FluidR3_GM_sf2_file",
    "0031_GeneralUserGS_sf2_file"
    //0031_SoundBlasterOld_sf2 // pianos until her
  ],
  gm_epiano1: [
    // Electric Piano 1: Piano
    "0040_JCLive_sf2_file",
    "0040_FluidR3_GM_sf2_file",
    "0040_Aspirin_sf2_file",
    "0040_Chaos_sf2_file",
    "0040_GeneralUserGS_sf2_file",
    //0040_SBLive_sf2 // ?
    //0040_SoundBlasterOld_sf2 // ?
    "0041_FluidR3_GM_sf2_file",
    "0041_GeneralUserGS_sf2_file",
    //0041_SoundBlasterOld_sf2 // ?
    "0042_GeneralUserGS_sf2_file",
    "0043_GeneralUserGS_sf2_file",
    "0044_GeneralUserGS_sf2_file",
    //0045_GeneralUserGS_sf2_file // ?
    "0046_GeneralUserGS_sf2_file"
  ],
  gm_epiano2: [
    // Electric Piano 2: Piano
    "0050_JCLive_sf2_file",
    "0050_FluidR3_GM_sf2_file",
    "0050_Aspirin_sf2_file",
    "0050_Chaos_sf2_file",
    // ?
    "0050_GeneralUserGS_sf2_file",
    // cont
    //0050_SBLive_sf2 // ?
    //0050_SoundBlasterOld_sf2 // ?
    "0051_FluidR3_GM_sf2_file",
    "0051_GeneralUserGS_sf2_file",
    //0052_GeneralUserGS_sf2_file // ?
    "0053_GeneralUserGS_sf2_file",
    // normal piano...
    "0054_GeneralUserGS_sf2_file"
  ],
  gm_harpsichord: [
    // Harpsichord: Piano
    "0060_JCLive_sf2_file",
    "0060_FluidR3_GM_sf2_file",
    "0060_Aspirin_sf2_file",
    "0060_Chaos_sf2_file",
    "0060_GeneralUserGS_sf2_file",
    //0060_SBLive_sf2
    //0060_SoundBlasterOld_sf2
    "0061_Aspirin_sf2_file",
    "0061_GeneralUserGS_sf2_file",
    //0061_SoundBlasterOld_sf2
    "0062_GeneralUserGS_sf2_file"
  ],
  gm_clavinet: [
    // Clavinet: Piano
    "0070_JCLive_sf2_file",
    "0070_FluidR3_GM_sf2_file",
    "0070_Aspirin_sf2_file",
    "0070_Chaos_sf2_file"
    // 0070_GeneralUserGS_sf2_file // half broken
    //0070_SBLive_sf2
    //0070_SoundBlasterOld_sf2
    // 0071_GeneralUserGS_sf2_file // half broke
  ],
  gm_celesta: [
    // Celesta: Chromatic Percussion
    "0080_JCLive_sf2_file",
    "0080_Aspirin_sf2_file",
    "0080_Chaos_sf2_file",
    "0080_FluidR3_GM_sf2_file",
    "0080_GeneralUserGS_sf2_file",
    //0080_SBLive_sf2
    //0080_SoundBlasterOld_sf2
    "0081_FluidR3_GM_sf2_file"
    // 0081_GeneralUserGS_sf2_file // weird detuned
    //0081_SoundBlasterOld_sf
  ],
  gm_glockenspiel: [
    // Glockenspiel: Chromatic Percussion
    "0090_JCLive_sf2_file",
    "0090_Aspirin_sf2_file",
    "0090_Chaos_sf2_file",
    "0090_FluidR3_GM_sf2_file",
    "0090_GeneralUserGS_sf2_file"
    //0090_SBLive_sf2
    //0090_SoundBlasterOld_sf2
    //0091_SoundBlasterOld_sf
  ],
  gm_music_box: [
    // Music Box: Chromatic Percussion
    "0100_JCLive_sf2_file",
    "0100_Aspirin_sf2_file",
    "0100_Chaos_sf2_file",
    "0100_FluidR3_GM_sf2_file",
    "0100_GeneralUserGS_sf2_file"
    //0100_SBLive_sf2
    //0100_SoundBlasterOld_sf2
    // 0101_GeneralUserGS_sf2_file // weird detuned
    //0101_SoundBlasterOld_sf
  ],
  gm_vibraphone: [
    // Vibraphone: Chromatic Percussion
    "0110_JCLive_sf2_file",
    "0110_Aspirin_sf2_file",
    "0110_Chaos_sf2_file",
    "0110_FluidR3_GM_sf2_file",
    "0110_GeneralUserGS_sf2_file",
    //0110_SBLive_sf2
    //0110_SoundBlasterOld_sf2
    "0111_FluidR3_GM_sf2_file"
  ],
  gm_marimba: [
    // Marimba: Chromatic Percussion
    "0120_JCLive_sf2_file",
    "0120_Aspirin_sf2_file",
    "0120_Chaos_sf2_file",
    "0120_FluidR3_GM_sf2_file",
    "0120_GeneralUserGS_sf2_file",
    //0120_SBLive_sf2
    //0120_SoundBlasterOld_sf2
    "0121_FluidR3_GM_sf2_file",
    "0121_GeneralUserGS_sf2_file"
  ],
  gm_xylophone: [
    // Xylophone: Chromatic Percussion
    "0130_JCLive_sf2_file",
    "0130_Aspirin_sf2_file",
    "0130_Chaos_sf2_file",
    "0130_FluidR3_GM_sf2_file",
    "0130_GeneralUserGS_sf2_file",
    //0130_SBLive_sf2
    //0130_SoundBlasterOld_sf2
    "0131_FluidR3_GM_sf2_file"
  ],
  gm_tubular_bells: [
    // Tubular Bells: Chromatic Percussion
    "0140_JCLive_sf2_file",
    "0140_Aspirin_sf2_file",
    // 0140_Chaos_sf2_file // same as aspirin?
    "0140_FluidR3_GM_sf2_file",
    "0140_GeneralUserGS_sf2_file",
    //0140_SBLive_sf2
    //0140_SoundBlasterOld_sf2
    "0141_FluidR3_GM_sf2_file",
    //0141_GeneralUserGS_sf2_file
    "0142_GeneralUserGS_sf2_file"
    // 0143_GeneralUserGS_sf2_file // bugg
  ],
  gm_dulcimer: [
    // Dulcimer: Chromatic Percussion
    "0150_Aspirin_sf2_file",
    "0150_Chaos_sf2_file",
    "0150_FluidR3_GM_sf2_file",
    "0150_GeneralUserGS_sf2_file",
    // 0150_JCLive_sf2_file // detuned???
    //0150_SBLive_sf2
    //0150_SoundBlasterOld_sf2
    "0151_FluidR3_GM_sf2_file"
  ],
  gm_drawbar_organ: [
    // Drawbar Organ: Organ
    "0160_JCLive_sf2_file",
    "0160_Aspirin_sf2_file",
    "0160_Chaos_sf2_file",
    "0160_FluidR3_GM_sf2_file",
    "0160_GeneralUserGS_sf2_file",
    //0160_SBLive_sf2
    //0160_SoundBlasterOld_sf2
    "0161_Aspirin_sf2_file",
    "0161_FluidR3_GM_sf2_file"
    //0161_SoundBlasterOld_sf
  ],
  gm_percussive_organ: [
    // Percussive Organ: Organ
    "0170_JCLive_sf2_file",
    "0170_Aspirin_sf2_file",
    "0170_Chaos_sf2_file",
    "0170_FluidR3_GM_sf2_file",
    // 0170_GeneralUserGS_sf2_file // repitched
    //0170_SBLive_sf2
    //0170_SoundBlasterOld_sf2
    "0171_FluidR3_GM_sf2_file",
    // 0171_GeneralUserGS_sf2_file  // repitched
    "0172_FluidR3_GM_sf2_file"
  ],
  gm_rock_organ: [
    // Rock Organ: Organ
    "0180_JCLive_sf2_file",
    "0180_Aspirin_sf2_file",
    "0180_Chaos_sf2_file",
    "0180_FluidR3_GM_sf2_file",
    "0180_GeneralUserGS_sf2_file"
    //0180_SBLive_sf2
    //0180_SoundBlasterOld_sf2
    //0181_Aspirin_sf2_file // flute
    //0181_GeneralUserGS_sf2_file // marimbalike
    //0181_SoundBlasterOld_sf
  ],
  gm_church_organ: [
    // Church Organ: Organ
    "0190_JCLive_sf2_file",
    "0190_Aspirin_sf2_file",
    "0190_Chaos_sf2_file",
    "0190_FluidR3_GM_sf2_file",
    "0190_GeneralUserGS_sf2_file"
    //0190_SBLive_sf2
    //0190_SoundBlasterOld_sf2
    //0191_Aspirin_sf2_file // string??
    //0191_GeneralUserGS_sf2_file // weird organ
    //0191_SoundBlasterOld_sf
  ],
  gm_reed_organ: [
    // Reed Organ: Organ
    "0200_JCLive_sf2_file",
    "0200_Aspirin_sf2_file",
    "0200_Chaos_sf2_file",
    "0200_FluidR3_GM_sf2_file",
    "0200_GeneralUserGS_sf2_file",
    //0200_SBLive_sf2
    //0200_SoundBlasterOld_sf2
    "0201_Aspirin_sf2_file",
    "0201_FluidR3_GM_sf2_file",
    "0201_GeneralUserGS_sf2_file"
    //0201_SoundBlasterOld_sf2
    //0210_Aspirin_sf2_file // buggy
    //0210_Chaos_sf2_file // bugg
  ],
  gm_accordion: [
    // Accordion: Organ
    "0210_JCLive_sf2_file",
    "0210_FluidR3_GM_sf2_file",
    "0210_GeneralUserGS_sf2_file",
    //0210_SBLive_sf2
    //0210_SoundBlasterOld_sf2
    "0211_Aspirin_sf2_file",
    "0211_FluidR3_GM_sf2_file",
    "0211_GeneralUserGS_sf2_file",
    //0211_SoundBlasterOld_sf2
    "0212_GeneralUserGS_sf2_file"
  ],
  gm_harmonica: [
    // Harmonica: Organ
    "0220_FluidR3_GM_sf2_file",
    "0220_JCLive_sf2_file",
    "0220_Aspirin_sf2_file",
    "0220_Chaos_sf2_file",
    "0220_GeneralUserGS_sf2_file",
    //0220_SBLive_sf2
    //0220_SoundBlasterOld_sf2
    "0221_FluidR3_GM_sf2_file"
  ],
  gm_bandoneon: [
    // Tango Accordion: Organ
    "0230_Aspirin_sf2_file",
    "0230_JCLive_sf2_file",
    "0230_Chaos_sf2_file",
    "0230_FluidR3_GM_sf2_file",
    "0230_GeneralUserGS_sf2_file",
    //0230_SBLive_sf2
    //0230_SoundBlasterOld_sf2
    "0231_FluidR3_GM_sf2_file",
    "0231_GeneralUserGS_sf2_file",
    "0231_JCLive_sf2_file",
    //0231_SoundBlasterOld_sf2
    "0232_FluidR3_GM_sf2_file",
    "0233_FluidR3_GM_sf2_file"
  ],
  gm_acoustic_guitar_nylon: [
    // Acoustic Guitar (nylon): Guitar
    "0240_JCLive_sf2_file",
    "0240_Aspirin_sf2_file",
    "0240_Chaos_sf2_file",
    "0240_FluidR3_GM_sf2_file",
    "0240_GeneralUserGS_sf2_file",
    "0240_LK_Godin_Nylon_SF2_file",
    //0240_SBLive_sf2
    //0240_SoundBlasterOld_sf2
    // 0241_GeneralUserGS_sf2_file // organ like
    "0241_JCLive_sf2_file",
    "0242_JCLive_sf2_file",
    "0243_JCLive_sf2_file"
  ],
  gm_acoustic_guitar_steel: [
    // Acoustic Guitar (steel): Guitar
    "0253_Acoustic_Guitar_sf2_file",
    "0250_Aspirin_sf2_file",
    "0250_Chaos_sf2_file",
    "0250_FluidR3_GM_sf2_file",
    "0250_GeneralUserGS_sf2_file",
    // 0250_JCLive_sf2_file // detuned
    "0250_LK_AcousticSteel_SF2_file",
    //0250_SBLive_sf2
    //0250_SoundBlasterOld_sf2
    //0251_Acoustic_Guitar_sf2_file // detuned?
    // 0251_GeneralUserGS_sf2_file // broken: missing pitches
    // 0252_Acoustic_Guitar_sf2_file // detuned..
    // 0252_GeneralUserGS_sf2_file // broken: missing pitches
    "0253_Acoustic_Guitar_sf2_file",
    "0253_GeneralUserGS_sf2_file",
    "0254_Acoustic_Guitar_sf2_file",
    "0254_GeneralUserGS_sf2_file"
    //0255_GeneralUserGS_sf2_file // no guitar.
  ],
  gm_electric_guitar_jazz: [
    // Electric Guitar (jazz): Guitar
    "0260_JCLive_sf2_file",
    "0260_Aspirin_sf2_file",
    "0260_Chaos_sf2_file",
    "0260_FluidR3_GM_sf2_file",
    "0260_GeneralUserGS_sf2_file",
    //0260_SBLive_sf2
    //0260_SoundBlasterOld_sf2
    "0260_Stratocaster_sf2_file",
    "0261_GeneralUserGS_sf2_file",
    //0261_SoundBlasterOld_sf2
    "0261_Stratocaster_sf2_file",
    "0262_Stratocaster_sf2_file"
  ],
  gm_electric_guitar_clean: [
    // Electric Guitar (clean): Guitar
    "0270_Aspirin_sf2_file",
    "0270_Chaos_sf2_file",
    "0270_FluidR3_GM_sf2_file",
    "0270_GeneralUserGS_sf2_file",
    //0270_Gibson_Les_Paul_sf2_file // detuned
    // 0270_JCLive_sf2_file // broken: missing notes
    "0270_SBAWE32_sf2_file",
    //0270_SBLive_sf2
    //0270_SoundBlasterOld_sf2
    "0270_Stratocaster_sf2_file",
    "0271_GeneralUserGS_sf2_file",
    "0271_Stratocaster_sf2_file",
    "0272_Stratocaster_sf2_file"
  ],
  gm_electric_guitar_muted: [
    // Electric Guitar (muted): Guitar
    "0280_Aspirin_sf2_file",
    "0280_Chaos_sf2_file",
    // 0280_FluidR3_GM_sf2_file // broken: wrong notes
    "0280_GeneralUserGS_sf2_file",
    "0280_JCLive_sf2_file",
    //0280_LesPaul_sf2 // missing
    "0280_LesPaul_sf2_file",
    "0280_SBAWE32_sf2_file",
    //0280_SBLive_sf2
    //0280_SoundBlasterOld_sf2
    "0281_Aspirin_sf2_file",
    "0281_FluidR3_GM_sf2_file",
    "0281_GeneralUserGS_sf2_file",
    "0282_FluidR3_GM_sf2_file"
    // 0282_GeneralUserGS_sf2_file // broken: missing notes
    // 0283_GeneralUserGS_sf2_file // missin
  ],
  gm_overdriven_guitar: [
    // Overdriven Guitar: Guitar
    "0290_FluidR3_GM_sf2_file",
    "0290_Aspirin_sf2_file",
    "0290_Chaos_sf2_file",
    "0290_GeneralUserGS_sf2_file",
    //0290_JCLive_sf2_file // detuned....
    //0290_LesPaul_sf2 // broken
    "0290_LesPaul_sf2_file",
    "0290_SBAWE32_sf2_file",
    //0290_SBLive_sf2
    //0290_SoundBlasterOld_sf2
    // 0291_Aspirin_sf2_file // broken
    // 0291_LesPaul_sf2 // broken
    "0291_LesPaul_sf2_file",
    "0291_SBAWE32_sf2_file",
    //0291_SoundBlasterOld_sf2
    "0292_Aspirin_sf2_file",
    // 0292_LesPaul_sf2 // broken
    "0292_LesPaul_sf2_file"
  ],
  gm_distortion_guitar: [
    // Distortion Guitar: Guitar
    "0300_FluidR3_GM_sf2_file",
    "0300_Aspirin_sf2_file",
    "0300_Chaos_sf2_file",
    "0300_GeneralUserGS_sf2_file",
    // 0300_JCLive_sf2_file // broken
    // 0300_LesPaul_sf2 // broken
    "0300_LesPaul_sf2_file",
    //0300_SBAWE32_sf2_file // _2 octave
    //0300_SBLive_sf2
    //0300_SoundBlasterOld_sf2
    // 0301_Aspirin_sf2_file // missing
    //0301_FluidR3_GM_sf2_file // weird broken bell
    // 0301_GeneralUserGS_sf2_file // broken
    // 0301_JCLive_sf2_file // broken
    // 0301_LesPaul_sf2 // missing
    // 0301_LesPaul_sf2_file // + 1 oct?
    "0302_Aspirin_sf2_file",
    // 0302_GeneralUserGS_sf2_file // not a guitar..
    //0302_JCLive_sf2_file // broken...
    // 0303_Aspirin_sf2_file // guitar harmonic??
    "0304_Aspirin_sf2_file"
  ],
  gm_guitar_harmonics: [
    // Guitar Harmonics: Guitar
    "0310_Aspirin_sf2_file",
    "0310_FluidR3_GM_sf2_file",
    "0310_Chaos_sf2_file"
    //0310_GeneralUserGS_sf2_file // weird..
    // 0310_JCLive_sf2_file // weird
    //0310_LesPaul_sf2 // missing
    //0310_LesPaul_sf2_file // wrong pitches
    //0310_SBAWE32_sf2_file // wrong pitches
    //0310_SBLive_sf2
    //0310_SoundBlasterOld_sf2
    //0311_FluidR3_GM_sf2_file // knackt
    //0311_GeneralUserGS_sf2_file // wrong note
  ],
  gm_acoustic_bass: [
    // Acoustic Bass: Bass
    "0320_JCLive_sf2_file",
    "0320_FluidR3_GM_sf2_file",
    "0320_Aspirin_sf2_file",
    "0320_Chaos_sf2_file"
    // 0320_GeneralUserGS_sf2_file // missing notes
    //0320_SBLive_sf2
    //0320_SoundBlasterOld_sf2
    // 0321_GeneralUserGS_sf2_file // nice sound but missing notes
    // 0322_GeneralUserGS_sf2_file // missing note
  ],
  gm_electric_bass_finger: [
    // Electric Bass (finger): Bass
    "0330_JCLive_sf2_file",
    "0330_FluidR3_GM_sf2_fible",
    "0330_Aspirin_sf2_file",
    //0330_Chaos_sf2_file // same as last
    "0330_GeneralUserGS_sf2_file"
    //0330_SBLive_sf2
    //0330_SoundBlasterOld_sf2
    //0331_GeneralUserGS_sf2_file // knackt
    // 0332_GeneralUserGS_sf2_file // missin
  ],
  gm_electric_bass_pick: [
    // Electric Bass (pick): Bass
    "0340_JCLive_sf2_file",
    "0340_FluidR3_GM_sf2_file",
    "0340_Aspirin_sf2_file",
    //0340_Chaos_sf2_file // same as last
    "0340_GeneralUserGS_sf2_file",
    //0340_SBLive_sf2
    //0340_SoundBlasterOld_sf2
    "0341_Aspirin_sf2_file"
    //0341_GeneralUserGS_sf2_file // knack
  ],
  gm_fretless_bass: [
    // Fretless Bass: Bass
    "0350_Aspirin_sf2_file",
    // 0350_Chaos_sf2_file // same as last
    //0350_FluidR3_GM_sf2_file // knackt
    //0350_GeneralUserGS_sf2_file // _1 oct + knackt
    "0350_JCLive_sf2_file"
    //0350_SBLive_sf2
    //0350_SoundBlasterOld_sf2
    //0351_GeneralUserGS_sf2_file // missin
  ],
  gm_slap_bass_1: [
    // Slap Bass 1: Bass
    "0360_Aspirin_sf2_file",
    "0360_JCLive_sf2_file",
    "0360_FluidR3_GM_sf2_file",
    "0360_Chaos_sf2_file"
    //0360_GeneralUserGS_sf2_file // _1 oct
    //0360_SBLive_sf2
    //0360_SoundBlasterOld_sf2
    //0361_GeneralUserGS_sf2_file // missin
  ],
  gm_slap_bass_2: [
    // Slap Bass 2: Bass
    "0370_Aspirin_sf2_file",
    // 0370_Chaos_sf2_file // same as last
    "0370_FluidR3_GM_sf2_file",
    "0370_GeneralUserGS_sf2_fil e",
    "0370_JCLive_sf2_file"
    //0370_SBLive_sf2
    //0370_SoundBlasterOld_sf2
    //0371_GeneralUserGS_sf2_file // missing
    //0372_GeneralUserGS_sf2_file // detuned
    //0385_GeneralUserGS_sf2_file // missin
  ],
  gm_synth_bass_1: [
    // Synth Bass 1: Bass
    // '0380_Aspirin_sf2_file', // broken in safari https://codeberg.org/uzu/strudel/issues/1384
    "0380_Chaos_sf2_file",
    "0380_FluidR3_GM_sf2_file",
    // 0380_GeneralUserGS_sf2_file // laut
    "0380_JCLive_sf2_file",
    //0380_SBLive_sf2
    //0380_SoundBlasterOld_sf2
    "0381_FluidR3_GM_sf2_file",
    "0381_GeneralUserGS_sf2_file",
    //0382_FluidR3_GM_sf2_file // kein synth bass
    "0382_GeneralUserGS_sf2_file",
    "0383_GeneralUserGS_sf2_file",
    "0384_GeneralUserGS_sf2_file",
    //0386_GeneralUserGS_sf2_file // knackt
    "0387_GeneralUserGS_sf2_file"
  ],
  gm_synth_bass_2: [
    // Synth Bass 2: Bass
    "0390_Aspirin_sf2_file",
    // 0390_Chaos_sf2_file // same as last
    "0390_FluidR3_GM_sf2_file",
    "0390_GeneralUserGS_sf2_file",
    "0390_JCLive_sf2_file",
    //0390_SBLive_sf2
    //0390_SoundBlasterOld_sf2
    "0391_FluidR3_GM_sf2_file",
    // 0391_GeneralUserGS_sf2_file // missing
    //0391_SoundBlasterOld_sf2
    "0392_FluidR3_GM_sf2_file",
    //0392_GeneralUserGS_sf2_file // kein synth und _1oct
    "0393_GeneralUserGS_sf2_file"
  ],
  gm_violin: [
    // Violin: Strings
    "0400_Aspirin_sf2_file",
    "0400_Chaos_sf2_file",
    "0400_JCLive_sf2_file",
    "0400_FluidR3_GM_sf2_file",
    "0400_GeneralUserGS_sf2_file",
    //0400_SBLive_sf2
    //0400_SoundBlasterOld_sf2
    "0401_Aspirin_sf2_file",
    "0401_FluidR3_GM_sf2_file",
    "0401_GeneralUserGS_sf2_file",
    "0402_GeneralUserGS_sf2_file"
  ],
  gm_viola: [
    // Viola: Strings
    "0410_Aspirin_sf2_file",
    // 0410_Chaos_sf2_file // laut und sehr unstringy
    "0410_FluidR3_GM_sf2_file",
    "0410_GeneralUserGS_sf2_file",
    "0410_JCLive_sf2_file",
    //0410_SBLive_sf2
    //0410_SoundBlasterOld_sf2
    "0411_FluidR3_GM_sf2_file"
  ],
  gm_cello: [
    // Cello: Strings
    "0420_Aspirin_sf2_file",
    // 0420_Chaos_sf2_file // kein cello und laut
    "0420_FluidR3_GM_sf2_file",
    "0420_GeneralUserGS_sf2_file",
    "0420_JCLive_sf2_file",
    //0420_SBLive_sf2
    //0420_SoundBlasterOld_sf2
    "0421_FluidR3_GM_sf2_file",
    "0421_GeneralUserGS_sf2_file"
  ],
  gm_contrabass: [
    // Contrabass: Strings
    "0430_Aspirin_sf2_file",
    "0430_Chaos_sf2_file",
    // 0430_FluidR3_GM_sf2_file // missing notes
    "0430_GeneralUserGS_sf2_file"
    //0430_JCLive_sf2_file // _1 oct und meh
    //0430_SBLive_sf2
    //0430_SoundBlasterOld_sf2
    // 0431_FluidR3_GM_sf2_file // missing note
  ],
  gm_tremolo_strings: [
    // Tremolo Strings: Strings
    "0440_Aspirin_sf2_file",
    "0440_Chaos_sf2_file",
    //0440_FluidR3_GM_sf2_file // huuuge
    "0440_GeneralUserGS_sf2_file",
    "0440_JCLive_sf2_file",
    //0440_SBLive_sf2
    //0440_SoundBlasterOld_sf2
    "0441_GeneralUserGS_sf2_file",
    "0442_GeneralUserGS_sf2_file"
  ],
  gm_pizzicato_strings: [
    // Pizzicato Strings: Strings
    "0450_Aspirin_sf2_file",
    "0450_Chaos_sf2_file",
    "0450_FluidR3_GM_sf2_file",
    "0450_GeneralUserGS_sf2_file",
    "0450_JCLive_sf2_file",
    //0450_SBLive_sf2
    //0450_SoundBlasterOld_sf2
    "0451_FluidR3_GM_sf2_file"
  ],
  gm_orchestral_harp: [
    // Orchestral Harp: Strings
    "0460_Aspirin_sf2_file",
    // 0460_Chaos_sf2_file // knackt
    "0460_FluidR3_GM_sf2_file",
    "0460_GeneralUserGS_sf2_file",
    "0460_JCLive_sf2_file",
    //0460_SBLive_sf2
    //0460_SoundBlasterOld_sf2
    "0461_FluidR3_GM_sf2_file"
  ],
  gm_timpani: [
    // Timpani: Strings
    "0470_Aspirin_sf2_file",
    "0470_Chaos_sf2_file",
    "0470_FluidR3_GM_sf2_file",
    "0470_GeneralUserGS_sf2_file",
    // 0470_JCLive_sf2_file // wrong pitches
    //0470_SBLive_sf2
    //0470_SoundBlasterOld_sf2
    "0471_FluidR3_GM_sf2_file",
    "0471_GeneralUserGS_sf2_file"
  ],
  gm_string_ensemble_1: [
    // String Ensemble 1: Ensemble
    "0480_Aspirin_sf2_file",
    "0480_Chaos_sf2_file",
    "0480_FluidR3_GM_sf2_file",
    "0480_GeneralUserGS_sf2_file",
    "0480_JCLive_sf2_file",
    //0480_SBLive_sf2
    //0480_SoundBlasterOld_sf2
    // these dont work..
    //04810_GeneralUserGS_sf2_file // missing notes + brass
    //04811_GeneralUserGS_sf2_file  // missing notes + brass
    //04812_GeneralUserGS_sf2_file
    //04813_GeneralUserGS_sf2_file
    //04814_GeneralUserGS_sf2_file
    //04815_GeneralUserGS_sf2_file
    //04816_GeneralUserGS_sf2_file
    //04817_GeneralUserGS_sf2_file
    "0481_Aspirin_sf2_file",
    "0481_FluidR3_GM_sf2_file",
    "0481_GeneralUserGS_sf2_file",
    "0482_Aspirin_sf2_file",
    "0482_GeneralUserGS_sf2_file",
    "0483_GeneralUserGS_sf2_file"
    // another block of buggyness:
    //0484_GeneralUserGS_sf2_file // keys?! + knackt
    //0485_GeneralUserGS_sf2_file // missing notes
    //0486_GeneralUserGS_sf2_file
    //0487_GeneralUserGS_sf2_file
    //0488_GeneralUserGS_sf2_file
    //0489_GeneralUserGS_sf2_fil
  ],
  gm_string_ensemble_2: [
    // String Ensemble 2: Ensemble
    "0490_Aspirin_sf2_file",
    "0490_Chaos_sf2_file",
    "0490_FluidR3_GM_sf2_file",
    "0490_GeneralUserGS_sf2_file",
    "0490_JCLive_sf2_file",
    //0490_SBLive_sf2
    //0490_SoundBlasterOld_sf2
    "0491_GeneralUserGS_sf2_file",
    "0492_GeneralUserGS_sf2_file"
  ],
  gm_synth_strings_1: [
    // Synth Strings 1: Ensemble
    "0500_Aspirin_sf2_file",
    // 0500_Chaos_sf2_file // same as above
    //0500_FluidR3_GM_sf2_file // detune + knack
    "0500_GeneralUserGS_sf2_file",
    "0500_JCLive_sf2_file",
    //0500_SBLive_sf2
    //0500_SoundBlasterOld_sf2
    "0501_FluidR3_GM_sf2_file",
    // 0501_GeneralUserGS_sf2_file // crackles
    // 0502_FluidR3_GM_sf2_file // missing
    "0502_GeneralUserGS_sf2_file",
    "0503_FluidR3_GM_sf2_file",
    // 0504_FluidR3_GM_sf2_file // missing
    "0505_FluidR3_GM_sf2_file"
  ],
  gm_synth_strings_2: [
    // Synth Strings 2: Ensemble
    "0510_Aspirin_sf2_file",
    "0510_Chaos_sf2_file",
    // 0510_FluidR3_GM_sf2_file // detune + crackle
    "0510_GeneralUserGS_sf2_file",
    //0510_JCLive_sf2_file // laarge and meh
    //0510_SBLive_sf2 // missing
    //0510_SoundBlasterOld_sf2
    "0511_GeneralUserGS_sf2_file"
    //0511_SoundBlasterOld_sf
  ],
  gm_choir_aahs: [
    // Choir Aahs: Ensemble
    "0520_Aspirin_sf2_file",
    "0520_Chaos_sf2_file",
    "0520_FluidR3_GM_sf2_file",
    "0520_GeneralUserGS_sf2_file",
    "0520_JCLive_sf2_file",
    //0520_SBLive_sf2
    "0520_Soul_Ahhs_sf2_file",
    //0520_SoundBlasterOld_sf2
    "0521_FluidR3_GM_sf2_file",
    "0521_Soul_Ahhs_sf2_file",
    //0521_SoundBlasterOld_sf2
    "0522_Soul_Ahhs_sf2_file"
  ],
  gm_voice_oohs: [
    // Voice Oohs: Ensemble
    "0530_Aspirin_sf2_file",
    "0530_Chaos_sf2_file",
    "0530_FluidR3_GM_sf2_file",
    "0530_GeneralUserGS_sf2_file",
    //0530_JCLive_sf2_file // same as above
    //0530_SBLive_sf2
    // 0530_Soul_Ahhs_sf2_file // not ooh
    //0530_SoundBlasterOld_sf2
    "0531_FluidR3_GM_sf2_file",
    // 0531_GeneralUserGS_sf2_file // ends crackle
    "0531_JCLive_sf2_file"
    //0531_SoundBlasterOld_sf
  ],
  gm_synth_choir: [
    // Synth Choir: Ensemble
    "0540_Aspirin_sf2_file",
    "0540_Chaos_sf2_file",
    "0540_FluidR3_GM_sf2_file",
    "0540_GeneralUserGS_sf2_file",
    //0540_JCLive_sf2_file // large + crackles
    //0540_SBLive_sf2
    //0540_SoundBlasterOld_sf2
    "0541_FluidR3_GM_sf2_file"
  ],
  gm_orchestra_hit: [
    // Orchestra Hit: Ensemble
    "0550_Aspirin_sf2_file",
    "0550_Chaos_sf2_file",
    "0550_FluidR3_GM_sf2_file",
    "0550_GeneralUserGS_sf2_file",
    //0550_JCLive_sf2_file // same as above
    //0550_SBLive_sf2
    //0550_SoundBlasterOld_sf2
    //0551_Aspirin_sf2_file // not an orch hit..
    "0551_FluidR3_GM_sf2_file"
  ],
  gm_trumpet: [
    // Trumpet: Brass
    "0560_FluidR3_GM_sf2_file",
    "0560_JCLive_sf2_file",
    "0560_Aspirin_sf2_file",
    "0560_Chaos_sf2_file"
    //0560_GeneralUserGS_sf2_file // _1 oct
    //0560_SBLive_sf2
    //0560_SoundBlasterOld_sf
  ],
  gm_trombone: [
    // Trombone: Brass
    "0570_Aspirin_sf2_file",
    "0570_Chaos_sf2_file",
    "0570_FluidR3_GM_sf2_file",
    "0570_GeneralUserGS_sf2_file",
    //0570_JCLive_sf2_file // _1oct
    //0570_SBLive_sf2
    //0570_SoundBlasterOld_sf2
    "0571_GeneralUserGS_sf2_file"
  ],
  gm_tuba: [
    // Tuba: Brass
    "0580_FluidR3_GM_sf2_file",
    "0580_Aspirin_sf2_file",
    "0580_Chaos_sf2_file",
    "0580_GeneralUserGS_sf2_file"
    //0580_JCLive_sf2_file // _1oct
    //0580_SBLive_sf2
    //0580_SoundBlasterOld_sf2
    //0581_GeneralUserGS_sf2_file // missin
  ],
  gm_muted_trumpet: [
    // Muted Trumpet: Brass
    "0590_JCLive_sf2_file",
    "0590_Aspirin_sf2_file",
    "0590_Chaos_sf2_file",
    "0590_FluidR3_GM_sf2_file",
    "0590_GeneralUserGS_sf2_file"
    //0590_SBLive_sf2
    //0590_SoundBlasterOld_sf2
    // 0591_GeneralUserGS_sf2_file // missin
  ],
  gm_french_horn: [
    // French Horn: Brass
    "0600_Aspirin_sf2_file",
    //0600_Chaos_sf2_file // weird jumps
    "0600_FluidR3_GM_sf2_file",
    "0600_GeneralUserGS_sf2_file",
    "0600_JCLive_sf2_file",
    //0600_SBLive_sf2
    //0600_SoundBlasterOld_sf2
    "0601_FluidR3_GM_sf2_file"
    //0601_GeneralUserGS_sf2_file // tiny crackles
    // 0602_GeneralUserGS_sf2_file // bad gain diffs
    // 0603_GeneralUserGS_sf2_file // tiny crackle
  ],
  gm_brass_section: [
    // Brass Section: Brass
    "0610_JCLive_sf2_file",
    "0610_Aspirin_sf2_file",
    "0610_Chaos_sf2_file",
    "0610_FluidR3_GM_sf2_file",
    "0610_GeneralUserGS_sf2_file"
    //0610_SBLive_sf2
    //0610_SoundBlasterOld_sf2
    // 0611_GeneralUserGS_sf2_file // missing sounds
    // 0612_GeneralUserGS_sf2_file
    //0613_GeneralUserGS_sf2_file // _1 oct
    // 0614_GeneralUserGS_sf2_file // missing sounds
    // 0615_GeneralUserGS_sf2_file // missing sound
  ],
  gm_synth_brass_1: [
    // Synth Brass 1: Brass
    "0620_Aspirin_sf2_file",
    //0620_Chaos_sf2_file // weird gain diff
    "0620_FluidR3_GM_sf2_file",
    //0620_GeneralUserGS_sf2_file // loooud
    // 0620_JCLive_sf2_file // weird gain diff
    //0620_SBLive_sf2
    //0620_SoundBlasterOld_sf2
    "0621_Aspirin_sf2_file",
    "0621_FluidR3_GM_sf2_file"
    // 0621_GeneralUserGS_sf2_file // detune + loooud
    //0622_FluidR3_GM_sf2_file // loud..
    //0622_GeneralUserGS_sf2_file // loud + crackle
  ],
  gm_synth_brass_2: [
    // Synth Brass 2: Brass
    "0630_Aspirin_sf2_file",
    "0630_Chaos_sf2_file",
    "0630_FluidR3_GM_sf2_file",
    //0630_GeneralUserGS_sf2_file // detune + looud
    "0630_JCLive_sf2_file",
    //0630_SBLive_sf2
    //0630_SoundBlasterOld_sf2
    // 0631_Aspirin_sf2_file // looud + detune + gain diffs
    "0631_FluidR3_GM_sf2_file",
    //0631_GeneralUserGS_sf2_file // crackles
    "0632_FluidR3_GM_sf2_file",
    "0633_FluidR3_GM_sf2_file"
  ],
  gm_soprano_sax: [
    // Soprano Sax: Reed
    "0640_JCLive_sf2_file",
    "0640_Aspirin_sf2_file",
    "0640_Chaos_sf2_file",
    "0640_FluidR3_GM_sf2_file",
    // 0640_GeneralUserGS_sf2_file // crackles
    //0640_SBLive_sf2
    //0640_SoundBlasterOld_sf2
    "0641_FluidR3_GM_sf2_file"
  ],
  gm_alto_sax: [
    // Alto Sax: Reed
    //0650_Aspirin_sf2_file // this is not an alto sax
    "0650_JCLive_sf2_file",
    "0650_Chaos_sf2_file",
    "0650_FluidR3_GM_sf2_file",
    "0650_GeneralUserGS_sf2_file",
    //0650_SBLive_sf2
    //0650_SoundBlasterOld_sf2
    "0651_Aspirin_sf2_file",
    "0651_FluidR3_GM_sf2_file"
  ],
  gm_tenor_sax: [
    // Tenor Sax: Reed
    "0660_JCLive_sf2_file",
    "0660_Aspirin_sf2_file",
    "0660_Chaos_sf2_file",
    //0660_FluidR3_GM_sf2_file // weird pitches
    "0660_GeneralUserGS_sf2_file"
    //0660_SBLive_sf2
    //0660_SoundBlasterOld_sf2
    // 0661_FluidR3_GM_sf2_file // weird pitches
    // 0661_GeneralUserGS_sf2_file // missin
  ],
  gm_baritone_sax: [
    // Baritone Sax: Reed
    "0670_JCLive_sf2_file",
    "0670_Aspirin_sf2_file",
    "0670_Chaos_sf2_file",
    "0670_FluidR3_GM_sf2_file",
    "0670_GeneralUserGS_sf2_file",
    //0670_SBLive_sf2
    //0670_SoundBlasterOld_sf2
    "0671_FluidR3_GM_sf2_file"
  ],
  gm_oboe: [
    // Oboe: Reed
    //0680_Aspirin_sf2_file // tiny crackles
    "0680_JCLive_sf2_file",
    "0680_Chaos_sf2_file",
    "0680_FluidR3_GM_sf2_file",
    "0680_GeneralUserGS_sf2_file",
    //0680_SBLive_sf2
    //0680_SoundBlasterOld_sf2
    "0681_FluidR3_GM_sf2_file"
  ],
  gm_english_horn: [
    // English Horn: Reed
    "0690_JCLive_sf2_file",
    "0690_Aspirin_sf2_file",
    //0690_Chaos_sf2_file // detuned
    "0690_FluidR3_GM_sf2_file",
    //0690_GeneralUserGS_sf2_file // +1 oct
    //0690_SBLive_sf2
    //0690_SoundBlasterOld_sf2
    "0691_FluidR3_GM_sf2_file"
  ],
  gm_bassoon: [
    // Bassoon: Reed
    "0700_JCLive_sf2_file",
    //0700_Aspirin_sf2_file // detune + gain diffs
    // 0700_Chaos_sf2_file // detune + crackles
    "0700_FluidR3_GM_sf2_file",
    "0700_GeneralUserGS_sf2_file",
    //0700_SBLive_sf2
    //0700_SoundBlasterOld_sf2
    "0701_FluidR3_GM_sf2_file"
    //0701_GeneralUserGS_sf2_file // missin
  ],
  gm_clarinet: [
    // Clarinet: Reed
    "0710_JCLive_sf2_file",
    "0710_Aspirin_sf2_file",
    "0710_Chaos_sf2_file",
    "0710_FluidR3_GM_sf2_file",
    "0710_GeneralUserGS_sf2_file",
    //0710_SBLive_sf2
    //0710_SoundBlasterOld_sf2
    "0711_FluidR3_GM_sf2_file"
  ],
  gm_piccolo: [
    // Piccolo: Pipe
    "0720_JCLive_sf2_file",
    "0720_Aspirin_sf2_file",
    // 0720_Chaos_sf2_file // not a piccolo
    "0720_FluidR3_GM_sf2_file",
    "0720_GeneralUserGS_sf2_file",
    //0720_SBLive_sf2
    //0720_SoundBlasterOld_sf2
    "0721_FluidR3_GM_sf2_file"
    //0721_SoundBlasterOld_sf
  ],
  gm_flute: [
    // Flute: Pipe
    "0730_JCLive_sf2_file",
    "0730_Aspirin_sf2_file",
    //0730_Chaos_sf2_file // etune
    "0730_FluidR3_GM_sf2_file",
    "0730_GeneralUserGS_sf2_file",
    //0730_SBLive_sf2
    //0730_SoundBlasterOld_sf2
    //0731_Aspirin_sf2_file // not a flute
    "0731_FluidR3_GM_sf2_file"
    //0731_SoundBlasterOld_sf
  ],
  gm_recorder: [
    // Recorder: Pipe
    "0740_JCLive_sf2_file",
    "0740_Aspirin_sf2_file",
    "0740_Chaos_sf2_file",
    "0740_FluidR3_GM_sf2_file",
    "0740_GeneralUserGS_sf2_file"
    //0740_SBLive_sf2
    //0740_SoundBlasterOld_sf2
    // 0741_GeneralUserGS_sf2_file // missin
  ],
  gm_pan_flute: [
    // Pan Flute: Pipe
    "0750_JCLive_sf2_file",
    "0750_FluidR3_GM_sf2_file",
    "0750_Aspirin_sf2_file",
    "0750_Chaos_sf2_file",
    "0750_GeneralUserGS_sf2_file",
    //0750_SBLive_sf2
    //0750_SoundBlasterOld_sf2
    "0751_Aspirin_sf2_file",
    "0751_FluidR3_GM_sf2_file",
    "0751_GeneralUserGS_sf2_file"
    //0751_SoundBlasterOld_sf
  ],
  gm_blown_bottle: [
    // Blown bottle: Pipe
    "0760_FluidR3_GM_sf2_file",
    "0760_JCLive_sf2_file",
    // 0760_Aspirin_sf2_file // same as below w crackle
    "0760_Chaos_sf2_file",
    "0760_GeneralUserGS_sf2_file",
    //0760_SBLive_sf2
    //0760_SoundBlasterOld_sf2
    "0761_FluidR3_GM_sf2_file"
    // 0761_GeneralUserGS_sf2_file // missing
    //0761_SoundBlasterOld_sf2
    // 0762_GeneralUserGS_sf2_file // missin
  ],
  gm_shakuhachi: [
    // Shakuhachi: Pipe
    "0770_JCLive_sf2_file",
    "0771_FluidR3_GM_sf2_file",
    "0770_Aspirin_sf2_file",
    //0770_Chaos_sf2_file // not shakuhachi
    "0770_FluidR3_GM_sf2_file",
    "0770_GeneralUserGS_sf2_file"
    //0770_SBLive_sf2
    //0770_SoundBlasterOld_sf2
    // 0771_GeneralUserGS_sf2_file // missing
    // 0772_GeneralUserGS_sf2_file // missin
  ],
  gm_whistle: [
    // Whistle: Pipe
    "0780_FluidR3_GM_sf2_file",
    "0780_JCLive_sf2_file",
    "0780_Aspirin_sf2_file",
    "0780_Chaos_sf2_file"
    //0780_GeneralUserGS_sf2_file // loud..
    //0780_SBLive_sf2
    //0780_SoundBlasterOld_sf2
    // 0781_GeneralUserGS_sf2_file // detune + crackle
  ],
  gm_ocarina: [
    // Ocarina: Pipe
    "0790_FluidR3_GM_sf2_file",
    "0790_JCLive_sf2_file",
    "0790_Aspirin_sf2_file",
    //0790_Chaos_sf2_file // same as above
    "0790_GeneralUserGS_sf2_file"
    //0790_SBLive_sf2
    //0790_SoundBlasterOld_sf2
    //0791_GeneralUserGS_sf2_file // missin
  ],
  gm_lead_1_square: [
    // Lead 1 (square): Synth Lead
    "0800_Aspirin_sf2_file",
    "0800_Chaos_sf2_file",
    "0800_FluidR3_GM_sf2_file"
    // 0800_GeneralUserGS_sf2_file // detuned
    // 0800_JCLive_sf2_file // detuned
    //0800_SBLive_sf2
    //0800_SoundBlasterOld_sf2
    //0801_FluidR3_GM_sf2_file // detune
    // 0801_GeneralUserGS_sf2_file // detun
  ],
  gm_lead_2_sawtooth: [
    // Lead 2 (sawtooth): Synth Lead
    "0810_JCLive_sf2_file",
    "0810_Aspirin_sf2_file",
    "0810_Chaos_sf2_file",
    "0810_FluidR3_GM_sf2_file",
    "0810_GeneralUserGS_sf2_file",
    //0810_SBLive_sf2
    //0810_SoundBlasterOld_sf2
    "0811_Aspirin_sf2_file",
    "0811_GeneralUserGS_sf2_file"
    //0811_SoundBlasterOld_sf
  ],
  gm_lead_3_calliope: [
    // Lead 3 (calliope): Synth Lead
    "0820_JCLive_sf2_file",
    "0820_Aspirin_sf2_file",
    "0820_Chaos_sf2_file",
    "0820_FluidR3_GM_sf2_file",
    "0820_GeneralUserGS_sf2_file",
    //0820_SBLive_sf2
    //0820_SoundBlasterOld_sf2
    "0821_FluidR3_GM_sf2_file",
    "0821_GeneralUserGS_sf2_file"
    //0821_SoundBlasterOld_sf2
    // 0822_GeneralUserGS_sf2_file // missing
    //0823_GeneralUserGS_sf2_file // missin
  ],
  gm_lead_4_chiff: [
    // Lead 4 (chiff): Synth Lead
    "0830_JCLive_sf2_file",
    "0830_Aspirin_sf2_file",
    // 0830_Chaos_sf2_file // same as above
    "0830_FluidR3_GM_sf2_file",
    "0830_GeneralUserGS_sf2_file",
    //0830_SBLive_sf2
    //0830_SoundBlasterOld_sf2
    "0831_FluidR3_GM_sf2_file",
    "0831_GeneralUserGS_sf2_file"
    //0831_SoundBlasterOld_sf
  ],
  gm_lead_5_charang: [
    // Lead 5 (charang): Synth Lead
    "0840_JCLive_sf2_file",
    "0840_FluidR3_GM_sf2_file",
    "0840_Aspirin_sf2_file",
    "0840_Chaos_sf2_file",
    "0840_GeneralUserGS_sf2_file",
    //0840_SBLive_sf2
    //0840_SoundBlasterOld_sf2
    "0841_Aspirin_sf2_file",
    "0841_Chaos_sf2_file",
    "0841_FluidR3_GM_sf2_file",
    "0841_GeneralUserGS_sf2_file",
    //0841_JCLive_sf2_file // +1oct + detune
    //0841_SoundBlasterOld_sf2
    "0842_FluidR3_GM_sf2_file"
  ],
  gm_lead_6_voice: [
    // Lead 6 (voice): Synth Lead
    "0850_JCLive_sf2_file",
    "0850_Aspirin_sf2_file",
    // 0850_Chaos_sf2_file // same as above
    "0850_FluidR3_GM_sf2_file",
    // 0850_GeneralUserGS_sf2_file // no voice
    //0850_SBLive_sf2
    //0850_SoundBlasterOld_sf2
    "0851_FluidR3_GM_sf2_file",
    "0851_GeneralUserGS_sf2_file",
    "0851_JCLive_sf2_file"
    //0851_SoundBlasterOld_sf
  ],
  gm_lead_7_fifths: [
    // Lead 7 (fifths): Synth Lead
    "0860_JCLive_sf2_file",
    "0860_Aspirin_sf2_file",
    "0860_Chaos_sf2_file",
    // 0860_FluidR3_GM_sf2_file // loud and not fitting
    "0860_GeneralUserGS_sf2_file",
    //0860_SBLive_sf2
    //0860_SoundBlasterOld_sf2
    "0861_Aspirin_sf2_file"
    // 0861_FluidR3_GM_sf2_file // lout and not fitting
    //0861_SoundBlasterOld_sf
  ],
  gm_lead_8_bass_lead: [
    // Lead 8 (bass + lead): Synth Lead
    "0870_JCLive_sf2_file",
    "0870_Aspirin_sf2_file",
    "0870_Chaos_sf2_file",
    "0870_FluidR3_GM_sf2_file",
    "0870_GeneralUserGS_sf2_file"
    //0870_SBLive_sf2
    //0870_SoundBlasterOld_sf2
    // 0871_GeneralUserGS_sf2_file // loud + detune
    //0872_GeneralUserGS_sf2_file // loud
    //0873_GeneralUserGS_sf2_file // lou
  ],
  gm_pad_new_age: [
    // Pad 1 (new age): Synth Pad
    "0880_JCLive_sf2_file",
    "0880_Aspirin_sf2_file",
    "0880_Chaos_sf2_file",
    "0880_FluidR3_GM_sf2_file",
    "0880_GeneralUserGS_sf2_file",
    //0880_SBLive_sf2
    //0880_SoundBlasterOld_sf2
    "0881_Aspirin_sf2_file",
    "0881_FluidR3_GM_sf2_file",
    "0881_GeneralUserGS_sf2_file",
    //0881_SoundBlasterOld_sf2
    "0882_Aspirin_sf2_file",
    // 0882_FluidR3_GM_sf2_file // missing
    "0882_GeneralUserGS_sf2_file",
    //0883_GeneralUserGS_sf2_file // missing
    // 0884_GeneralUserGS_sf2_file // broken
    "0885_GeneralUserGS_sf2_file",
    //0886_GeneralUserGS_sf2_file // not a pad
    "0887_GeneralUserGS_sf2_file"
    //0888_GeneralUserGS_sf2_file // not a pad
    //0889_GeneralUserGS_sf2_file // not a pa
  ],
  gm_pad_warm: [
    // Pad 2 (warm): Synth Pad
    "0890_JCLive_sf2_file",
    "0890_Aspirin_sf2_file",
    "0890_Chaos_sf2_file",
    "0890_FluidR3_GM_sf2_file",
    "0890_GeneralUserGS_sf2_file",
    //0890_SBLive_sf2
    //0890_SoundBlasterOld_sf2
    "0891_Aspirin_sf2_file",
    "0891_FluidR3_GM_sf2_file"
    // 0891_GeneralUserGS_sf2_file // nois
  ],
  gm_pad_poly: [
    // Pad 3 (polysynth): Synth Pad
    //0900_Aspirin_sf2_file // same as belo
    "0900_JCLive_sf2_file",
    "0900_Chaos_sf2_file",
    "0900_FluidR3_GM_sf2_file",
    "0900_GeneralUserGS_sf2_file",
    //0900_SBLive_sf2
    //0900_SoundBlasterOld_sf2
    "0901_Aspirin_sf2_file",
    "0901_FluidR3_GM_sf2_file",
    "0901_GeneralUserGS_sf2_file"
    //0901_SoundBlasterOld_sf
  ],
  gm_pad_choir: [
    // Pad 4 (choir): Synth Pad
    "0910_FluidR3_GM_sf2_file",
    "0910_JCLive_sf2_file",
    "0910_Aspirin_sf2_file",
    //0910_Chaos_sf2_file // +1oct
    "0910_GeneralUserGS_sf2_file",
    //0910_SBLive_sf2
    //0910_SoundBlasterOld_sf2
    // 0911_Aspirin_sf2_file // fluty crackles
    "0911_GeneralUserGS_sf2_file",
    "0911_JCLive_sf2_file"
    //0911_SoundBlasterOld_sf
  ],
  gm_pad_bowed: [
    // Pad 5 (bowed): Synth Pad
    "0920_JCLive_sf2_file",
    "0920_Aspirin_sf2_file",
    //0920_Chaos_sf2_file // same as above
    //0920_FluidR3_GM_sf2_file // detuned?
    "0920_GeneralUserGS_sf2_file",
    //0920_SBLive_sf2
    //0920_SoundBlasterOld_sf2
    "0921_Aspirin_sf2_file",
    "0921_GeneralUserGS_sf2_file"
    //0921_SoundBlasterOld_sf
  ],
  gm_pad_metallic: [
    // Pad 6 (metallic): Synth Pad
    "0930_Aspirin_sf2_file",
    "0930_Chaos_sf2_file",
    "0930_FluidR3_GM_sf2_file",
    "0930_GeneralUserGS_sf2_file",
    // 0930_JCLive_sf2_file // buggy zones: guitar / synth
    //0930_SBLive_sf2
    //0930_SoundBlasterOld_sf2
    "0931_Aspirin_sf2_file",
    "0931_FluidR3_GM_sf2_file",
    "0931_GeneralUserGS_sf2_file"
    //0931_SoundBlasterOld_sf
  ],
  gm_pad_halo: [
    // Pad 7 (halo): Synth Pad
    // 0940_Aspirin_sf2_file // same as below
    "0940_Chaos_sf2_file",
    "0940_FluidR3_GM_sf2_file",
    "0940_GeneralUserGS_sf2_file",
    "0940_JCLive_sf2_file",
    //0940_SBLive_sf2
    //0940_SoundBlasterOld_sf2
    "0941_Aspirin_sf2_file",
    "0941_FluidR3_GM_sf2_file",
    "0941_GeneralUserGS_sf2_file",
    "0941_JCLive_sf2_file"
  ],
  gm_pad_sweep: [
    // Pad 8 (sweep): Synth Pad
    "0950_Aspirin_sf2_file",
    "0950_Chaos_sf2_file",
    "0950_FluidR3_GM_sf2_file",
    "0950_GeneralUserGS_sf2_file",
    "0950_JCLive_sf2_file",
    //0950_SBLive_sf2
    //0950_SoundBlasterOld_sf2
    "0951_FluidR3_GM_sf2_file",
    "0951_GeneralUserGS_sf2_file"
  ],
  gm_fx_rain: [
    // FX 1 (rain): Synth Effects
    //0960_Aspirin_sf2_file //mixed samples?
    "0960_FluidR3_GM_sf2_file",
    "0960_Chaos_sf2_file",
    "0960_GeneralUserGS_sf2_file",
    // 0960_JCLive_sf2_file // mixed samples?
    //0960_SBLive_sf2
    //0960_SoundBlasterOld_sf2
    "0961_Aspirin_sf2_file",
    "0961_FluidR3_GM_sf2_file",
    // 0961_GeneralUserGS_sf2_file // ?!?!
    //0961_SoundBlasterOld_sf2
    "0962_GeneralUserGS_sf2_file"
  ],
  gm_fx_soundtrack: [
    // FX 2 (soundtrack): Synth Effects
    "0970_FluidR3_GM_sf2_file",
    "0970_Aspirin_sf2_file",
    //0970_Chaos_sf2_file // wrong pitch
    "0970_GeneralUserGS_sf2_file",
    //0970_JCLive_sf2_file // wrong pitch
    //0970_SBLive_sf2
    //0970_SoundBlasterOld_sf2
    "0971_FluidR3_GM_sf2_file",
    "0971_GeneralUserGS_sf2_file"
    //0971_SoundBlasterOld_sf
  ],
  gm_fx_crystal: [
    // FX 3 (crystal): Synth Effects
    "0980_Aspirin_sf2_file",
    "0980_JCLive_sf2_file",
    "0980_Chaos_sf2_file",
    // 0980_FluidR3_GM_sf2_file // some notes are weird
    "0980_GeneralUserGS_sf2_file",
    "0981_FluidR3_GM_sf2_file",
    //0980_SBLive_sf2
    //0980_SoundBlasterOld_sf2
    "0981_Aspirin_sf2_file",
    "0981_GeneralUserGS_sf2_file",
    //0981_SoundBlasterOld_sf2
    "0982_GeneralUserGS_sf2_file",
    "0983_GeneralUserGS_sf2_file",
    "0984_GeneralUserGS_sf2_file"
  ],
  gm_fx_atmosphere: [
    // FX 4 (atmosphere): Synth Effects
    "0990_JCLive_sf2_file",
    "0990_Aspirin_sf2_file",
    "0990_Chaos_sf2_file",
    "0990_FluidR3_GM_sf2_file",
    "0990_GeneralUserGS_sf2_file",
    //0990_SBLive_sf2
    //0990_SoundBlasterOld_sf2
    "0991_Aspirin_sf2_file",
    "0991_FluidR3_GM_sf2_file",
    "0991_GeneralUserGS_sf2_file",
    "0991_JCLive_sf2_file",
    //0991_SoundBlasterOld_sf2
    "0992_FluidR3_GM_sf2_file",
    "0992_JCLive_sf2_file",
    "0993_JCLive_sf2_file",
    "0994_JCLive_sf2_file"
  ],
  gm_fx_brightness: [
    // FX 5 (brightness): Synth Effects
    "1000_JCLive_sf2_file",
    "1000_Aspirin_sf2_file",
    "1000_Chaos_sf2_file",
    "1000_FluidR3_GM_sf2_file",
    "1000_GeneralUserGS_sf2_file",
    //1000_SBLive_sf2
    //1000_SoundBlasterOld_sf2
    "1001_Aspirin_sf2_file",
    "1001_FluidR3_GM_sf2_file",
    "1001_GeneralUserGS_sf2_file",
    "1001_JCLive_sf2_file",
    //1001_SoundBlasterOld_sf2
    "1002_Aspirin_sf2_file",
    "1002_FluidR3_GM_sf2_file",
    "1002_GeneralUserGS_sf2_file"
  ],
  gm_fx_goblins: [
    // FX 6 (goblins): Synth Effects
    "1010_FluidR3_GM_sf2_file",
    "1010_JCLive_sf2_file",
    "1010_Aspirin_sf2_file",
    "1010_Chaos_sf2_file",
    "1010_GeneralUserGS_sf2_file",
    //1010_SBLive_sf2
    //1010_SoundBlasterOld_sf2
    "1011_Aspirin_sf2_file",
    "1011_FluidR3_GM_sf2_file",
    "1011_JCLive_sf2_file",
    "1012_Aspirin_sf2_file"
  ],
  gm_fx_echoes: [
    // FX 7 (echoes): Synth Effects
    "1020_FluidR3_GM_sf2_file",
    "1020_JCLive_sf2_file",
    "1020_Aspirin_sf2_file",
    "1020_Chaos_sf2_file",
    "1020_GeneralUserGS_sf2_file",
    //1020_SBLive_sf2
    //1020_SoundBlasterOld_sf2
    "1021_Aspirin_sf2_file",
    "1021_FluidR3_GM_sf2_file",
    "1021_GeneralUserGS_sf2_file",
    "1021_JCLive_sf2_file",
    //1021_SoundBlasterOld_sf2
    "1022_GeneralUserGS_sf2_file"
  ],
  gm_fx_sci_fi: [
    // FX 8 (sci_fi): Synth Effects
    "1030_FluidR3_GM_sf2_file",
    "1030_Aspirin_sf2_file",
    "1030_Chaos_sf2_file",
    "1030_GeneralUserGS_sf2_file",
    "1030_JCLive_sf2_file",
    //1030_SBLive_sf2
    //1030_SoundBlasterOld_sf2
    "1031_Aspirin_sf2_file",
    "1031_FluidR3_GM_sf2_file",
    "1031_GeneralUserGS_sf2_file",
    //1031_SoundBlasterOld_sf2
    "1032_FluidR3_GM_sf2_file"
  ],
  gm_sitar: [
    // Sitar: Ethnic
    "1040_Aspirin_sf2_file",
    "1040_FluidR3_GM_sf2_file",
    "1040_JCLive_sf2_file",
    "1040_Chaos_sf2_file",
    "1040_GeneralUserGS_sf2_file",
    //1040_SBLive_sf2
    //1040_SoundBlasterOld_sf2
    "1041_FluidR3_GM_sf2_file",
    "1041_GeneralUserGS_sf2_file"
  ],
  gm_banjo: [
    // Banjo: Ethnic
    "1050_FluidR3_GM_sf2_file",
    "1050_JCLive_sf2_file",
    "1050_Aspirin_sf2_file",
    "1050_Chaos_sf2_file",
    "1050_GeneralUserGS_sf2_file",
    //1050_SBLive_sf2
    //1050_SoundBlasterOld_sf2
    "1051_GeneralUserGS_sf2_file"
  ],
  gm_shamisen: [
    // Shamisen: Ethnic
    "1060_JCLive_sf2_file",
    "1060_FluidR3_GM_sf2_file",
    "1060_Aspirin_sf2_file",
    "1060_Chaos_sf2_file",
    "1060_GeneralUserGS_sf2_file",
    //1060_SBLive_sf2
    //1060_SoundBlasterOld_sf2
    "1061_FluidR3_GM_sf2_file",
    "1061_GeneralUserGS_sf2_file"
    //1061_SoundBlasterOld_sf
  ],
  gm_koto: [
    // Koto: Ethnic
    "1070_FluidR3_GM_sf2_file",
    "1070_JCLive_sf2_file",
    "1070_Aspirin_sf2_file",
    "1070_Chaos_sf2_file",
    "1070_GeneralUserGS_sf2_file",
    //1070_SBLive_sf2
    //1070_SoundBlasterOld_sf2
    "1071_FluidR3_GM_sf2_file",
    "1071_GeneralUserGS_sf2_file",
    "1072_GeneralUserGS_sf2_file",
    "1073_GeneralUserGS_sf2_file"
  ],
  gm_kalimba: [
    // Kalimba: Ethnic
    "1080_JCLive_sf2_file",
    "1080_FluidR3_GM_sf2_file",
    "1080_Aspirin_sf2_file",
    "1080_Chaos_sf2_file",
    "1080_GeneralUserGS_sf2_file"
    //1080_SBLive_sf2
    //1080_SoundBlasterOld_sf2
    //1081_SoundBlasterOld_sf
  ],
  gm_bagpipe: [
    // Bagpipe: Ethnic
    "1090_Aspirin_sf2_file"
    // '1090_Chaos_sf2_file', // broken pitches
    // '1090_GeneralUserGS_sf2_file', // broken pitches
    // '1090_FluidR3_GM_sf2_file', // broken pitches ?
    // '1090_JCLive_sf2_file', // broken pitches ?
    //1090_SBLive_sf2
    //1090_SoundBlasterOld_sf2
    //1091_SoundBlasterOld_sf
  ],
  gm_fiddle: [
    // Fiddle: Ethnic
    "1100_JCLive_sf2_file",
    "1100_Aspirin_sf2_file",
    "1100_Chaos_sf2_file",
    "1100_FluidR3_GM_sf2_file",
    "1100_GeneralUserGS_sf2_file",
    //1100_SBLive_sf2
    //1100_SoundBlasterOld_sf2
    "1101_Aspirin_sf2_file",
    "1101_FluidR3_GM_sf2_file",
    "1101_GeneralUserGS_sf2_file",
    "1102_GeneralUserGS_sf2_file"
  ],
  gm_shanai: [
    // Shanai: Ethnic
    "1110_Aspirin_sf2_file",
    "1110_FluidR3_GM_sf2_file",
    "1110_JCLive_sf2_file",
    "1110_Chaos_sf2_file",
    "1110_GeneralUserGS_sf2_file"
    //1110_SBLive_sf2
    //1110_SoundBlasterOld_sf
  ],
  gm_tinkle_bell: [
    // Tinkle Bell: Percussive
    "1120_Aspirin_sf2_file"
    // '1120_Chaos_sf2_file', // same as above
    // '1120_GeneralUserGS_sf2_file', // sounds exactly as Aspirin
    // '1120_FluidR3_GM_sf2_file', // +1oct
    // '1120_JCLive_sf2_file', // +1oct
    //1120_SBLive_sf2
    //1120_SoundBlasterOld_sf2
    //1121_SoundBlasterOld_sf
  ],
  gm_agogo: [
    // Agogo: Percussive
    "1130_JCLive_sf2_file",
    "1130_Aspirin_sf2_file",
    "1130_Chaos_sf2_file",
    "1130_FluidR3_GM_sf2_file",
    "1130_GeneralUserGS_sf2_file",
    //1130_SBLive_sf2
    //1130_SoundBlasterOld_sf2
    "1131_FluidR3_GM_sf2_file"
    //1131_SoundBlasterOld_sf
  ],
  gm_steel_drums: [
    // Steel Drums: Percussive
    "1140_FluidR3_GM_sf2_file",
    "1140_Aspirin_sf2_file",
    "1140_JCLive_sf2_file",
    "1140_Chaos_sf2_file",
    "1140_GeneralUserGS_sf2_file",
    //1140_SBLive_sf2
    //1140_SoundBlasterOld_sf2
    "1141_FluidR3_GM_sf2_file"
  ],
  gm_woodblock: [
    // Woodblock: Percussive
    "1150_JCLive_sf2_file",
    "1150_Aspirin_sf2_file",
    "1150_Chaos_sf2_file",
    "1150_FluidR3_GM_sf2_file",
    "1150_GeneralUserGS_sf2_file",
    //1150_SBLive_sf2
    //1150_SoundBlasterOld_sf2
    "1151_FluidR3_GM_sf2_file",
    "1151_GeneralUserGS_sf2_file",
    "1152_FluidR3_GM_sf2_file",
    "1152_GeneralUserGS_sf2_file"
  ],
  gm_taiko_drum: [
    // Taiko Drum: Percussive
    "1160_JCLive_sf2_file",
    "1160_FluidR3_GM_sf2_file",
    "1160_Aspirin_sf2_file",
    "1160_Chaos_sf2_file",
    "1160_GeneralUserGS_sf2_file",
    //1160_SBLive_sf2
    //1160_SoundBlasterOld_sf2
    "1161_FluidR3_GM_sf2_file",
    "1161_GeneralUserGS_sf2_file",
    //1161_SoundBlasterOld_sf2
    "1162_FluidR3_GM_sf2_file",
    "1162_GeneralUserGS_sf2_file",
    "1163_FluidR3_GM_sf2_file"
  ],
  gm_melodic_tom: [
    // Melodic Tom: Percussive
    "1170_JCLive_sf2_file",
    "1170_Aspirin_sf2_file",
    "1170_Chaos_sf2_file",
    "1170_FluidR3_GM_sf2_file",
    "1170_GeneralUserGS_sf2_file",
    //1170_SBLive_sf2
    //1170_SoundBlasterOld_sf2
    "1171_FluidR3_GM_sf2_file",
    "1171_GeneralUserGS_sf2_file",
    "1172_FluidR3_GM_sf2_file",
    "1173_FluidR3_GM_sf2_file"
  ],
  gm_synth_drum: [
    // Synth Drum: Percussive
    "1180_JCLive_sf2_file",
    "1180_Aspirin_sf2_file",
    "1180_Chaos_sf2_file",
    "1180_FluidR3_GM_sf2_file",
    "1180_GeneralUserGS_sf2_file",
    //1180_SBLive_sf2
    //1180_SoundBlasterOld_sf2
    "1181_FluidR3_GM_sf2_file",
    "1181_GeneralUserGS_sf2_file"
    //1181_SoundBlasterOld_sf
  ],
  gm_reverse_cymbal: [
    // Reverse Cymbal: Percussive
    "1190_JCLive_sf2_file",
    "1190_Aspirin_sf2_file",
    "1190_Chaos_sf2_file",
    "1190_FluidR3_GM_sf2_file",
    "1190_GeneralUserGS_sf2_file",
    //1190_SBLive_sf2
    //1190_SoundBlasterOld_sf2
    "1191_GeneralUserGS_sf2_file",
    "1192_GeneralUserGS_sf2_file",
    "1193_GeneralUserGS_sf2_file",
    "1194_GeneralUserGS_sf2_file"
  ],
  gm_guitar_fret_noise: [
    // Guitar Fret Noise: Sound effects
    "1200_JCLive_sf2_file",
    "1200_Aspirin_sf2_file",
    "1200_Chaos_sf2_file",
    "1200_FluidR3_GM_sf2_file",
    "1200_GeneralUserGS_sf2_file",
    //1200_SBLive_sf2
    //1200_SoundBlasterOld_sf2
    "1201_Aspirin_sf2_file",
    "1201_GeneralUserGS_sf2_file",
    "1202_GeneralUserGS_sf2_file"
  ],
  gm_breath_noise: [
    // Breath Noise: Sound effects
    "1210_FluidR3_GM_sf2_file",
    "1210_JCLive_sf2_file",
    "1210_Aspirin_sf2_file",
    "1210_Chaos_sf2_file",
    "1210_GeneralUserGS_sf2_file",
    //1210_SBLive_sf2
    //1210_SoundBlasterOld_sf2
    "1211_Aspirin_sf2_file",
    "1211_GeneralUserGS_sf2_file",
    "1212_GeneralUserGS_sf2_file"
  ],
  gm_seashore: [
    // Seashore: Sound effects
    "1220_JCLive_sf2_file",
    "1220_Aspirin_sf2_file",
    "1220_Chaos_sf2_file",
    "1220_FluidR3_GM_sf2_file",
    "1220_GeneralUserGS_sf2_file",
    //1220_SBLive_sf2
    //1220_SoundBlasterOld_sf2
    "1221_Aspirin_sf2_file",
    "1221_GeneralUserGS_sf2_file",
    "1221_JCLive_sf2_file",
    "1222_Aspirin_sf2_file",
    "1222_GeneralUserGS_sf2_file",
    "1223_Aspirin_sf2_file",
    "1223_GeneralUserGS_sf2_file",
    "1224_Aspirin_sf2_file",
    "1224_GeneralUserGS_sf2_file",
    "1225_GeneralUserGS_sf2_file",
    "1226_GeneralUserGS_sf2_file"
  ],
  gm_bird_tweet: [
    // Bird Tweet: Sound effects
    "1230_FluidR3_GM_sf2_file",
    "1230_JCLive_sf2_file",
    "1230_Aspirin_sf2_file",
    // '1230_Chaos_sf2_file',
    "1230_GeneralUserGS_sf2_file",
    //1230_SBLive_sf2
    //1230_SoundBlasterOld_sf2
    //'1231_Aspirin_sf2_file',
    "1231_GeneralUserGS_sf2_file",
    // dog
    // '1232_Aspirin_sf2_file',// ?
    "1232_GeneralUserGS_sf2_file",
    // horse
    // '1233_GeneralUserGS_sf2_file', //
    "1234_GeneralUserGS_sf2_file"
    // scratch
  ],
  gm_telephone: [
    // Telephone Ring: Sound effects
    "1240_JCLive_sf2_file",
    "1240_Aspirin_sf2_file",
    "1240_Chaos_sf2_file",
    "1240_FluidR3_GM_sf2_file",
    // '1240_GeneralUserGS_sf2_file',
    //1240_SBLive_sf2
    //1240_SoundBlasterOld_sf2
    "1241_Aspirin_sf2_file",
    // door?
    //'1241_GeneralUserGS_sf2_file',
    // '1242_Aspirin_sf2_file', // ?
    "1242_GeneralUserGS_sf2_file",
    // door
    "1243_Aspirin_sf2_file",
    // scratch
    "1243_GeneralUserGS_sf2_file",
    // door close?
    "1244_Aspirin_sf2_file",
    // bells
    "1244_GeneralUserGS_sf2_file"
    // bells
  ],
  gm_helicopter: [
    // Helicopter: Sound effects
    "1250_JCLive_sf2_file",
    "1250_Aspirin_sf2_file",
    // '1250_Chaos_sf2_file', // same as above
    "1250_FluidR3_GM_sf2_file",
    "1250_GeneralUserGS_sf2_file",
    //1250_SBLive_sf2
    //1250_SoundBlasterOld_sf2
    // '1251_Aspirin_sf2_file', // slooow
    "1251_FluidR3_GM_sf2_file",
    // guitar
    "1251_GeneralUserGS_sf2_file",
    // engine start with loop at end..
    "1252_Aspirin_sf2_file",
    // alien
    "1252_FluidR3_GM_sf2_file",
    // seashore
    "1252_GeneralUserGS_sf2_file",
    // carbreak
    // '1253_Aspirin_sf2_file', // plane
    "1253_GeneralUserGS_sf2_file",
    // racing car
    // '1254_Aspirin_sf2_file',
    "1254_GeneralUserGS_sf2_file",
    // breaking
    // '1255_Aspirin_sf2_file',
    "1255_GeneralUserGS_sf2_file",
    // siren
    // '1256_Aspirin_sf2_file',
    "1256_GeneralUserGS_sf2_file",
    // hmm
    // '1257_Aspirin_sf2_file',
    "1257_GeneralUserGS_sf2_file",
    // noise
    // '1258_Aspirin_sf2_file',
    "1258_GeneralUserGS_sf2_file",
    // metallic noise
    "1259_GeneralUserGS_sf2_file"
    // watery nosie
  ],
  gm_applause: [
    // Applause: Sound effects
    "1260_JCLive_sf2_file",
    "1260_Aspirin_sf2_file",
    "1260_Chaos_sf2_file",
    "1260_FluidR3_GM_sf2_file",
    "1260_GeneralUserGS_sf2_file",
    //1260_SBLive_sf2
    //1260_SoundBlasterOld_sf2
    "1261_Aspirin_sf2_file",
    "1261_GeneralUserGS_sf2_file",
    "1262_Aspirin_sf2_file",
    "1262_GeneralUserGS_sf2_file",
    "1263_Aspirin_sf2_file",
    "1263_GeneralUserGS_sf2_file",
    "1264_Aspirin_sf2_file",
    "1264_GeneralUserGS_sf2_file",
    "1265_Aspirin_sf2_file",
    "1265_GeneralUserGS_sf2_file"
  ],
  gm_gunshot: [
    // Gunshot: Sound effects
    "1270_JCLive_sf2_file",
    "1270_Aspirin_sf2_file",
    "1270_Chaos_sf2_file",
    "1270_FluidR3_GM_sf2_file",
    "1270_GeneralUserGS_sf2_file",
    //1270_SBLive_sf2
    //1270_SoundBlasterOld_sf2
    "1271_Aspirin_sf2_file",
    "1271_GeneralUserGS_sf2_file",
    "1272_Aspirin_sf2_file",
    "1272_GeneralUserGS_sf2_file",
    "1273_GeneralUserGS_sf2_file",
    "1274_GeneralUserGS_sf2_file",
    ""
  ]
};
var defaultSoundfontUrl = "https://felixroos.github.io/webaudiofontdata/sound";
var soundfontUrl = defaultSoundfontUrl;
function setSoundfontUrl(e) {
  soundfontUrl = e;
}
var loadCache = {};
async function loadFont(name) {
  if (loadCache[name])
    return loadCache[name];
  const load = async () => {
    const url = `${soundfontUrl}/${name}.js`, preset = await fetch(url).then((e) => e.text());
    let [_, data] = preset.split("={");
    return eval("{" + data);
  };
  return loadCache[name] = load(), loadCache[name];
}
async function getFontBufferSource(e, l2, s) {
  let { note: f2 = "c3", freq: a } = l2, r;
  if (a)
    r = Oe(a);
  else if (typeof f2 == "string")
    r = lt(f2);
  else if (typeof f2 == "number")
    r = f2;
  else
    throw new Error(`unexpected "note" type "${typeof f2}"`);
  const { buffer: n, zone: i2 } = await getFontPitch(e, r, s), G3 = s.createBufferSource();
  G3.buffer = n;
  const u = i2.originalPitch - 100 * i2.coarseTune - i2.fineTune, o = 1 * Math.pow(2, (100 * r - u) / 1200);
  return G3.playbackRate.value = o, i2.loopStart > 1 && i2.loopStart < i2.loopEnd && (G3.loop = true, G3.loopStart = i2.loopStart / i2.sampleRate, G3.loopEnd = i2.loopEnd / i2.sampleRate), G3;
}
var bufferCache = {};
async function getFontPitch(e, l2, s) {
  const f2 = `${e}:::${l2}`;
  if (bufferCache[f2])
    return bufferCache[f2];
  const a = async () => {
    const r = await loadFont(e);
    if (!r)
      throw new Error(`Could not load soundfont ${e}`);
    const n = findZone(r, l2);
    if (!n)
      throw new Error("no soundfont zone found for preset ", e, "pitch", l2);
    const i2 = await getBuffer(n, s);
    if (!i2)
      throw new Error(`no soundfont buffer found for preset ${e}, pitch: ${l2}`);
    return { buffer: i2, zone: n };
  };
  return bufferCache[f2] = a(), bufferCache[f2];
}
function findZone(e, l2) {
  return e.find((s) => s.keyRangeLow <= l2 && s.keyRangeHigh + 1 >= l2);
}
async function getBuffer(e, l2) {
  if (e.sample) {
    console.warn("zone.sample untested!");
    const f2 = atob(e.sample);
    e.buffer = l2.createBuffer(1, f2.length / 2, e.sampleRate);
    const a = e.buffer.getChannelData(0);
    let r, n, i2;
    for (var s = 0; s < f2.length / 2; s++)
      r = f2.charCodeAt(s * 2), n = f2.charCodeAt(s * 2 + 1), r < 0 && (r = 256 + r), n < 0 && (n = 256 + n), i2 = n * 256 + r, i2 >= 65536 / 2 && (i2 = i2 - 65536), a[s] = i2 / 65536;
  } else if (e.file) {
    const f2 = e.file.length, a = new ArrayBuffer(f2), r = new Uint8Array(a), n = atob(e.file);
    let i2;
    for (let G3 = 0; G3 < n.length; G3++)
      i2 = n.charCodeAt(G3), r[G3] = i2;
    return new Promise((G3) => l2.decodeAudioData(a, G3));
  }
}
function registerSoundfonts() {
  Object.entries(gm).forEach(([e, l2]) => {
    q(
      e,
      async (s, f2, a) => {
        const [r, n, i2, G3] = B2([
          f2.attack,
          f2.decay,
          f2.sustain,
          f2.release
        ]), { duration: u } = f2, o = Du(f2.n, l2.length), C4 = l2[o], U3 = W2(), t = await getFontBufferSource(C4, f2, U3);
        t.start(s);
        const p = U3.createGain(), d2 = t.connect(p), S3 = s + u;
        Q(d2.gain, r, n, i2, G3, 0, 0.3, s, S3, "linear");
        let m2 = S3 + G3 + 0.01, F2 = yt(t.detune, f2, s);
        Xt2(t.detune, f2, s, S3), t.stop(m2);
        const R3 = (M) => {
        };
        return t.onended = () => {
          t.disconnect(), F2?.stop(), d2.disconnect(), a();
        }, { node: d2, stop: R3 };
      },
      { type: "soundfont", prebake: true, fonts: l2 }
    );
  });
}
var instruments = [
  // Acoustic Grand Piano: Piano
  "0000_JCLive_sf2_file",
  "0000_Aspirin_sf2_file",
  "0000_Chaos_sf2_file",
  "0000_FluidR3_GM_sf2_file",
  "0000_GeneralUserGS_sf2_file",
  //'0000_SBLive_sf2',
  //'0000_SoundBlasterOld_sf2',
  "0001_FluidR3_GM_sf2_file",
  "0001_GeneralUserGS_sf2_file",
  // Bright Acoustic Piano: Piano
  "0010_Aspirin_sf2_file",
  "0010_Chaos_sf2_file",
  "0010_FluidR3_GM_sf2_file",
  "0010_GeneralUserGS_sf2_file",
  "0010_JCLive_sf2_file",
  //'0010_SBLive_sf2',
  //'0010_SoundBlasterOld_sf2',
  "0011_Aspirin_sf2_file",
  "0011_FluidR3_GM_sf2_file",
  "0011_GeneralUserGS_sf2_file",
  "0012_GeneralUserGS_sf2_file",
  // string??
  // Electric Grand Piano: Piano
  "0020_Aspirin_sf2_file",
  "0020_Chaos_sf2_file",
  "0020_FluidR3_GM_sf2_file",
  "0020_GeneralUserGS_sf2_file",
  "0020_JCLive_sf2_file",
  //'0020_SBLive_sf2',
  //'0020_SoundBlasterOld_sf2',
  "0021_Aspirin_sf2_file",
  "0021_GeneralUserGS_sf2_file",
  // ?
  "0022_Aspirin_sf2_file",
  // dx7 epiano like
  // Honky-tonk Piano: Piano
  "0030_Aspirin_sf2_file",
  "0030_Chaos_sf2_file",
  "0030_FluidR3_GM_sf2_file",
  "0030_GeneralUserGS_sf2_file",
  "0030_JCLive_sf2_file",
  //'0030_SBLive_sf2',
  //'0030_SoundBlasterOld_sf2',
  "0031_Aspirin_sf2_file",
  "0031_FluidR3_GM_sf2_file",
  "0031_GeneralUserGS_sf2_file",
  //'0031_SoundBlasterOld_sf2', // pianos until here
  // Electric Piano 1: Piano
  "0040_Aspirin_sf2_file",
  "0040_Chaos_sf2_file",
  "0040_FluidR3_GM_sf2_file",
  // rhodes
  "0040_GeneralUserGS_sf2_file",
  // staccato rhodes
  "0040_JCLive_sf2_file",
  // warbly rhodes
  //'0040_SBLive_sf2', // ?
  //'0040_SoundBlasterOld_sf2', // ?
  "0041_FluidR3_GM_sf2_file",
  // rhodes
  "0041_GeneralUserGS_sf2_file",
  // staccato rhodes
  //'0041_SoundBlasterOld_sf2', // ?
  "0042_GeneralUserGS_sf2_file",
  // staccato wurly
  "0043_GeneralUserGS_sf2_file",
  // high bell
  "0044_GeneralUserGS_sf2_file",
  // reed organ
  //'0045_GeneralUserGS_sf2_file', // ?
  "0046_GeneralUserGS_sf2_file",
  // reed organ
  // Electric Piano 2: Piano
  "0050_Aspirin_sf2_file",
  // glass piano
  "0050_Chaos_sf2_file",
  // short glass piano
  "0050_FluidR3_GM_sf2_file",
  // long glass piano !
  // ?
  "0050_GeneralUserGS_sf2_file",
  // short glass piano
  // cont
  "0050_JCLive_sf2_file",
  // glass piano
  //'0050_SBLive_sf2', // ?
  //'0050_SoundBlasterOld_sf2', // ?
  "0051_FluidR3_GM_sf2_file",
  // long lass organ
  "0051_GeneralUserGS_sf2_file",
  //'0052_GeneralUserGS_sf2_file', // ?
  "0053_GeneralUserGS_sf2_file",
  // normal piano...
  "0054_GeneralUserGS_sf2_file",
  // piano
  // Harpsichord: Piano
  "0060_Aspirin_sf2_file",
  // harpsichord
  "0060_Chaos_sf2_file",
  "0060_FluidR3_GM_sf2_file",
  // harpsichord !
  "0060_GeneralUserGS_sf2_file",
  "0060_JCLive_sf2_file",
  //'0060_SBLive_sf2',
  //'0060_SoundBlasterOld_sf2',
  "0061_Aspirin_sf2_file",
  "0061_GeneralUserGS_sf2_file",
  //'0061_SoundBlasterOld_sf2',
  "0062_GeneralUserGS_sf2_file",
  // Clavinet: Piano
  "0070_Aspirin_sf2_file",
  "0070_Chaos_sf2_file",
  "0070_FluidR3_GM_sf2_file",
  // '0070_GeneralUserGS_sf2_file', // half broken
  "0070_JCLive_sf2_file",
  //'0070_SBLive_sf2',
  //'0070_SoundBlasterOld_sf2',
  // '0071_GeneralUserGS_sf2_file', // half broken
  // Celesta: Chromatic Percussion
  "0080_Aspirin_sf2_file",
  "0080_Chaos_sf2_file",
  "0080_FluidR3_GM_sf2_file",
  "0080_GeneralUserGS_sf2_file",
  "0080_JCLive_sf2_file",
  //'0080_SBLive_sf2',
  //'0080_SoundBlasterOld_sf2',
  "0081_FluidR3_GM_sf2_file",
  // '0081_GeneralUserGS_sf2_file', // weird detuned
  //'0081_SoundBlasterOld_sf2',
  // Glockenspiel: Chromatic Percussion
  "0090_Aspirin_sf2_file",
  "0090_Chaos_sf2_file",
  "0090_FluidR3_GM_sf2_file",
  "0090_GeneralUserGS_sf2_file",
  "0090_JCLive_sf2_file",
  //'0090_SBLive_sf2',
  //'0090_SoundBlasterOld_sf2',
  //'0091_SoundBlasterOld_sf2',
  // Music Box: Chromatic Percussion
  "0100_Aspirin_sf2_file",
  "0100_Chaos_sf2_file",
  "0100_FluidR3_GM_sf2_file",
  "0100_GeneralUserGS_sf2_file",
  "0100_JCLive_sf2_file",
  //'0100_SBLive_sf2',
  //'0100_SoundBlasterOld_sf2',
  // '0101_GeneralUserGS_sf2_file', // weird detuned
  //'0101_SoundBlasterOld_sf2',
  // Vibraphone: Chromatic Percussion
  "0110_Aspirin_sf2_file",
  "0110_Chaos_sf2_file",
  "0110_FluidR3_GM_sf2_file",
  "0110_GeneralUserGS_sf2_file",
  "0110_JCLive_sf2_file",
  //'0110_SBLive_sf2',
  //'0110_SoundBlasterOld_sf2',
  "0111_FluidR3_GM_sf2_file",
  // Marimba: Chromatic Percussion
  "0120_Aspirin_sf2_file",
  "0120_Chaos_sf2_file",
  "0120_FluidR3_GM_sf2_file",
  "0120_GeneralUserGS_sf2_file",
  "0120_JCLive_sf2_file",
  //'0120_SBLive_sf2',
  //'0120_SoundBlasterOld_sf2',
  "0121_FluidR3_GM_sf2_file",
  "0121_GeneralUserGS_sf2_file",
  // not really a marimba
  // Xylophone: Chromatic Percussion
  "0130_Aspirin_sf2_file",
  "0130_Chaos_sf2_file",
  "0130_FluidR3_GM_sf2_file",
  "0130_GeneralUserGS_sf2_file",
  "0130_JCLive_sf2_file",
  //'0130_SBLive_sf2',
  //'0130_SoundBlasterOld_sf2',
  "0131_FluidR3_GM_sf2_file",
  // Tubular Bells: Chromatic Percussion
  "0140_Aspirin_sf2_file",
  // '0140_Chaos_sf2_file', // same as aspirin?
  "0140_FluidR3_GM_sf2_file",
  "0140_GeneralUserGS_sf2_file",
  "0140_JCLive_sf2_file",
  //'0140_SBLive_sf2',
  //'0140_SoundBlasterOld_sf2',
  "0141_FluidR3_GM_sf2_file",
  //'0141_GeneralUserGS_sf2_file',
  "0142_GeneralUserGS_sf2_file",
  // epiano..
  // '0143_GeneralUserGS_sf2_file', // buggy
  // Dulcimer: Chromatic Percussion
  "0150_Aspirin_sf2_file",
  "0150_Chaos_sf2_file",
  // long load?
  "0150_FluidR3_GM_sf2_file",
  "0150_GeneralUserGS_sf2_file",
  // '0150_JCLive_sf2_file', // detuned???
  //'0150_SBLive_sf2',
  //'0150_SoundBlasterOld_sf2',
  "0151_FluidR3_GM_sf2_file",
  // Drawbar Organ: Organ
  "0160_Aspirin_sf2_file",
  "0160_Chaos_sf2_file",
  "0160_FluidR3_GM_sf2_file",
  "0160_GeneralUserGS_sf2_file",
  "0160_JCLive_sf2_file",
  //'0160_SBLive_sf2',
  //'0160_SoundBlasterOld_sf2',
  "0161_Aspirin_sf2_file",
  "0161_FluidR3_GM_sf2_file",
  //'0161_SoundBlasterOld_sf2',
  // Percussive Organ: Organ
  "0170_Aspirin_sf2_file",
  "0170_Chaos_sf2_file",
  "0170_FluidR3_GM_sf2_file",
  // '0170_GeneralUserGS_sf2_file', // repitched
  "0170_JCLive_sf2_file",
  //'0170_SBLive_sf2',
  //'0170_SoundBlasterOld_sf2',
  "0171_FluidR3_GM_sf2_file",
  // '0171_GeneralUserGS_sf2_file',  // repitched
  "0172_FluidR3_GM_sf2_file",
  // Rock Organ: Organ
  "0180_Aspirin_sf2_file",
  "0180_Chaos_sf2_file",
  "0180_FluidR3_GM_sf2_file",
  "0180_GeneralUserGS_sf2_file",
  "0180_JCLive_sf2_file",
  //'0180_SBLive_sf2',
  //'0180_SoundBlasterOld_sf2',
  //'0181_Aspirin_sf2_file', // flute
  //'0181_GeneralUserGS_sf2_file', // marimbalike
  //'0181_SoundBlasterOld_sf2',
  // Church Organ: Organ
  "0190_Aspirin_sf2_file",
  "0190_Chaos_sf2_file",
  "0190_FluidR3_GM_sf2_file",
  "0190_GeneralUserGS_sf2_file",
  "0190_JCLive_sf2_file",
  //'0190_SBLive_sf2',
  //'0190_SoundBlasterOld_sf2',
  //'0191_Aspirin_sf2_file', // string??
  //'0191_GeneralUserGS_sf2_file', // weird organ
  //'0191_SoundBlasterOld_sf2',
  // Reed Organ: Organ
  "0200_Aspirin_sf2_file",
  "0200_Chaos_sf2_file",
  "0200_FluidR3_GM_sf2_file",
  "0200_GeneralUserGS_sf2_file",
  "0200_JCLive_sf2_file",
  // stringy
  //'0200_SBLive_sf2',
  //'0200_SoundBlasterOld_sf2',
  "0201_Aspirin_sf2_file",
  // stringy
  "0201_FluidR3_GM_sf2_file",
  "0201_GeneralUserGS_sf2_file",
  //'0201_SoundBlasterOld_sf2',
  //'0210_Aspirin_sf2_file', // buggy
  //'0210_Chaos_sf2_file', // buggy
  // Accordion: Organ
  "0210_FluidR3_GM_sf2_file",
  "0210_GeneralUserGS_sf2_file",
  "0210_JCLive_sf2_file",
  //'0210_SBLive_sf2',
  //'0210_SoundBlasterOld_sf2',
  "0211_Aspirin_sf2_file",
  // stringy
  "0211_FluidR3_GM_sf2_file",
  "0211_GeneralUserGS_sf2_file",
  //'0211_SoundBlasterOld_sf2',
  "0212_GeneralUserGS_sf2_file",
  // Harmonica: Organ
  "0220_Aspirin_sf2_file",
  "0220_Chaos_sf2_file",
  "0220_FluidR3_GM_sf2_file",
  "0220_GeneralUserGS_sf2_file",
  "0220_JCLive_sf2_file",
  //'0220_SBLive_sf2',
  //'0220_SoundBlasterOld_sf2',
  "0221_FluidR3_GM_sf2_file",
  // Tango Accordion: Organ
  "0230_Aspirin_sf2_file",
  "0230_Chaos_sf2_file",
  "0230_FluidR3_GM_sf2_file",
  "0230_GeneralUserGS_sf2_file",
  "0230_JCLive_sf2_file",
  //'0230_SBLive_sf2',
  //'0230_SoundBlasterOld_sf2',
  "0231_FluidR3_GM_sf2_file",
  "0231_GeneralUserGS_sf2_file",
  // warbly
  "0231_JCLive_sf2_file",
  //'0231_SoundBlasterOld_sf2',
  "0232_FluidR3_GM_sf2_file",
  "0233_FluidR3_GM_sf2_file",
  // Acoustic Guitar (nylon): Guitar
  "0240_Aspirin_sf2_file",
  "0240_Chaos_sf2_file",
  "0240_FluidR3_GM_sf2_file",
  "0240_GeneralUserGS_sf2_file",
  "0240_JCLive_sf2_file",
  "0240_LK_Godin_Nylon_SF2_file",
  //'0240_SBLive_sf2',
  //'0240_SoundBlasterOld_sf2',
  // '0241_GeneralUserGS_sf2_file', // organ like
  "0241_JCLive_sf2_file",
  "0242_JCLive_sf2_file",
  "0243_JCLive_sf2_file",
  // Acoustic Guitar (steel): Guitar
  "0253_Acoustic_Guitar_sf2_file",
  "0250_Aspirin_sf2_file",
  "0250_Chaos_sf2_file",
  "0250_FluidR3_GM_sf2_file",
  "0250_GeneralUserGS_sf2_file",
  // '0250_JCLive_sf2_file', // detuned
  "0250_LK_AcousticSteel_SF2_file",
  //'0250_SBLive_sf2',
  //'0250_SoundBlasterOld_sf2',
  //'0251_Acoustic_Guitar_sf2_file', // detuned?
  // '0251_GeneralUserGS_sf2_file', // broken: missing pitches
  // '0252_Acoustic_Guitar_sf2_file', // detuned..
  // '0252_GeneralUserGS_sf2_file', // broken: missing pitches
  "0253_Acoustic_Guitar_sf2_file",
  "0253_GeneralUserGS_sf2_file",
  "0254_Acoustic_Guitar_sf2_file",
  // bends.. detuned
  "0254_GeneralUserGS_sf2_file",
  //'0255_GeneralUserGS_sf2_file', // no guitar..
  // Electric Guitar (jazz): Guitar
  "0260_Aspirin_sf2_file",
  // sounds like an epiano
  "0260_Chaos_sf2_file",
  // weird but cool detune
  "0260_FluidR3_GM_sf2_file",
  "0260_GeneralUserGS_sf2_file",
  "0260_JCLive_sf2_file",
  //'0260_SBLive_sf2',
  //'0260_SoundBlasterOld_sf2',
  "0260_Stratocaster_sf2_file",
  // -1 octave
  "0261_GeneralUserGS_sf2_file",
  //'0261_SoundBlasterOld_sf2',
  "0261_Stratocaster_sf2_file",
  // -1 octave
  "0262_Stratocaster_sf2_file",
  // -1 octave
  // Electric Guitar (clean): Guitar
  "0270_Aspirin_sf2_file",
  "0270_Chaos_sf2_file",
  // sounds meh
  "0270_FluidR3_GM_sf2_file",
  "0270_GeneralUserGS_sf2_file",
  //'0270_Gibson_Les_Paul_sf2_file', // detuned
  // '0270_JCLive_sf2_file', // broken: missing notes
  "0270_SBAWE32_sf2_file",
  //'0270_SBLive_sf2',
  //'0270_SoundBlasterOld_sf2',
  "0270_Stratocaster_sf2_file",
  // -1 octave
  "0271_GeneralUserGS_sf2_file",
  "0271_Stratocaster_sf2_file",
  // -1 octave
  "0272_Stratocaster_sf2_file",
  // -1 octave
  // Electric Guitar (muted): Guitar
  "0280_Aspirin_sf2_file",
  "0280_Chaos_sf2_file",
  // '0280_FluidR3_GM_sf2_file', // broken: wrong notes
  "0280_GeneralUserGS_sf2_file",
  "0280_JCLive_sf2_file",
  //'0280_LesPaul_sf2', // missing
  "0280_LesPaul_sf2_file",
  // not really muted..
  "0280_SBAWE32_sf2_file",
  //'0280_SBLive_sf2',
  //'0280_SoundBlasterOld_sf2',
  "0281_Aspirin_sf2_file",
  "0281_FluidR3_GM_sf2_file",
  "0281_GeneralUserGS_sf2_file",
  "0282_FluidR3_GM_sf2_file",
  // '0282_GeneralUserGS_sf2_file', // broken: missing notes
  // '0283_GeneralUserGS_sf2_file', // missing
  // Overdriven Guitar: Guitar
  "0290_Aspirin_sf2_file",
  "0290_Chaos_sf2_file",
  "0290_FluidR3_GM_sf2_file",
  "0290_GeneralUserGS_sf2_file",
  //'0290_JCLive_sf2_file', // detuned....
  //'0290_LesPaul_sf2', // broken
  "0290_LesPaul_sf2_file",
  "0290_SBAWE32_sf2_file",
  //'0290_SBLive_sf2',
  //'0290_SoundBlasterOld_sf2',
  // '0291_Aspirin_sf2_file', // broken
  // '0291_LesPaul_sf2', // broken
  "0291_LesPaul_sf2_file",
  "0291_SBAWE32_sf2_file",
  //'0291_SoundBlasterOld_sf2',
  "0292_Aspirin_sf2_file",
  // '0292_LesPaul_sf2', // broken
  "0292_LesPaul_sf2_file",
  // Distortion Guitar: Guitar
  "0300_Aspirin_sf2_file",
  "0300_Chaos_sf2_file",
  "0300_FluidR3_GM_sf2_file",
  "0300_GeneralUserGS_sf2_file",
  // '0300_JCLive_sf2_file', // broken
  // '0300_LesPaul_sf2', // broken
  "0300_LesPaul_sf2_file",
  //'0300_SBAWE32_sf2_file', // -2 octave
  //'0300_SBLive_sf2',
  //'0300_SoundBlasterOld_sf2',
  // '0301_Aspirin_sf2_file', // missing
  //'0301_FluidR3_GM_sf2_file', // weird broken bell
  // '0301_GeneralUserGS_sf2_file', // broken
  // '0301_JCLive_sf2_file', // broken
  // '0301_LesPaul_sf2', // missing
  // '0301_LesPaul_sf2_file', // + 1 oct?
  "0302_Aspirin_sf2_file",
  // '0302_GeneralUserGS_sf2_file', // not a guitar..
  //'0302_JCLive_sf2_file', // broken...
  // '0303_Aspirin_sf2_file', // guitar harmonic??
  "0304_Aspirin_sf2_file",
  // Guitar Harmonics: Guitar
  "0310_Aspirin_sf2_file",
  "0310_Chaos_sf2_file",
  "0310_FluidR3_GM_sf2_file",
  // weird..
  //'0310_GeneralUserGS_sf2_file', // weird..
  // '0310_JCLive_sf2_file', // weird
  //'0310_LesPaul_sf2', // missing
  //'0310_LesPaul_sf2_file', // wrong pitches
  //'0310_SBAWE32_sf2_file', // wrong pitches
  //'0310_SBLive_sf2',
  //'0310_SoundBlasterOld_sf2',
  //'0311_FluidR3_GM_sf2_file', // knackt
  //'0311_GeneralUserGS_sf2_file', // wrong notes
  // Acoustic Bass: Bass
  "0320_Aspirin_sf2_file",
  "0320_Chaos_sf2_file",
  "0320_FluidR3_GM_sf2_file",
  // '0320_GeneralUserGS_sf2_file', // missing notes
  "0320_JCLive_sf2_file",
  //'0320_SBLive_sf2',
  //'0320_SoundBlasterOld_sf2',
  // '0321_GeneralUserGS_sf2_file', // nice sound but missing notes
  // '0322_GeneralUserGS_sf2_file', // missing notes
  // Electric Bass (finger): Bass
  "0330_Aspirin_sf2_file",
  //'0330_Chaos_sf2_file', // same as last
  "0330_FluidR3_GM_sf2_file",
  // knackt..
  "0330_GeneralUserGS_sf2_file",
  // -1 oct
  "0330_JCLive_sf2_file",
  //'0330_SBLive_sf2',
  //'0330_SoundBlasterOld_sf2',
  //'0331_GeneralUserGS_sf2_file', // knackt
  // '0332_GeneralUserGS_sf2_file', // missing
  // Electric Bass (pick): Bass
  "0340_Aspirin_sf2_file",
  //'0340_Chaos_sf2_file', // same as last
  "0340_FluidR3_GM_sf2_file",
  "0340_GeneralUserGS_sf2_file",
  // -1oct
  "0340_JCLive_sf2_file",
  //'0340_SBLive_sf2',
  //'0340_SoundBlasterOld_sf2',
  "0341_Aspirin_sf2_file",
  //'0341_GeneralUserGS_sf2_file', // knackt
  // Fretless Bass: Bass
  "0350_Aspirin_sf2_file",
  // '0350_Chaos_sf2_file', // same as last
  //'0350_FluidR3_GM_sf2_file', // knackt
  //'0350_GeneralUserGS_sf2_file', // -1 oct + knackt
  "0350_JCLive_sf2_file",
  // weird detuned
  //'0350_SBLive_sf2',
  //'0350_SoundBlasterOld_sf2',
  //'0351_GeneralUserGS_sf2_file', // missing
  // Slap Bass 1: Bass
  "0360_Aspirin_sf2_file",
  "0360_Chaos_sf2_file",
  "0360_FluidR3_GM_sf2_file",
  // knackt
  //'0360_GeneralUserGS_sf2_file', // -1 oct
  "0360_JCLive_sf2_file",
  //'0360_SBLive_sf2',
  //'0360_SoundBlasterOld_sf2',
  //'0361_GeneralUserGS_sf2_file', // missing
  // Slap Bass 2: Bass
  "0370_Aspirin_sf2_file",
  // '0370_Chaos_sf2_file', // same as last
  "0370_FluidR3_GM_sf2_file",
  "0370_GeneralUserGS_sf2_file",
  "0370_JCLive_sf2_file",
  //'0370_SBLive_sf2',
  //'0370_SoundBlasterOld_sf2',
  //'0371_GeneralUserGS_sf2_file', // missing
  //'0372_GeneralUserGS_sf2_file', // detuned
  //'0385_GeneralUserGS_sf2_file', // missing
  // Synth Bass 1: Bass
  "0380_Aspirin_sf2_file",
  // laut!
  "0380_Chaos_sf2_file",
  "0380_FluidR3_GM_sf2_file",
  // bisl detuned
  // '0380_GeneralUserGS_sf2_file', // laut
  "0380_JCLive_sf2_file",
  //'0380_SBLive_sf2',
  //'0380_SoundBlasterOld_sf2',
  "0381_FluidR3_GM_sf2_file",
  // bisl detuned
  "0381_GeneralUserGS_sf2_file",
  //'0382_FluidR3_GM_sf2_file', // kein synth bass
  "0382_GeneralUserGS_sf2_file",
  "0383_GeneralUserGS_sf2_file",
  "0384_GeneralUserGS_sf2_file",
  //'0386_GeneralUserGS_sf2_file', // knackt
  "0387_GeneralUserGS_sf2_file",
  // Synth Bass 2: Bass
  "0390_Aspirin_sf2_file",
  // '0390_Chaos_sf2_file', // same as last
  "0390_FluidR3_GM_sf2_file",
  "0390_GeneralUserGS_sf2_file",
  "0390_JCLive_sf2_file",
  //'0390_SBLive_sf2',
  //'0390_SoundBlasterOld_sf2',
  "0391_FluidR3_GM_sf2_file",
  // lauuut
  // '0391_GeneralUserGS_sf2_file', // missing
  //'0391_SoundBlasterOld_sf2',
  "0392_FluidR3_GM_sf2_file",
  // lauut
  //'0392_GeneralUserGS_sf2_file', // kein synth und -1oct
  "0393_GeneralUserGS_sf2_file",
  // lauuuut
  // Violin: Strings
  "0400_Aspirin_sf2_file",
  "0400_Chaos_sf2_file",
  "0400_FluidR3_GM_sf2_file",
  "0400_GeneralUserGS_sf2_file",
  "0400_JCLive_sf2_file",
  //'0400_SBLive_sf2',
  //'0400_SoundBlasterOld_sf2',
  "0401_Aspirin_sf2_file",
  // synth
  "0401_FluidR3_GM_sf2_file",
  "0401_GeneralUserGS_sf2_file",
  "0402_GeneralUserGS_sf2_file",
  // pizzicato
  // Viola: Strings
  "0410_Aspirin_sf2_file",
  // '0410_Chaos_sf2_file', // laut und sehr unstringy
  "0410_FluidR3_GM_sf2_file",
  "0410_GeneralUserGS_sf2_file",
  "0410_JCLive_sf2_file",
  // <3
  //'0410_SBLive_sf2',
  //'0410_SoundBlasterOld_sf2',
  "0411_FluidR3_GM_sf2_file",
  // Cello: Strings
  "0420_Aspirin_sf2_file",
  // '0420_Chaos_sf2_file', // kein cello und laut
  "0420_FluidR3_GM_sf2_file",
  "0420_GeneralUserGS_sf2_file",
  "0420_JCLive_sf2_file",
  //'0420_SBLive_sf2',
  //'0420_SoundBlasterOld_sf2',
  "0421_FluidR3_GM_sf2_file",
  "0421_GeneralUserGS_sf2_file",
  // pizzicato
  // Contrabass: Strings
  "0430_Aspirin_sf2_file",
  "0430_Chaos_sf2_file",
  // '0430_FluidR3_GM_sf2_file', // missing notes
  "0430_GeneralUserGS_sf2_file",
  //'0430_JCLive_sf2_file', // -1 oct und meh
  //'0430_SBLive_sf2',
  //'0430_SoundBlasterOld_sf2',
  // '0431_FluidR3_GM_sf2_file', // missing notes
  // Tremolo Strings: Strings
  "0440_Aspirin_sf2_file",
  "0440_Chaos_sf2_file",
  //'0440_FluidR3_GM_sf2_file', // huuuge
  "0440_GeneralUserGS_sf2_file",
  "0440_JCLive_sf2_file",
  //'0440_SBLive_sf2',
  //'0440_SoundBlasterOld_sf2',
  "0441_GeneralUserGS_sf2_file",
  "0442_GeneralUserGS_sf2_file",
  // Pizzicato Strings: Strings
  "0450_Aspirin_sf2_file",
  "0450_Chaos_sf2_file",
  // same as last
  "0450_FluidR3_GM_sf2_file",
  // chrono trigger flashback
  "0450_GeneralUserGS_sf2_file",
  // -1 oct?
  "0450_JCLive_sf2_file",
  // filter env
  //'0450_SBLive_sf2',
  //'0450_SoundBlasterOld_sf2',
  "0451_FluidR3_GM_sf2_file",
  // Orchestral Harp: Strings
  "0460_Aspirin_sf2_file",
  // '0460_Chaos_sf2_file', // knackt
  "0460_FluidR3_GM_sf2_file",
  "0460_GeneralUserGS_sf2_file",
  "0460_JCLive_sf2_file",
  //'0460_SBLive_sf2',
  //'0460_SoundBlasterOld_sf2',
  "0461_FluidR3_GM_sf2_file",
  // Timpani: Strings
  "0470_Aspirin_sf2_file",
  "0470_Chaos_sf2_file",
  "0470_FluidR3_GM_sf2_file",
  "0470_GeneralUserGS_sf2_file",
  // '0470_JCLive_sf2_file', // wrong pitches
  //'0470_SBLive_sf2',
  //'0470_SoundBlasterOld_sf2',
  "0471_FluidR3_GM_sf2_file",
  "0471_GeneralUserGS_sf2_file",
  // String Ensemble 1: Ensemble
  "0480_Aspirin_sf2_file",
  "0480_Chaos_sf2_file",
  "0480_FluidR3_GM_sf2_file",
  // large
  "0480_GeneralUserGS_sf2_file",
  "0480_JCLive_sf2_file",
  //'0480_SBLive_sf2',
  //'0480_SoundBlasterOld_sf2',
  // these dont work..
  //'04810_GeneralUserGS_sf2_file', // missing notes + brass
  //'04811_GeneralUserGS_sf2_file',  // missing notes + brass
  //'04812_GeneralUserGS_sf2_file',
  //'04813_GeneralUserGS_sf2_file',
  //'04814_GeneralUserGS_sf2_file',
  //'04815_GeneralUserGS_sf2_file',
  //'04816_GeneralUserGS_sf2_file',
  //'04817_GeneralUserGS_sf2_file',
  "0481_Aspirin_sf2_file",
  "0481_FluidR3_GM_sf2_file",
  // brass
  "0481_GeneralUserGS_sf2_file",
  "0482_Aspirin_sf2_file",
  // brass
  "0482_GeneralUserGS_sf2_file",
  "0483_GeneralUserGS_sf2_file",
  // brass
  // another block of buggyness:
  //'0484_GeneralUserGS_sf2_file', // keys?! + knackt
  //'0485_GeneralUserGS_sf2_file', // missing notes
  //'0486_GeneralUserGS_sf2_file',
  //'0487_GeneralUserGS_sf2_file',
  //'0488_GeneralUserGS_sf2_file',
  //'0489_GeneralUserGS_sf2_file',
  // String Ensemble 2: Ensemble
  "0490_Aspirin_sf2_file",
  "0490_Chaos_sf2_file",
  "0490_FluidR3_GM_sf2_file",
  // large
  "0490_GeneralUserGS_sf2_file",
  "0490_JCLive_sf2_file",
  //'0490_SBLive_sf2',
  //'0490_SoundBlasterOld_sf2',
  "0491_GeneralUserGS_sf2_file",
  "0492_GeneralUserGS_sf2_file",
  // Synth Strings 1: Ensemble
  "0500_Aspirin_sf2_file",
  // '0500_Chaos_sf2_file', // same as above
  //'0500_FluidR3_GM_sf2_file', // detune + knack
  "0500_GeneralUserGS_sf2_file",
  "0500_JCLive_sf2_file",
  //'0500_SBLive_sf2',
  //'0500_SoundBlasterOld_sf2',
  "0501_FluidR3_GM_sf2_file",
  // '0501_GeneralUserGS_sf2_file', // crackles
  // '0502_FluidR3_GM_sf2_file', // missing
  "0502_GeneralUserGS_sf2_file",
  "0503_FluidR3_GM_sf2_file",
  // large
  // '0504_FluidR3_GM_sf2_file', // missing
  "0505_FluidR3_GM_sf2_file",
  // Synth Strings 2: Ensemble
  "0510_Aspirin_sf2_file",
  "0510_Chaos_sf2_file",
  // '0510_FluidR3_GM_sf2_file', // detune + crackle
  "0510_GeneralUserGS_sf2_file",
  //'0510_JCLive_sf2_file', // laarge and meh
  //'0510_SBLive_sf2', // missing
  //'0510_SoundBlasterOld_sf2',
  "0511_GeneralUserGS_sf2_file",
  // crackly
  //'0511_SoundBlasterOld_sf2',
  // Choir Aahs: Ensemble
  "0520_Aspirin_sf2_file",
  "0520_Chaos_sf2_file",
  "0520_FluidR3_GM_sf2_file",
  "0520_GeneralUserGS_sf2_file",
  "0520_JCLive_sf2_file",
  //'0520_SBLive_sf2',
  "0520_Soul_Ahhs_sf2_file",
  // large
  //'0520_SoundBlasterOld_sf2',
  "0521_FluidR3_GM_sf2_file",
  "0521_Soul_Ahhs_sf2_file",
  // large
  //'0521_SoundBlasterOld_sf2',
  "0522_Soul_Ahhs_sf2_file",
  // large
  // Voice Oohs: Ensemble
  "0530_Aspirin_sf2_file",
  "0530_Chaos_sf2_file",
  "0530_FluidR3_GM_sf2_file",
  "0530_GeneralUserGS_sf2_file",
  //'0530_JCLive_sf2_file', // same as above
  //'0530_SBLive_sf2',
  // '0530_Soul_Ahhs_sf2_file', // not ooh
  //'0530_SoundBlasterOld_sf2',
  "0531_FluidR3_GM_sf2_file",
  // '0531_GeneralUserGS_sf2_file', // ends crackle
  "0531_JCLive_sf2_file",
  //'0531_SoundBlasterOld_sf2',
  // Synth Choir: Ensemble
  "0540_Aspirin_sf2_file",
  "0540_Chaos_sf2_file",
  "0540_FluidR3_GM_sf2_file",
  "0540_GeneralUserGS_sf2_file",
  //'0540_JCLive_sf2_file', // large + crackles
  //'0540_SBLive_sf2',
  //'0540_SoundBlasterOld_sf2',
  "0541_FluidR3_GM_sf2_file",
  // Orchestra Hit: Ensemble
  "0550_Aspirin_sf2_file",
  "0550_Chaos_sf2_file",
  "0550_FluidR3_GM_sf2_file",
  "0550_GeneralUserGS_sf2_file",
  //'0550_JCLive_sf2_file', // same as above
  //'0550_SBLive_sf2',
  //'0550_SoundBlasterOld_sf2',
  //'0551_Aspirin_sf2_file', // not an orch hit..
  "0551_FluidR3_GM_sf2_file",
  // Trumpet: Brass
  "0560_Aspirin_sf2_file",
  "0560_Chaos_sf2_file",
  "0560_FluidR3_GM_sf2_file",
  //'0560_GeneralUserGS_sf2_file', // -1 oct
  "0560_JCLive_sf2_file",
  //'0560_SBLive_sf2',
  //'0560_SoundBlasterOld_sf2',
  // Trombone: Brass
  "0570_Aspirin_sf2_file",
  "0570_Chaos_sf2_file",
  "0570_FluidR3_GM_sf2_file",
  "0570_GeneralUserGS_sf2_file",
  //'0570_JCLive_sf2_file', // -1oct
  //'0570_SBLive_sf2',
  //'0570_SoundBlasterOld_sf2',
  "0571_GeneralUserGS_sf2_file",
  // Tuba: Brass
  "0580_Aspirin_sf2_file",
  "0580_Chaos_sf2_file",
  "0580_FluidR3_GM_sf2_file",
  "0580_GeneralUserGS_sf2_file",
  //'0580_JCLive_sf2_file', // -1oct
  //'0580_SBLive_sf2',
  //'0580_SoundBlasterOld_sf2',
  //'0581_GeneralUserGS_sf2_file', // missing
  // Muted Trumpet: Brass
  "0590_Aspirin_sf2_file",
  "0590_Chaos_sf2_file",
  "0590_FluidR3_GM_sf2_file",
  "0590_GeneralUserGS_sf2_file",
  "0590_JCLive_sf2_file",
  // winner
  //'0590_SBLive_sf2',
  //'0590_SoundBlasterOld_sf2',
  // '0591_GeneralUserGS_sf2_file', // missing
  // French Horn: Brass
  "0600_Aspirin_sf2_file",
  //'0600_Chaos_sf2_file', // weird jumps
  "0600_FluidR3_GM_sf2_file",
  // tiny crackles
  "0600_GeneralUserGS_sf2_file",
  // tiny crackles
  "0600_JCLive_sf2_file",
  // tiny crackles
  //'0600_SBLive_sf2',
  //'0600_SoundBlasterOld_sf2',
  "0601_FluidR3_GM_sf2_file",
  //'0601_GeneralUserGS_sf2_file', // tiny crackles
  // '0602_GeneralUserGS_sf2_file', // bad gain diffs
  // '0603_GeneralUserGS_sf2_file', // tiny crackles
  // Brass Section: Brass
  "0610_Aspirin_sf2_file",
  "0610_Chaos_sf2_file",
  "0610_FluidR3_GM_sf2_file",
  // large
  "0610_GeneralUserGS_sf2_file",
  "0610_JCLive_sf2_file",
  //'0610_SBLive_sf2',
  //'0610_SoundBlasterOld_sf2',
  // '0611_GeneralUserGS_sf2_file', // missing sounds
  // '0612_GeneralUserGS_sf2_file',
  //'0613_GeneralUserGS_sf2_file', // -1 oct
  // '0614_GeneralUserGS_sf2_file', // missing sounds
  // '0615_GeneralUserGS_sf2_file', // missing sounds
  // Synth Brass 1: Brass
  "0620_Aspirin_sf2_file",
  //'0620_Chaos_sf2_file', // weird gain diff
  "0620_FluidR3_GM_sf2_file",
  //'0620_GeneralUserGS_sf2_file', // loooud
  // '0620_JCLive_sf2_file', // weird gain diff
  //'0620_SBLive_sf2',
  //'0620_SoundBlasterOld_sf2',
  "0621_Aspirin_sf2_file",
  "0621_FluidR3_GM_sf2_file",
  // '0621_GeneralUserGS_sf2_file', // detune + loooud
  //'0622_FluidR3_GM_sf2_file', // loud..
  //'0622_GeneralUserGS_sf2_file', // loud + crackles
  // Synth Brass 2: Brass
  "0630_Aspirin_sf2_file",
  "0630_Chaos_sf2_file",
  "0630_FluidR3_GM_sf2_file",
  //'0630_GeneralUserGS_sf2_file', // detune + looud
  "0630_JCLive_sf2_file",
  //'0630_SBLive_sf2',
  //'0630_SoundBlasterOld_sf2',
  // '0631_Aspirin_sf2_file', // looud + detune + gain diffs
  "0631_FluidR3_GM_sf2_file",
  //'0631_GeneralUserGS_sf2_file', // crackles
  "0632_FluidR3_GM_sf2_file",
  "0633_FluidR3_GM_sf2_file",
  // tiny crackles
  // Soprano Sax: Reed
  "0640_Aspirin_sf2_file",
  "0640_Chaos_sf2_file",
  "0640_FluidR3_GM_sf2_file",
  // '0640_GeneralUserGS_sf2_file', // crackles
  "0640_JCLive_sf2_file",
  //'0640_SBLive_sf2',
  //'0640_SoundBlasterOld_sf2',
  "0641_FluidR3_GM_sf2_file",
  // Alto Sax: Reed
  //'0650_Aspirin_sf2_file', // this is not an alto sax
  "0650_Chaos_sf2_file",
  "0650_FluidR3_GM_sf2_file",
  // sounds really stringy
  "0650_GeneralUserGS_sf2_file",
  "0650_JCLive_sf2_file",
  //'0650_SBLive_sf2',
  //'0650_SoundBlasterOld_sf2',
  "0651_Aspirin_sf2_file",
  "0651_FluidR3_GM_sf2_file",
  // really stringy
  // Tenor Sax: Reed
  "0660_Aspirin_sf2_file",
  "0660_Chaos_sf2_file",
  //'0660_FluidR3_GM_sf2_file', // weird pitches
  "0660_GeneralUserGS_sf2_file",
  "0660_JCLive_sf2_file",
  //'0660_SBLive_sf2',
  //'0660_SoundBlasterOld_sf2',
  // '0661_FluidR3_GM_sf2_file', // weird pitches
  // '0661_GeneralUserGS_sf2_file', // missing
  // Baritone Sax: Reed
  "0670_Aspirin_sf2_file",
  "0670_Chaos_sf2_file",
  "0670_FluidR3_GM_sf2_file",
  // huge
  "0670_GeneralUserGS_sf2_file",
  "0670_JCLive_sf2_file",
  //'0670_SBLive_sf2',
  //'0670_SoundBlasterOld_sf2',
  "0671_FluidR3_GM_sf2_file",
  // huge
  // Oboe: Reed
  //'0680_Aspirin_sf2_file', // tiny crackles
  "0680_Chaos_sf2_file",
  // tiny crackles
  "0680_FluidR3_GM_sf2_file",
  // tiny crackles
  "0680_GeneralUserGS_sf2_file",
  "0680_JCLive_sf2_file",
  //'0680_SBLive_sf2',
  //'0680_SoundBlasterOld_sf2',
  "0681_FluidR3_GM_sf2_file",
  // tiny crackles
  // English Horn: Reed
  "0690_Aspirin_sf2_file",
  //'0690_Chaos_sf2_file', // detuned
  "0690_FluidR3_GM_sf2_file",
  //'0690_GeneralUserGS_sf2_file', // +1 oct
  "0690_JCLive_sf2_file",
  //'0690_SBLive_sf2',
  //'0690_SoundBlasterOld_sf2',
  "0691_FluidR3_GM_sf2_file",
  // tiny crackles
  // Bassoon: Reed
  //'0700_Aspirin_sf2_file', // detune + gain diffs
  // '0700_Chaos_sf2_file', // detune + crackles
  "0700_FluidR3_GM_sf2_file",
  "0700_GeneralUserGS_sf2_file",
  // tiny crackles
  "0700_JCLive_sf2_file",
  //'0700_SBLive_sf2',
  //'0700_SoundBlasterOld_sf2',
  "0701_FluidR3_GM_sf2_file",
  // tiny crackles
  //'0701_GeneralUserGS_sf2_file', // missing
  // Clarinet: Reed
  "0710_Aspirin_sf2_file",
  // tiny crackles
  "0710_Chaos_sf2_file",
  // tiny crackles
  "0710_FluidR3_GM_sf2_file",
  "0710_GeneralUserGS_sf2_file",
  "0710_JCLive_sf2_file",
  //'0710_SBLive_sf2',
  //'0710_SoundBlasterOld_sf2',
  "0711_FluidR3_GM_sf2_file",
  // Piccolo: Pipe
  "0720_Aspirin_sf2_file",
  // +1oct
  // '0720_Chaos_sf2_file', // not a piccolo
  "0720_FluidR3_GM_sf2_file",
  "0720_GeneralUserGS_sf2_file",
  // crackles
  "0720_JCLive_sf2_file",
  //'0720_SBLive_sf2',
  //'0720_SoundBlasterOld_sf2',
  "0721_FluidR3_GM_sf2_file",
  //'0721_SoundBlasterOld_sf2',
  // Flute: Pipe
  "0730_Aspirin_sf2_file",
  //'0730_Chaos_sf2_file', // etune
  "0730_FluidR3_GM_sf2_file",
  "0730_GeneralUserGS_sf2_file",
  "0730_JCLive_sf2_file",
  //'0730_SBLive_sf2',
  //'0730_SoundBlasterOld_sf2',
  //'0731_Aspirin_sf2_file', // not a flute
  "0731_FluidR3_GM_sf2_file",
  //'0731_SoundBlasterOld_sf2',
  // Recorder: Pipe
  "0740_Aspirin_sf2_file",
  "0740_Chaos_sf2_file",
  "0740_FluidR3_GM_sf2_file",
  "0740_GeneralUserGS_sf2_file",
  "0740_JCLive_sf2_file",
  //'0740_SBLive_sf2',
  //'0740_SoundBlasterOld_sf2',
  // '0741_GeneralUserGS_sf2_file', // missing
  // Pan Flute: Pipe
  "0750_Aspirin_sf2_file",
  // staccato
  "0750_Chaos_sf2_file",
  "0750_FluidR3_GM_sf2_file",
  "0750_GeneralUserGS_sf2_file",
  // crackles
  "0750_JCLive_sf2_file",
  //'0750_SBLive_sf2',
  //'0750_SoundBlasterOld_sf2',
  "0751_Aspirin_sf2_file",
  "0751_FluidR3_GM_sf2_file",
  "0751_GeneralUserGS_sf2_file",
  // crackles
  //'0751_SoundBlasterOld_sf2',
  // Blown bottle: Pipe
  // '0760_Aspirin_sf2_file', // same as below w crackle
  "0760_Chaos_sf2_file",
  "0760_FluidR3_GM_sf2_file",
  "0760_GeneralUserGS_sf2_file",
  "0760_JCLive_sf2_file",
  //'0760_SBLive_sf2',
  //'0760_SoundBlasterOld_sf2',
  "0761_FluidR3_GM_sf2_file",
  // '0761_GeneralUserGS_sf2_file', // missing
  //'0761_SoundBlasterOld_sf2',
  // '0762_GeneralUserGS_sf2_file', // missing
  // Shakuhachi: Pipe
  "0770_Aspirin_sf2_file",
  // staccato
  //'0770_Chaos_sf2_file', // not shakuhachi
  "0770_FluidR3_GM_sf2_file",
  "0770_GeneralUserGS_sf2_file",
  "0770_JCLive_sf2_file",
  //'0770_SBLive_sf2',
  //'0770_SoundBlasterOld_sf2',
  "0771_FluidR3_GM_sf2_file",
  // '0771_GeneralUserGS_sf2_file', // missing
  // '0772_GeneralUserGS_sf2_file', // missing
  // Whistle: Pipe
  "0780_Aspirin_sf2_file",
  // crackles
  "0780_Chaos_sf2_file",
  // crackles
  "0780_FluidR3_GM_sf2_file",
  //'0780_GeneralUserGS_sf2_file', // loud..
  "0780_JCLive_sf2_file",
  // crackles
  //'0780_SBLive_sf2',
  //'0780_SoundBlasterOld_sf2',
  // '0781_GeneralUserGS_sf2_file', // detune + crackles
  // Ocarina: Pipe
  "0790_Aspirin_sf2_file",
  // tiny crackles
  //'0790_Chaos_sf2_file', // same as above
  "0790_FluidR3_GM_sf2_file",
  "0790_GeneralUserGS_sf2_file",
  "0790_JCLive_sf2_file",
  // crackles
  //'0790_SBLive_sf2',
  //'0790_SoundBlasterOld_sf2',
  //'0791_GeneralUserGS_sf2_file', // missing
  // Lead 1 (square): Synth Lead
  "0800_Aspirin_sf2_file",
  "0800_Chaos_sf2_file",
  "0800_FluidR3_GM_sf2_file",
  // '0800_GeneralUserGS_sf2_file', // detuned
  // '0800_JCLive_sf2_file', // detuned
  //'0800_SBLive_sf2',
  //'0800_SoundBlasterOld_sf2',
  //'0801_FluidR3_GM_sf2_file', // detune
  // '0801_GeneralUserGS_sf2_file', // detune
  // Lead 2 (sawtooth): Synth Lead
  "0810_Aspirin_sf2_file",
  "0810_Chaos_sf2_file",
  "0810_FluidR3_GM_sf2_file",
  "0810_GeneralUserGS_sf2_file",
  "0810_JCLive_sf2_file",
  //'0810_SBLive_sf2',
  //'0810_SoundBlasterOld_sf2',
  "0811_Aspirin_sf2_file",
  "0811_GeneralUserGS_sf2_file",
  //'0811_SoundBlasterOld_sf2',
  // Lead 3 (calliope): Synth Lead
  "0820_Aspirin_sf2_file",
  "0820_Chaos_sf2_file",
  "0820_FluidR3_GM_sf2_file",
  "0820_GeneralUserGS_sf2_file",
  "0820_JCLive_sf2_file",
  // +1 oct
  //'0820_SBLive_sf2',
  //'0820_SoundBlasterOld_sf2',
  "0821_FluidR3_GM_sf2_file",
  "0821_GeneralUserGS_sf2_file",
  //'0821_SoundBlasterOld_sf2',
  // '0822_GeneralUserGS_sf2_file', // missing
  //'0823_GeneralUserGS_sf2_file', // missing
  // Lead 4 (chiff): Synth Lead
  "0830_Aspirin_sf2_file",
  // '0830_Chaos_sf2_file', // same as above
  "0830_FluidR3_GM_sf2_file",
  "0830_GeneralUserGS_sf2_file",
  "0830_JCLive_sf2_file",
  // flute synth
  //'0830_SBLive_sf2',
  //'0830_SoundBlasterOld_sf2',
  "0831_FluidR3_GM_sf2_file",
  "0831_GeneralUserGS_sf2_file",
  //'0831_SoundBlasterOld_sf2',
  // Lead 5 (charang): Synth Lead
  "0840_Aspirin_sf2_file",
  "0840_Chaos_sf2_file",
  "0840_FluidR3_GM_sf2_file",
  "0840_GeneralUserGS_sf2_file",
  "0840_JCLive_sf2_file",
  // detune?
  //'0840_SBLive_sf2',
  //'0840_SoundBlasterOld_sf2',
  "0841_Aspirin_sf2_file",
  "0841_Chaos_sf2_file",
  "0841_FluidR3_GM_sf2_file",
  "0841_GeneralUserGS_sf2_file",
  //'0841_JCLive_sf2_file', // +1oct + detune
  //'0841_SoundBlasterOld_sf2',
  "0842_FluidR3_GM_sf2_file",
  // Lead 6 (voice): Synth Lead
  "0850_Aspirin_sf2_file",
  // '0850_Chaos_sf2_file', // same as above
  "0850_FluidR3_GM_sf2_file",
  // '0850_GeneralUserGS_sf2_file', // no voice
  "0850_JCLive_sf2_file",
  // more a flute
  //'0850_SBLive_sf2',
  //'0850_SoundBlasterOld_sf2',
  "0851_FluidR3_GM_sf2_file",
  "0851_GeneralUserGS_sf2_file",
  "0851_JCLive_sf2_file",
  //'0851_SoundBlasterOld_sf2',
  // Lead 7 (fifths): Synth Lead
  "0860_Aspirin_sf2_file",
  "0860_Chaos_sf2_file",
  // '0860_FluidR3_GM_sf2_file', // loud and not fitting
  "0860_GeneralUserGS_sf2_file",
  "0860_JCLive_sf2_file",
  //'0860_SBLive_sf2',
  //'0860_SoundBlasterOld_sf2',
  "0861_Aspirin_sf2_file",
  // '0861_FluidR3_GM_sf2_file', // lout and not fitting
  //'0861_SoundBlasterOld_sf2',
  // Lead 8 (bass + lead): Synth Lead
  "0870_Aspirin_sf2_file",
  "0870_Chaos_sf2_file",
  "0870_FluidR3_GM_sf2_file",
  "0870_GeneralUserGS_sf2_file",
  "0870_JCLive_sf2_file",
  //'0870_SBLive_sf2',
  //'0870_SoundBlasterOld_sf2',
  // '0871_GeneralUserGS_sf2_file', // loud + detune
  //'0872_GeneralUserGS_sf2_file', // loud
  //'0873_GeneralUserGS_sf2_file', // loud
  // Pad 1 (new age): Synth Pad
  "0880_Aspirin_sf2_file",
  "0880_Chaos_sf2_file",
  "0880_FluidR3_GM_sf2_file",
  "0880_GeneralUserGS_sf2_file",
  "0880_JCLive_sf2_file",
  //'0880_SBLive_sf2',
  //'0880_SoundBlasterOld_sf2',
  "0881_Aspirin_sf2_file",
  "0881_FluidR3_GM_sf2_file",
  "0881_GeneralUserGS_sf2_file",
  //'0881_SoundBlasterOld_sf2',
  "0882_Aspirin_sf2_file",
  // staccato
  // '0882_FluidR3_GM_sf2_file', // missing
  "0882_GeneralUserGS_sf2_file",
  //'0883_GeneralUserGS_sf2_file', // missing
  // '0884_GeneralUserGS_sf2_file', // broken
  "0885_GeneralUserGS_sf2_file",
  //'0886_GeneralUserGS_sf2_file', // not a pad
  "0887_GeneralUserGS_sf2_file",
  //'0888_GeneralUserGS_sf2_file', // not a pad
  //'0889_GeneralUserGS_sf2_file', // not a pad
  // Pad 2 (warm): Synth Pad
  "0890_Aspirin_sf2_file",
  "0890_Chaos_sf2_file",
  "0890_FluidR3_GM_sf2_file",
  "0890_GeneralUserGS_sf2_file",
  // 1mb large
  "0890_JCLive_sf2_file",
  //'0890_SBLive_sf2',
  //'0890_SoundBlasterOld_sf2',
  "0891_Aspirin_sf2_file",
  "0891_FluidR3_GM_sf2_file",
  // '0891_GeneralUserGS_sf2_file', // noise
  // Pad 3 (polysynth): Synth Pad
  //'0900_Aspirin_sf2_file', // same as belo
  "0900_Chaos_sf2_file",
  "0900_FluidR3_GM_sf2_file",
  "0900_GeneralUserGS_sf2_file",
  "0900_JCLive_sf2_file",
  // a bit plucky for a pad
  //'0900_SBLive_sf2',
  //'0900_SoundBlasterOld_sf2',
  "0901_Aspirin_sf2_file",
  "0901_FluidR3_GM_sf2_file",
  "0901_GeneralUserGS_sf2_file",
  //'0901_SoundBlasterOld_sf2',
  // Pad 4 (choir): Synth Pad
  "0910_Aspirin_sf2_file",
  //'0910_Chaos_sf2_file', // +1oct
  "0910_FluidR3_GM_sf2_file",
  "0910_GeneralUserGS_sf2_file",
  "0910_JCLive_sf2_file",
  //'0910_SBLive_sf2',
  //'0910_SoundBlasterOld_sf2',
  // '0911_Aspirin_sf2_file', // fluty, crackles
  "0911_GeneralUserGS_sf2_file",
  "0911_JCLive_sf2_file",
  // the only choiry pad
  //'0911_SoundBlasterOld_sf2',
  // Pad 5 (bowed): Synth Pad
  "0920_Aspirin_sf2_file",
  //'0920_Chaos_sf2_file', // same as above
  //'0920_FluidR3_GM_sf2_file', // detuned?
  "0920_GeneralUserGS_sf2_file",
  "0920_JCLive_sf2_file",
  //'0920_SBLive_sf2',
  //'0920_SoundBlasterOld_sf2',
  "0921_Aspirin_sf2_file",
  "0921_GeneralUserGS_sf2_file",
  //'0921_SoundBlasterOld_sf2',
  // Pad 6 (metallic): Synth Pad
  "0930_Aspirin_sf2_file",
  "0930_Chaos_sf2_file",
  "0930_FluidR3_GM_sf2_file",
  // little crackles
  "0930_GeneralUserGS_sf2_file",
  // '0930_JCLive_sf2_file', // buggy zones: guitar / synth
  //'0930_SBLive_sf2',
  //'0930_SoundBlasterOld_sf2',
  "0931_Aspirin_sf2_file",
  // sitar
  "0931_FluidR3_GM_sf2_file",
  "0931_GeneralUserGS_sf2_file",
  // guitar
  //'0931_SoundBlasterOld_sf2',
  // Pad 7 (halo): Synth Pad
  // '0940_Aspirin_sf2_file', // same as below
  "0940_Chaos_sf2_file",
  "0940_FluidR3_GM_sf2_file",
  "0940_GeneralUserGS_sf2_file",
  "0940_JCLive_sf2_file",
  //'0940_SBLive_sf2',
  //'0940_SoundBlasterOld_sf2',
  "0941_Aspirin_sf2_file",
  "0941_FluidR3_GM_sf2_file",
  "0941_GeneralUserGS_sf2_file",
  "0941_JCLive_sf2_file",
  // Pad 8 (sweep): Synth Pad
  "0950_Aspirin_sf2_file",
  "0950_Chaos_sf2_file",
  "0950_FluidR3_GM_sf2_file",
  "0950_GeneralUserGS_sf2_file",
  "0950_JCLive_sf2_file",
  //'0950_SBLive_sf2',
  //'0950_SoundBlasterOld_sf2',
  "0951_FluidR3_GM_sf2_file",
  "0951_GeneralUserGS_sf2_file",
  // FX 1 (rain): Synth Effects
  //'0960_Aspirin_sf2_file', //mixed samples?
  "0960_Chaos_sf2_file",
  // pad?
  "0960_FluidR3_GM_sf2_file",
  // ???
  "0960_GeneralUserGS_sf2_file",
  // pad
  // '0960_JCLive_sf2_file', // mixed samples?
  //'0960_SBLive_sf2',
  //'0960_SoundBlasterOld_sf2',
  "0961_Aspirin_sf2_file",
  "0961_FluidR3_GM_sf2_file",
  // '0961_GeneralUserGS_sf2_file', // ?!?!
  //'0961_SoundBlasterOld_sf2',
  "0962_GeneralUserGS_sf2_file",
  // FX 2 (soundtrack): Synth Effects
  "0970_Aspirin_sf2_file",
  //'0970_Chaos_sf2_file', // wrong pitch
  "0970_FluidR3_GM_sf2_file",
  "0970_GeneralUserGS_sf2_file",
  // not looping..
  //'0970_JCLive_sf2_file', // wrong pitch
  //'0970_SBLive_sf2',
  //'0970_SoundBlasterOld_sf2',
  "0971_FluidR3_GM_sf2_file",
  "0971_GeneralUserGS_sf2_file",
  //'0971_SoundBlasterOld_sf2',
  // FX 3 (crystal): Synth Effects
  "0980_Aspirin_sf2_file",
  "0980_Chaos_sf2_file",
  // '0980_FluidR3_GM_sf2_file', // some notes are weird
  "0980_GeneralUserGS_sf2_file",
  "0980_JCLive_sf2_file",
  //'0980_SBLive_sf2',
  //'0980_SoundBlasterOld_sf2',
  "0981_Aspirin_sf2_file",
  // strings
  "0981_FluidR3_GM_sf2_file",
  // mallet
  "0981_GeneralUserGS_sf2_file",
  //'0981_SoundBlasterOld_sf2',
  "0982_GeneralUserGS_sf2_file",
  "0983_GeneralUserGS_sf2_file",
  // guitar
  "0984_GeneralUserGS_sf2_file",
  // FX 4 (atmosphere): Synth Effects
  "0990_Aspirin_sf2_file",
  // pad
  "0990_Chaos_sf2_file",
  // pad
  "0990_FluidR3_GM_sf2_file",
  // guitar
  "0990_GeneralUserGS_sf2_file",
  // guitar
  "0990_JCLive_sf2_file",
  // pad
  //'0990_SBLive_sf2',
  //'0990_SoundBlasterOld_sf2',
  "0991_Aspirin_sf2_file",
  // guitar
  "0991_FluidR3_GM_sf2_file",
  // pad
  "0991_GeneralUserGS_sf2_file",
  // pad
  "0991_JCLive_sf2_file",
  // guitar
  //'0991_SoundBlasterOld_sf2',
  "0992_FluidR3_GM_sf2_file",
  // pad
  "0992_JCLive_sf2_file",
  // guitar
  "0993_JCLive_sf2_file",
  // guitar
  "0994_JCLive_sf2_file",
  // guitar
  // FX 5 (brightness): Synth Effects
  "1000_Aspirin_sf2_file",
  "1000_Chaos_sf2_file",
  "1000_FluidR3_GM_sf2_file",
  "1000_GeneralUserGS_sf2_file",
  "1000_JCLive_sf2_file",
  //'1000_SBLive_sf2',
  //'1000_SoundBlasterOld_sf2',
  "1001_Aspirin_sf2_file",
  "1001_FluidR3_GM_sf2_file",
  "1001_GeneralUserGS_sf2_file",
  "1001_JCLive_sf2_file",
  //'1001_SoundBlasterOld_sf2',
  "1002_Aspirin_sf2_file",
  "1002_FluidR3_GM_sf2_file",
  "1002_GeneralUserGS_sf2_file",
  // FX 6 (goblins): Synth Effects
  "1010_Aspirin_sf2_file",
  "1010_Chaos_sf2_file",
  "1010_FluidR3_GM_sf2_file",
  "1010_GeneralUserGS_sf2_file",
  "1010_JCLive_sf2_file",
  //'1010_SBLive_sf2',
  //'1010_SoundBlasterOld_sf2',
  "1011_Aspirin_sf2_file",
  "1011_FluidR3_GM_sf2_file",
  "1011_JCLive_sf2_file",
  "1012_Aspirin_sf2_file",
  // FX 7 (echoes): Synth Effects
  "1020_Aspirin_sf2_file",
  "1020_Chaos_sf2_file",
  "1020_FluidR3_GM_sf2_file",
  "1020_GeneralUserGS_sf2_file",
  "1020_JCLive_sf2_file",
  //'1020_SBLive_sf2',
  //'1020_SoundBlasterOld_sf2',
  "1021_Aspirin_sf2_file",
  "1021_FluidR3_GM_sf2_file",
  "1021_GeneralUserGS_sf2_file",
  "1021_JCLive_sf2_file",
  //'1021_SoundBlasterOld_sf2',
  "1022_GeneralUserGS_sf2_file",
  // FX 8 (sci-fi): Synth Effects
  "1030_Aspirin_sf2_file",
  "1030_Chaos_sf2_file",
  "1030_FluidR3_GM_sf2_file",
  "1030_GeneralUserGS_sf2_file",
  "1030_JCLive_sf2_file",
  //'1030_SBLive_sf2',
  //'1030_SoundBlasterOld_sf2',
  "1031_Aspirin_sf2_file",
  "1031_FluidR3_GM_sf2_file",
  "1031_GeneralUserGS_sf2_file",
  //'1031_SoundBlasterOld_sf2',
  "1032_FluidR3_GM_sf2_file",
  // 'Sitar: Ethnic
  "1040_Aspirin_sf2_file",
  "1040_Chaos_sf2_file",
  "1040_FluidR3_GM_sf2_file",
  "1040_GeneralUserGS_sf2_file",
  "1040_JCLive_sf2_file",
  //'1040_SBLive_sf2',
  //'1040_SoundBlasterOld_sf2',
  "1041_FluidR3_GM_sf2_file",
  "1041_GeneralUserGS_sf2_file",
  // Banjo: Ethnic
  "1050_Aspirin_sf2_file",
  "1050_Chaos_sf2_file",
  "1050_FluidR3_GM_sf2_file",
  "1050_GeneralUserGS_sf2_file",
  "1050_JCLive_sf2_file",
  //'1050_SBLive_sf2',
  //'1050_SoundBlasterOld_sf2',
  "1051_GeneralUserGS_sf2_file",
  // Shamisen: Ethnic
  "1060_Aspirin_sf2_file",
  "1060_Chaos_sf2_file",
  "1060_FluidR3_GM_sf2_file",
  "1060_GeneralUserGS_sf2_file",
  "1060_JCLive_sf2_file",
  //'1060_SBLive_sf2',
  //'1060_SoundBlasterOld_sf2',
  "1061_FluidR3_GM_sf2_file",
  "1061_GeneralUserGS_sf2_file",
  //'1061_SoundBlasterOld_sf2',
  // Koto: Ethnic
  "1070_Aspirin_sf2_file",
  "1070_Chaos_sf2_file",
  "1070_FluidR3_GM_sf2_file",
  "1070_GeneralUserGS_sf2_file",
  "1070_JCLive_sf2_file",
  //'1070_SBLive_sf2',
  //'1070_SoundBlasterOld_sf2',
  "1071_FluidR3_GM_sf2_file",
  "1071_GeneralUserGS_sf2_file",
  "1072_GeneralUserGS_sf2_file",
  "1073_GeneralUserGS_sf2_file",
  // Kalimba: Ethnic
  "1080_Aspirin_sf2_file",
  "1080_Chaos_sf2_file",
  "1080_FluidR3_GM_sf2_file",
  "1080_GeneralUserGS_sf2_file",
  "1080_JCLive_sf2_file",
  //'1080_SBLive_sf2',
  //'1080_SoundBlasterOld_sf2',
  //'1081_SoundBlasterOld_sf2',
  // Bagpipe: Ethnic
  "1090_Aspirin_sf2_file",
  "1090_Chaos_sf2_file",
  "1090_FluidR3_GM_sf2_file",
  "1090_GeneralUserGS_sf2_file",
  "1090_JCLive_sf2_file",
  //'1090_SBLive_sf2',
  //'1090_SoundBlasterOld_sf2',
  //'1091_SoundBlasterOld_sf2',
  // Fiddle: Ethnic
  "1100_Aspirin_sf2_file",
  "1100_Chaos_sf2_file",
  "1100_FluidR3_GM_sf2_file",
  "1100_GeneralUserGS_sf2_file",
  "1100_JCLive_sf2_file",
  //'1100_SBLive_sf2',
  //'1100_SoundBlasterOld_sf2',
  "1101_Aspirin_sf2_file",
  "1101_FluidR3_GM_sf2_file",
  "1101_GeneralUserGS_sf2_file",
  "1102_GeneralUserGS_sf2_file",
  // Shanai: Ethnic
  "1110_Aspirin_sf2_file",
  "1110_Chaos_sf2_file",
  "1110_FluidR3_GM_sf2_file",
  "1110_GeneralUserGS_sf2_file",
  "1110_JCLive_sf2_file",
  //'1110_SBLive_sf2',
  //'1110_SoundBlasterOld_sf2',
  // Tinkle Bell: Percussive
  "1120_Aspirin_sf2_file",
  "1120_Chaos_sf2_file",
  "1120_FluidR3_GM_sf2_file",
  "1120_GeneralUserGS_sf2_file",
  "1120_JCLive_sf2_file",
  //'1120_SBLive_sf2',
  //'1120_SoundBlasterOld_sf2',
  //'1121_SoundBlasterOld_sf2',
  // Agogo: Percussive
  "1130_Aspirin_sf2_file",
  "1130_Chaos_sf2_file",
  "1130_FluidR3_GM_sf2_file",
  "1130_GeneralUserGS_sf2_file",
  "1130_JCLive_sf2_file",
  //'1130_SBLive_sf2',
  //'1130_SoundBlasterOld_sf2',
  "1131_FluidR3_GM_sf2_file",
  //'1131_SoundBlasterOld_sf2',
  // Steel Drums: Percussive
  "1140_Aspirin_sf2_file",
  "1140_Chaos_sf2_file",
  "1140_FluidR3_GM_sf2_file",
  "1140_GeneralUserGS_sf2_file",
  "1140_JCLive_sf2_file",
  //'1140_SBLive_sf2',
  //'1140_SoundBlasterOld_sf2',
  "1141_FluidR3_GM_sf2_file",
  // Woodblock: Percussive
  "1150_Aspirin_sf2_file",
  "1150_Chaos_sf2_file",
  "1150_FluidR3_GM_sf2_file",
  "1150_GeneralUserGS_sf2_file",
  "1150_JCLive_sf2_file",
  //'1150_SBLive_sf2',
  //'1150_SoundBlasterOld_sf2',
  "1151_FluidR3_GM_sf2_file",
  "1151_GeneralUserGS_sf2_file",
  "1152_FluidR3_GM_sf2_file",
  "1152_GeneralUserGS_sf2_file",
  // Taiko Drum: Percussive
  "1160_Aspirin_sf2_file",
  "1160_Chaos_sf2_file",
  "1160_FluidR3_GM_sf2_file",
  "1160_GeneralUserGS_sf2_file",
  "1160_JCLive_sf2_file",
  //'1160_SBLive_sf2',
  //'1160_SoundBlasterOld_sf2',
  "1161_FluidR3_GM_sf2_file",
  "1161_GeneralUserGS_sf2_file",
  //'1161_SoundBlasterOld_sf2',
  "1162_FluidR3_GM_sf2_file",
  "1162_GeneralUserGS_sf2_file",
  "1163_FluidR3_GM_sf2_file",
  // Melodic Tom: Percussive
  "1170_Aspirin_sf2_file",
  "1170_Chaos_sf2_file",
  "1170_FluidR3_GM_sf2_file",
  "1170_GeneralUserGS_sf2_file",
  "1170_JCLive_sf2_file",
  //'1170_SBLive_sf2',
  //'1170_SoundBlasterOld_sf2',
  "1171_FluidR3_GM_sf2_file",
  "1171_GeneralUserGS_sf2_file",
  "1172_FluidR3_GM_sf2_file",
  "1173_FluidR3_GM_sf2_file",
  // Synth Drum: Percussive
  "1180_Aspirin_sf2_file",
  "1180_Chaos_sf2_file",
  "1180_FluidR3_GM_sf2_file",
  "1180_GeneralUserGS_sf2_file",
  "1180_JCLive_sf2_file",
  //'1180_SBLive_sf2',
  //'1180_SoundBlasterOld_sf2',
  "1181_FluidR3_GM_sf2_file",
  "1181_GeneralUserGS_sf2_file",
  //'1181_SoundBlasterOld_sf2',
  // Reverse Cymbal: Percussive
  "1190_Aspirin_sf2_file",
  "1190_Chaos_sf2_file",
  "1190_FluidR3_GM_sf2_file",
  "1190_GeneralUserGS_sf2_file",
  "1190_JCLive_sf2_file",
  //'1190_SBLive_sf2',
  //'1190_SoundBlasterOld_sf2',
  "1191_GeneralUserGS_sf2_file",
  "1192_GeneralUserGS_sf2_file",
  "1193_GeneralUserGS_sf2_file",
  "1194_GeneralUserGS_sf2_file",
  // Guitar Fret Noise: Sound effects
  "1200_Aspirin_sf2_file",
  "1200_Chaos_sf2_file",
  "1200_FluidR3_GM_sf2_file",
  "1200_GeneralUserGS_sf2_file",
  "1200_JCLive_sf2_file",
  //'1200_SBLive_sf2',
  //'1200_SoundBlasterOld_sf2',
  "1201_Aspirin_sf2_file",
  "1201_GeneralUserGS_sf2_file",
  "1202_GeneralUserGS_sf2_file",
  // Breath Noise: Sound effects
  "1210_Aspirin_sf2_file",
  "1210_Chaos_sf2_file",
  "1210_FluidR3_GM_sf2_file",
  "1210_GeneralUserGS_sf2_file",
  "1210_JCLive_sf2_file",
  //'1210_SBLive_sf2',
  //'1210_SoundBlasterOld_sf2',
  "1211_Aspirin_sf2_file",
  "1211_GeneralUserGS_sf2_file",
  "1212_GeneralUserGS_sf2_file",
  // Seashore: Sound effects
  "1220_Aspirin_sf2_file",
  "1220_Chaos_sf2_file",
  "1220_FluidR3_GM_sf2_file",
  "1220_GeneralUserGS_sf2_file",
  "1220_JCLive_sf2_file",
  //'1220_SBLive_sf2',
  //'1220_SoundBlasterOld_sf2',
  "1221_Aspirin_sf2_file",
  "1221_GeneralUserGS_sf2_file",
  "1221_JCLive_sf2_file",
  "1222_Aspirin_sf2_file",
  "1222_GeneralUserGS_sf2_file",
  "1223_Aspirin_sf2_file",
  "1223_GeneralUserGS_sf2_file",
  "1224_Aspirin_sf2_file",
  "1224_GeneralUserGS_sf2_file",
  "1225_GeneralUserGS_sf2_file",
  "1226_GeneralUserGS_sf2_file",
  // Bird Tweet: Sound effects
  "1230_Aspirin_sf2_file",
  "1230_Chaos_sf2_file",
  "1230_FluidR3_GM_sf2_file",
  "1230_GeneralUserGS_sf2_file",
  "1230_JCLive_sf2_file",
  //'1230_SBLive_sf2',
  //'1230_SoundBlasterOld_sf2',
  "1231_Aspirin_sf2_file",
  "1231_GeneralUserGS_sf2_file",
  "1232_Aspirin_sf2_file",
  "1232_GeneralUserGS_sf2_file",
  "1233_GeneralUserGS_sf2_file",
  "1234_GeneralUserGS_sf2_file",
  // Telephone Ring: Sound effects
  "1240_Aspirin_sf2_file",
  "1240_Chaos_sf2_file",
  "1240_FluidR3_GM_sf2_file",
  "1240_GeneralUserGS_sf2_file",
  "1240_JCLive_sf2_file",
  //'1240_SBLive_sf2',
  //'1240_SoundBlasterOld_sf2',
  "1241_Aspirin_sf2_file",
  "1241_GeneralUserGS_sf2_file",
  "1242_Aspirin_sf2_file",
  "1242_GeneralUserGS_sf2_file",
  "1243_Aspirin_sf2_file",
  "1243_GeneralUserGS_sf2_file",
  "1244_Aspirin_sf2_file",
  "1244_GeneralUserGS_sf2_file",
  // Helicopter: Sound effects
  "1250_Aspirin_sf2_file",
  "1250_Chaos_sf2_file",
  "1250_FluidR3_GM_sf2_file",
  "1250_GeneralUserGS_sf2_file",
  "1250_JCLive_sf2_file",
  //'1250_SBLive_sf2',
  //'1250_SoundBlasterOld_sf2',
  "1251_Aspirin_sf2_file",
  "1251_FluidR3_GM_sf2_file",
  "1251_GeneralUserGS_sf2_file",
  "1252_Aspirin_sf2_file",
  "1252_FluidR3_GM_sf2_file",
  "1252_GeneralUserGS_sf2_file",
  "1253_Aspirin_sf2_file",
  "1253_GeneralUserGS_sf2_file",
  "1254_Aspirin_sf2_file",
  "1254_GeneralUserGS_sf2_file",
  "1255_Aspirin_sf2_file",
  "1255_GeneralUserGS_sf2_file",
  "1256_Aspirin_sf2_file",
  "1256_GeneralUserGS_sf2_file",
  "1257_Aspirin_sf2_file",
  "1257_GeneralUserGS_sf2_file",
  "1258_Aspirin_sf2_file",
  "1258_GeneralUserGS_sf2_file",
  "1259_GeneralUserGS_sf2_file",
  // Applause: Sound effects
  "1260_Aspirin_sf2_file",
  "1260_Chaos_sf2_file",
  "1260_FluidR3_GM_sf2_file",
  "1260_GeneralUserGS_sf2_file",
  "1260_JCLive_sf2_file",
  //'1260_SBLive_sf2',
  //'1260_SoundBlasterOld_sf2',
  "1261_Aspirin_sf2_file",
  "1261_GeneralUserGS_sf2_file",
  "1262_Aspirin_sf2_file",
  "1262_GeneralUserGS_sf2_file",
  "1263_Aspirin_sf2_file",
  "1263_GeneralUserGS_sf2_file",
  "1264_Aspirin_sf2_file",
  "1264_GeneralUserGS_sf2_file",
  "1265_Aspirin_sf2_file",
  "1265_GeneralUserGS_sf2_file",
  // Gunshot: Sound effects
  "1270_Aspirin_sf2_file",
  "1270_Chaos_sf2_file",
  "1270_FluidR3_GM_sf2_file",
  "1270_GeneralUserGS_sf2_file",
  "1270_JCLive_sf2_file",
  //'1270_SBLive_sf2',
  //'1270_SoundBlasterOld_sf2',
  "1271_Aspirin_sf2_file",
  "1271_GeneralUserGS_sf2_file",
  "1272_Aspirin_sf2_file",
  "1272_GeneralUserGS_sf2_file",
  "1273_GeneralUserGS_sf2_file",
  "1274_GeneralUserGS_sf2_file"
];
var drums = [
  ////'35_0_SBLive_sf2'
  "35_0_Chaos_sf2_file",
  "35_12_JCLive_sf2_file",
  "35_16_JCLive_sf2_file",
  "35_18_JCLive_sf2_file",
  "35_4_Chaos_sf2_file",
  //'36_0_SBLive_sf2',
  "36_12_JCLive_sf2_file",
  "36_16_JCLive_sf2_file",
  "36_18_JCLive_sf2_file",
  "36_4_Chaos_sf2_file",
  //'37_0_SBLive_sf2',
  "37_12_JCLive_sf2_file",
  "37_16_JCLive_sf2_file",
  "37_18_JCLive_sf2_file",
  "37_4_Chaos_sf2_file",
  //'38_0_SBLive_sf2',
  "38_12_JCLive_sf2_file",
  "38_16_JCLive_sf2_file",
  "38_18_JCLive_sf2_file",
  "38_4_Chaos_sf2_file",
  //'39_0_SBLive_sf2',
  "39_12_JCLive_sf2_file",
  "39_16_JCLive_sf2_file",
  "39_18_JCLive_sf2_file",
  "39_4_Chaos_sf2_file",
  //'40_0_SBLive_sf2',
  "40_12_JCLive_sf2_file",
  "40_16_JCLive_sf2_file",
  "40_18_JCLive_sf2_file",
  "40_4_Chaos_sf2_file",
  //'41_0_SBLive_sf2',
  "41_12_JCLive_sf2_file",
  "41_16_JCLive_sf2_file",
  "41_18_JCLive_sf2_file",
  "41_4_Chaos_sf2_file",
  //'42_0_SBLive_sf2',
  "42_12_JCLive_sf2_file",
  "42_16_JCLive_sf2_file",
  "42_18_JCLive_sf2_file",
  "42_4_Chaos_sf2_file",
  //'43_0_SBLive_sf2',
  "43_12_JCLive_sf2_file",
  "43_16_JCLive_sf2_file",
  "43_18_JCLive_sf2_file",
  "43_4_Chaos_sf2_file",
  //'44_0_SBLive_sf2',
  "44_12_JCLive_sf2_file",
  "44_16_JCLive_sf2_file",
  "44_18_JCLive_sf2_file",
  "44_4_Chaos_sf2_file",
  //'45_0_SBLive_sf2',
  "45_12_JCLive_sf2_file",
  "45_16_JCLive_sf2_file",
  "45_18_JCLive_sf2_file",
  "45_4_Chaos_sf2_file",
  //'46_0_SBLive_sf2',
  "46_12_JCLive_sf2_file",
  "46_16_JCLive_sf2_file",
  "46_18_JCLive_sf2_file",
  "46_4_Chaos_sf2_file",
  //'47_0_SBLive_sf2',
  "47_12_JCLive_sf2_file",
  "47_16_JCLive_sf2_file",
  "47_18_JCLive_sf2_file",
  "47_4_Chaos_sf2_file",
  //'48_0_SBLive_sf2',
  "48_12_JCLive_sf2_file",
  "48_16_JCLive_sf2_file",
  "48_18_JCLive_sf2_file",
  "48_4_Chaos_sf2_file",
  //'49_0_SBLive_sf2',
  "49_12_JCLive_sf2_file",
  "49_16_JCLive_sf2_file",
  "49_18_JCLive_sf2_file",
  "49_4_Chaos_sf2_file",
  //'50_0_SBLive_sf2',
  "50_12_JCLive_sf2_file",
  "50_16_JCLive_sf2_file",
  "50_18_JCLive_sf2_file",
  "50_4_Chaos_sf2_file",
  //'51_0_SBLive_sf2',
  "51_12_JCLive_sf2_file",
  "51_16_JCLive_sf2_file",
  "51_18_JCLive_sf2_file",
  "51_4_Chaos_sf2_file",
  //'52_0_SBLive_sf2',
  "52_12_JCLive_sf2_file",
  "52_16_JCLive_sf2_file",
  "52_18_JCLive_sf2_file",
  "52_4_Chaos_sf2_file",
  //'53_0_SBLive_sf2',
  "53_12_JCLive_sf2_file",
  "53_16_JCLive_sf2_file",
  "53_18_JCLive_sf2_file",
  "53_4_Chaos_sf2_file",
  //'54_0_SBLive_sf2',
  "54_12_JCLive_sf2_file",
  "54_16_JCLive_sf2_file",
  "54_18_JCLive_sf2_file",
  "54_4_Chaos_sf2_file",
  //'55_0_SBLive_sf2',
  "55_12_JCLive_sf2_file",
  "55_16_JCLive_sf2_file",
  "55_18_JCLive_sf2_file",
  "55_4_Chaos_sf2_file",
  //'56_0_SBLive_sf2',
  "56_12_JCLive_sf2_file",
  "56_16_JCLive_sf2_file",
  "56_18_JCLive_sf2_file",
  "56_4_Chaos_sf2_file",
  //'57_0_SBLive_sf2',
  "57_12_JCLive_sf2_file",
  "57_16_JCLive_sf2_file",
  "57_18_JCLive_sf2_file",
  "57_4_Chaos_sf2_file",
  //'58_0_SBLive_sf2',
  "58_12_JCLive_sf2_file",
  "58_16_JCLive_sf2_file",
  "58_18_JCLive_sf2_file",
  "58_4_Chaos_sf2_file",
  //'59_0_SBLive_sf2',
  "59_12_JCLive_sf2_file",
  "59_16_JCLive_sf2_file",
  "59_18_JCLive_sf2_file",
  "59_4_Chaos_sf2_file",
  //'60_0_SBLive_sf2',
  "60_12_JCLive_sf2_file",
  "60_16_JCLive_sf2_file",
  "60_18_JCLive_sf2_file",
  "60_4_Chaos_sf2_file",
  //'61_0_SBLive_sf2',
  "61_12_JCLive_sf2_file",
  "61_16_JCLive_sf2_file",
  "61_18_JCLive_sf2_file",
  "61_4_Chaos_sf2_file",
  //'62_0_SBLive_sf2',
  "62_12_JCLive_sf2_file",
  "62_16_JCLive_sf2_file",
  "62_18_JCLive_sf2_file",
  "62_4_Chaos_sf2_file",
  //'63_0_SBLive_sf2',
  "63_12_JCLive_sf2_file",
  "63_16_JCLive_sf2_file",
  "63_18_JCLive_sf2_file",
  "63_4_Chaos_sf2_file",
  //'64_0_SBLive_sf2',
  "64_12_JCLive_sf2_file",
  "64_16_JCLive_sf2_file",
  "64_18_JCLive_sf2_file",
  "64_4_Chaos_sf2_file",
  //'65_0_SBLive_sf2',
  "65_12_JCLive_sf2_file",
  "65_16_JCLive_sf2_file",
  "65_18_JCLive_sf2_file",
  "65_4_Chaos_sf2_file",
  //'66_0_SBLive_sf2',
  "66_12_JCLive_sf2_file",
  "66_16_JCLive_sf2_file",
  "66_18_JCLive_sf2_file",
  "66_4_Chaos_sf2_file",
  //'67_0_SBLive_sf2',
  "67_12_JCLive_sf2_file",
  "67_16_JCLive_sf2_file",
  "67_18_JCLive_sf2_file",
  "67_4_Chaos_sf2_file",
  //'68_0_SBLive_sf2',
  "68_12_JCLive_sf2_file",
  "68_16_JCLive_sf2_file",
  "68_18_JCLive_sf2_file",
  "68_4_Chaos_sf2_file",
  //'69_0_SBLive_sf2',
  "69_12_JCLive_sf2_file",
  "69_16_JCLive_sf2_file",
  "69_18_JCLive_sf2_file",
  "69_4_Chaos_sf2_file",
  //'70_0_SBLive_sf2',
  "70_12_JCLive_sf2_file",
  "70_16_JCLive_sf2_file",
  "70_18_JCLive_sf2_file",
  "70_4_Chaos_sf2_file",
  //'71_0_SBLive_sf2',
  "71_12_JCLive_sf2_file",
  "71_16_JCLive_sf2_file",
  "71_18_JCLive_sf2_file",
  "71_4_Chaos_sf2_file",
  //'72_0_SBLive_sf2',
  "72_12_JCLive_sf2_file",
  "72_16_JCLive_sf2_file",
  "72_18_JCLive_sf2_file",
  "72_4_Chaos_sf2_file",
  //'73_0_SBLive_sf2',
  "73_12_JCLive_sf2_file",
  "73_16_JCLive_sf2_file",
  "73_18_JCLive_sf2_file",
  "73_4_Chaos_sf2_file",
  //'74_0_SBLive_sf2',
  "74_12_JCLive_sf2_file",
  "74_16_JCLive_sf2_file",
  "74_18_JCLive_sf2_file",
  "74_4_Chaos_sf2_file",
  //'75_0_SBLive_sf2',
  "75_12_JCLive_sf2_file",
  "75_16_JCLive_sf2_file",
  "75_18_JCLive_sf2_file",
  "75_4_Chaos_sf2_file",
  //'76_0_SBLive_sf2',
  "76_12_JCLive_sf2_file",
  "76_16_JCLive_sf2_file",
  "76_18_JCLive_sf2_file",
  "76_4_Chaos_sf2_file",
  //'77_0_SBLive_sf2',
  "77_12_JCLive_sf2_file",
  "77_16_JCLive_sf2_file",
  "77_18_JCLive_sf2_file",
  "77_4_Chaos_sf2_file",
  //'78_0_SBLive_sf2',
  "78_12_JCLive_sf2_file",
  "78_16_JCLive_sf2_file",
  "78_18_JCLive_sf2_file",
  "78_4_Chaos_sf2_file",
  //'79_0_SBLive_sf2',
  "79_12_JCLive_sf2_file",
  "79_16_JCLive_sf2_file",
  "79_18_JCLive_sf2_file",
  "79_4_Chaos_sf2_file",
  //'80_0_SBLive_sf2',
  "80_12_JCLive_sf2_file",
  "80_16_JCLive_sf2_file",
  "80_18_JCLive_sf2_file",
  "80_4_Chaos_sf2_file",
  //'81_0_SBLive_sf2',
  "81_12_JCLive_sf2_file",
  "81_16_JCLive_sf2_file",
  "81_18_JCLive_sf2_file",
  "81_4_Chaos_sf2_file"
];
var instrumentNames = [];
instrumentNames[0] = "Acoustic Grand Piano: Piano";
instrumentNames[1] = "Bright Acoustic Piano: Piano";
instrumentNames[2] = "Electric Grand Piano: Piano";
instrumentNames[3] = "Honky-tonk Piano: Piano";
instrumentNames[4] = "Electric Piano 1: Piano";
instrumentNames[5] = "Electric Piano 2: Piano";
instrumentNames[6] = "Harpsichord: Piano";
instrumentNames[7] = "Clavinet: Piano";
instrumentNames[8] = "Celesta: Chromatic Percussion";
instrumentNames[9] = "Glockenspiel: Chromatic Percussion";
instrumentNames[10] = "Music Box: Chromatic Percussion";
instrumentNames[11] = "Vibraphone: Chromatic Percussion";
instrumentNames[12] = "Marimba: Chromatic Percussion";
instrumentNames[13] = "Xylophone: Chromatic Percussion";
instrumentNames[14] = "Tubular Bells: Chromatic Percussion";
instrumentNames[15] = "Dulcimer: Chromatic Percussion";
instrumentNames[16] = "Drawbar Organ: Organ";
instrumentNames[17] = "Percussive Organ: Organ";
instrumentNames[18] = "Rock Organ: Organ";
instrumentNames[19] = "Church Organ: Organ";
instrumentNames[20] = "Reed Organ: Organ";
instrumentNames[21] = "Accordion: Organ";
instrumentNames[22] = "Harmonica: Organ";
instrumentNames[23] = "Tango Accordion: Organ";
instrumentNames[24] = "Acoustic Guitar (nylon): Guitar";
instrumentNames[25] = "Acoustic Guitar (steel): Guitar";
instrumentNames[26] = "Electric Guitar (jazz): Guitar";
instrumentNames[27] = "Electric Guitar (clean): Guitar";
instrumentNames[28] = "Electric Guitar (muted): Guitar";
instrumentNames[29] = "Overdriven Guitar: Guitar";
instrumentNames[30] = "Distortion Guitar: Guitar";
instrumentNames[31] = "Guitar Harmonics: Guitar";
instrumentNames[32] = "Acoustic Bass: Bass";
instrumentNames[33] = "Electric Bass (finger): Bass";
instrumentNames[34] = "Electric Bass (pick): Bass";
instrumentNames[35] = "Fretless Bass: Bass";
instrumentNames[36] = "Slap Bass 1: Bass";
instrumentNames[37] = "Slap Bass 2: Bass";
instrumentNames[38] = "Synth Bass 1: Bass";
instrumentNames[39] = "Synth Bass 2: Bass";
instrumentNames[40] = "Violin: Strings";
instrumentNames[41] = "Viola: Strings";
instrumentNames[42] = "Cello: Strings";
instrumentNames[43] = "Contrabass: Strings";
instrumentNames[44] = "Tremolo Strings: Strings";
instrumentNames[45] = "Pizzicato Strings: Strings";
instrumentNames[46] = "Orchestral Harp: Strings";
instrumentNames[47] = "Timpani: Strings";
instrumentNames[48] = "String Ensemble 1: Ensemble";
instrumentNames[49] = "String Ensemble 2: Ensemble";
instrumentNames[50] = "Synth Strings 1: Ensemble";
instrumentNames[51] = "Synth Strings 2: Ensemble";
instrumentNames[52] = "Choir Aahs: Ensemble";
instrumentNames[53] = "Voice Oohs: Ensemble";
instrumentNames[54] = "Synth Choir: Ensemble";
instrumentNames[55] = "Orchestra Hit: Ensemble";
instrumentNames[56] = "Trumpet: Brass";
instrumentNames[57] = "Trombone: Brass";
instrumentNames[58] = "Tuba: Brass";
instrumentNames[59] = "Muted Trumpet: Brass";
instrumentNames[60] = "French Horn: Brass";
instrumentNames[61] = "Brass Section: Brass";
instrumentNames[62] = "Synth Brass 1: Brass";
instrumentNames[63] = "Synth Brass 2: Brass";
instrumentNames[64] = "Soprano Sax: Reed";
instrumentNames[65] = "Alto Sax: Reed";
instrumentNames[66] = "Tenor Sax: Reed";
instrumentNames[67] = "Baritone Sax: Reed";
instrumentNames[68] = "Oboe: Reed";
instrumentNames[69] = "English Horn: Reed";
instrumentNames[70] = "Bassoon: Reed";
instrumentNames[71] = "Clarinet: Reed";
instrumentNames[72] = "Piccolo: Pipe";
instrumentNames[73] = "Flute: Pipe";
instrumentNames[74] = "Recorder: Pipe";
instrumentNames[75] = "Pan Flute: Pipe";
instrumentNames[76] = "Blown bottle: Pipe";
instrumentNames[77] = "Shakuhachi: Pipe";
instrumentNames[78] = "Whistle: Pipe";
instrumentNames[79] = "Ocarina: Pipe";
instrumentNames[80] = "Lead 1 (square): Synth Lead";
instrumentNames[81] = "Lead 2 (sawtooth): Synth Lead";
instrumentNames[82] = "Lead 3 (calliope): Synth Lead";
instrumentNames[83] = "Lead 4 (chiff): Synth Lead";
instrumentNames[84] = "Lead 5 (charang): Synth Lead";
instrumentNames[85] = "Lead 6 (voice): Synth Lead";
instrumentNames[86] = "Lead 7 (fifths): Synth Lead";
instrumentNames[87] = "Lead 8 (bass + lead): Synth Lead";
instrumentNames[88] = "Pad 1 (new age): Synth Pad";
instrumentNames[89] = "Pad 2 (warm): Synth Pad";
instrumentNames[90] = "Pad 3 (polysynth): Synth Pad";
instrumentNames[91] = "Pad 4 (choir): Synth Pad";
instrumentNames[92] = "Pad 5 (bowed): Synth Pad";
instrumentNames[93] = "Pad 6 (metallic): Synth Pad";
instrumentNames[94] = "Pad 7 (halo): Synth Pad";
instrumentNames[95] = "Pad 8 (sweep): Synth Pad";
instrumentNames[96] = "FX 1 (rain): Synth Effects";
instrumentNames[97] = "FX 2 (soundtrack): Synth Effects";
instrumentNames[98] = "FX 3 (crystal): Synth Effects";
instrumentNames[99] = "FX 4 (atmosphere): Synth Effects";
instrumentNames[100] = "FX 5 (brightness): Synth Effects";
instrumentNames[101] = "FX 6 (goblins): Synth Effects";
instrumentNames[102] = "FX 7 (echoes): Synth Effects";
instrumentNames[103] = "FX 8 (sci-fi): Synth Effects";
instrumentNames[104] = "Sitar: Ethnic";
instrumentNames[105] = "Banjo: Ethnic";
instrumentNames[106] = "Shamisen: Ethnic";
instrumentNames[107] = "Koto: Ethnic";
instrumentNames[108] = "Kalimba: Ethnic";
instrumentNames[109] = "Bagpipe: Ethnic";
instrumentNames[110] = "Fiddle: Ethnic";
instrumentNames[111] = "Shanai: Ethnic";
instrumentNames[112] = "Tinkle Bell: Percussive";
instrumentNames[113] = "Agogo: Percussive";
instrumentNames[114] = "Steel Drums: Percussive";
instrumentNames[115] = "Woodblock: Percussive";
instrumentNames[116] = "Taiko Drum: Percussive";
instrumentNames[117] = "Melodic Tom: Percussive";
instrumentNames[118] = "Synth Drum: Percussive";
instrumentNames[119] = "Reverse Cymbal: Percussive";
instrumentNames[120] = "Guitar Fret Noise: Sound effects";
instrumentNames[121] = "Breath Noise: Sound effects";
instrumentNames[122] = "Seashore: Sound effects";
instrumentNames[123] = "Bird Tweet: Sound effects";
instrumentNames[124] = "Telephone Ring: Sound effects";
instrumentNames[125] = "Helicopter: Sound effects";
instrumentNames[126] = "Applause: Sound effects";
instrumentNames[127] = "Gunshot: Sound effects";
var list = Object.freeze(Object.defineProperty({
  __proto__: null,
  drums,
  instrumentNames,
  instruments
}, Symbol.toStringTag, { value: "Module" }));
f.prototype.soundfont = function(e, l2 = 0) {
  return this.onTrigger((s, f2, a, r) => {
    const n = W2(), i2 = Gu(s), G3 = e.presets[l2 % e.presets.length], u = r, o = [n, G3, lt(i2), u];
    ce2(...o)(u + s.duration);
  });
};
var soundfontCache = /* @__PURE__ */ new Map();
function loadSoundfont(e) {
  if (soundfontCache.get(e))
    return soundfontCache.get(e);
  const l2 = ae2(e);
  return soundfontCache.set(e, l2), l2;
}
export {
  getFontBufferSource,
  loadSoundfont,
  registerSoundfonts,
  setSoundfontUrl,
  list as soundfontList,
  ce2 as startPresetNote
};
//# sourceMappingURL=@strudel_soundfonts.js.map
