import {
  __export
} from "./chunk-G3PMV62Z.js";

// node_modules/@strudel/core/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  ClockCollator: () => Ke,
  Cyclist: () => Nu,
  Fraction: () => d,
  Hap: () => x,
  Pattern: () => f,
  State: () => nt,
  TimeSpan: () => C,
  __chooseWith: () => de,
  _brandBy: () => fe,
  _fitslice: () => mn,
  _irand: () => he,
  _keyDown: () => ge,
  _match: () => yn,
  _mod: () => pt,
  _morph: () => Yt,
  _polymeterListSteps: () => wn,
  _retime: () => Nt,
  _slices: () => $t,
  accelerate: () => Wn,
  activeLabel: () => jo,
  ad: () => Lc,
  add: () => xa,
  adsr: () => Wc,
  almostAlways: () => Lf,
  almostNever: () => Wf,
  always: () => Hf,
  amp: () => Vn,
  analyze: () => rs,
  anchor: () => ii,
  and: () => Da,
  apply: () => ql,
  ar: () => Hc,
  arp: () => ca,
  arpWith: () => ia,
  arrange: () => fa,
  as: () => cu,
  att: () => Dn,
  attack: () => Fn,
  averageArray: () => Me,
  backgroundImage: () => uh,
  band: () => Ma,
  bandf: () => hs,
  bandq: () => ys,
  bank: () => ss,
  base64ToUnicode: () => Qe,
  bbexpr: () => $s,
  bbst: () => Ws,
  beat: () => Fp,
  begin: () => ws,
  berlin: () => Cf,
  berlinWith: () => xu,
  binary: () => mf,
  binaryN: () => wu,
  bind: () => wa,
  binshift: () => ac,
  bite: () => Bl,
  bjork: () => ne,
  blshift: () => Pa,
  bor: () => Ja,
  bp: () => ms,
  bpa: () => br,
  bpattack: () => wr,
  bpd: () => Sr,
  bpdecay: () => Ar,
  bpe: () => hr,
  bpenv: () => fr,
  bpf: () => ds,
  bpq: () => gs,
  bpr: () => Nr,
  bprelease: () => Pr,
  bps: () => zr,
  bpsustain: () => Or,
  brak: () => Rl,
  brand: () => _f,
  brandBy: () => bf,
  brshift: () => Na,
  bxor: () => ja,
  bypass: () => hp,
  byteBeatExpression: () => Ns,
  byteBeatStartTime: () => Rs,
  calculateSteps: () => ra,
  cat: () => pn,
  ccn: () => Uc,
  ccv: () => Kc,
  ceil: () => Xa,
  ch: () => Is,
  channel: () => nr,
  channels: () => Ls,
  choose: () => _u,
  chooseCycles: () => vu,
  chooseIn: () => kf,
  chooseInWith: () => me,
  chooseOut: () => qf,
  chooseWith: () => Ot,
  chop: () => Pp,
  chord: () => si,
  chunk: () => np,
  chunkBack: () => op,
  chunkBackInto: () => fp,
  chunkInto: () => lp,
  chunkback: () => ip,
  chunkbackinto: () => pp,
  chunkinto: () => ap,
  clamp: () => Re,
  cleanupUi: () => ah,
  clip: () => vc,
  coarse: () => Ts,
  code2hash: () => ea,
  color: () => Nc,
  colour: () => $c,
  comb: () => ic,
  compose: () => Uu,
  compress: () => rl,
  compressSpan: () => ol,
  compressor: () => Ci,
  compressorAttack: () => zi,
  compressorKnee: () => Bi,
  compressorRatio: () => Oi,
  compressorRelease: () => Ei,
  compressspan: () => il,
  constant: () => Ku,
  contract: () => An,
  control: () => Qc,
  controls: () => Gp,
  cosine: () => sf,
  cosine2: () => rf,
  cpm: () => Al,
  cps: () => _c,
  createClock: () => pu,
  createParam: () => Tt,
  createParams: () => Rc,
  crush: () => Ss,
  ctf: () => or,
  ctlNum: () => Xc,
  ctranspose: () => Ro,
  curry: () => g,
  curve: () => Tc,
  cut: () => sr,
  cutoff: () => rr,
  cycleToSeconds: () => Pt,
  dec: () => cs,
  decay: () => is,
  degrade: () => zf,
  degradeBy: () => Of,
  degradeByWith: () => Bf,
  degree: () => No,
  delay: () => to,
  delayfb: () => no,
  delayfeedback: () => eo,
  delaysync: () => co,
  delayt: () => oo,
  delaytime: () => ro,
  deltaSlide: () => xc,
  det: () => lo,
  detune: () => ao,
  dfb: () => so,
  dict: () => oi,
  dictionary: () => ri,
  dist: () => xi,
  distort: () => Ti,
  div: () => Oa,
  djf: () => Zr,
  drawLine: () => nn,
  drive: () => Ps,
  drop: () => vn,
  dry: () => ho,
  ds: () => Ic,
  dt: () => io,
  duck: () => Ms,
  duckattack: () => js,
  duckdepth: () => Js,
  dur: () => Ac,
  duration: () => qc,
  e: () => Up,
  early: () => Sl,
  echo: () => Kl,
  echoWith: () => Dl,
  echowith: () => Gl,
  eish: () => ef,
  end: () => bs,
  enhance: () => rc,
  eq: () => Ia,
  eqt: () => Ha,
  errorLogger: () => Ht,
  euclid: () => Qp,
  euclidLegato: () => Yp,
  euclidLegatoRot: () => Zp,
  euclidRot: () => Xp,
  euclidish: () => tf,
  euclidrot: () => Kp,
  evalScope: () => Mu,
  evaluate: () => ju,
  every: () => kl,
  expand: () => qn,
  expression: () => Ri,
  extend: () => kn,
  fadeInTime: () => go,
  fadeOutTime: () => yo,
  fadeTime: () => mo,
  fanchor: () => Rr,
  fast: () => hl,
  fastChunk: () => up,
  fastGap: () => cl,
  fastcat: () => N,
  fastchunk: () => cp,
  fastgap: () => ul,
  fft: () => os,
  filter: () => wp,
  filterWhen: () => bp,
  firstOf: () => vl,
  fit: () => Lp,
  flatten: () => F,
  floor: () => Ka,
  fm: () => Un,
  fmattack: () => Xn,
  fmdecay: () => Zn,
  fmenv: () => Kn,
  fmh: () => Gn,
  fmi: () => Qn,
  fmrelease: () => es,
  fmsustain: () => ts,
  fmvelocity: () => ns,
  fmwave: () => Yn,
  focus: () => al,
  focusSpan: () => ll,
  focusspan: () => pl,
  fractionalArgs: () => Xu,
  frameRate: () => fc,
  frames: () => hc,
  freeze: () => Zi,
  freq: () => wo,
  freqToMidi: () => Oe,
  fromBipolar: () => Za,
  fshift: () => Li,
  fshiftnote: () => Ii,
  fshiftphase: () => Hi,
  ftype: () => $r,
  func: () => Qa,
  gain: () => In,
  gap: () => it,
  gat: () => zo,
  gate: () => Oo,
  getControlName: () => te,
  getCurrentKeyboardState: () => Ze,
  getEventOffsetMs: () => Vu,
  getFreq: () => ze,
  getFrequency: () => Qu,
  getPerformanceTimeSeconds: () => sa,
  getPlayableNoteValue: () => Gu,
  getSoundIndex: () => Du,
  getTime: () => ih,
  getTrigger: () => $u,
  grow: () => vp,
  gt: () => Ra,
  gte: () => La,
  harmonic: () => Wo,
  hash2code: () => na,
  hbrick: () => lc,
  hcutoff: () => Dr,
  hold: () => fs,
  hours: () => dc,
  hp: () => Qr,
  hpa: () => gr,
  hpattack: () => yr,
  hpd: () => qr,
  hpdecay: () => kr,
  hpe: () => pr,
  hpenv: () => lr,
  hpf: () => Gr,
  hpq: () => Kr,
  hpr: () => jr,
  hprelease: () => Jr,
  hps: () => Br,
  hpsustain: () => Cr,
  hresonance: () => Ur,
  hsl: () => gp,
  hsla: () => yp,
  hurry: () => ml,
  id: () => tt,
  imag: () => sc,
  inhabit: () => th,
  inhabitmod: () => nh,
  innerBind: () => ba,
  inside: () => wl,
  inv: () => Pl,
  invert: () => jl,
  ir: () => gi,
  irand: () => vf,
  irbegin: () => _i,
  iresponse: () => wi,
  irspeed: () => bi,
  isControlName: () => Mn,
  isNote: () => _t,
  isNoteWithOctave: () => Iu,
  isPattern: () => Ut,
  isaw: () => xt,
  isaw2: () => oe,
  iter: () => Yl,
  iterBack: () => Zl,
  iterback: () => tp,
  itri: () => af,
  itri2: () => lf,
  jux: () => Fl,
  juxBy: () => Hl,
  juxby: () => Vl,
  kcutoff: () => Di,
  keep: () => Sa,
  keepif: () => Ta,
  keyAlias: () => Ye,
  keyDown: () => Ff,
  krush: () => Fi,
  label: () => Po,
  lastOf: () => _l,
  late: () => hn,
  lbrick: () => pc,
  legato: () => kc,
  leslie: () => Eo,
  lfo: () => Oc,
  linger: () => Ol,
  listRange: () => Vt,
  lock: () => uo,
  logKey: () => It,
  logger: () => z,
  loop: () => _s,
  loopAt: () => Rp,
  loopAtCps: () => Ip,
  loopBegin: () => vs,
  loopEnd: () => qs,
  loopat: () => Wp,
  loopatcps: () => Hp,
  loopb: () => ks,
  loope: () => As,
  lp: () => cr,
  lpa: () => mr,
  lpattack: () => dr,
  lpd: () => vr,
  lpdecay: () => _r,
  lpe: () => ar,
  lpenv: () => ur,
  lpf: () => ir,
  lpq: () => Yr,
  lpr: () => Mr,
  lprelease: () => Er,
  lps: () => xr,
  lpsustain: () => Tr,
  lrate: () => Mo,
  lsize: () => Jo,
  lt: () => $a,
  lte: () => Wa,
  mapArgs: () => Dt,
  mask: () => da,
  midi2note: () => Fu,
  midiToFreq: () => et,
  midibend: () => ru,
  midichan: () => Vc,
  midicmd: () => Gc,
  midimap: () => Fc,
  midiport: () => Dc,
  miditouch: () => ou,
  minutes: () => mc,
  mod: () => za,
  mode: () => ai,
  morph: () => Dp,
  mouseX: () => df,
  mouseY: () => ff,
  mousex: () => hf,
  mousey: () => pf,
  mtranspose: () => $o,
  mul: () => Ba,
  n: () => $n,
  nanFallback: () => Je,
  ne: () => Va,
  net: () => Fa,
  never: () => If,
  noise: () => Hr,
  note: () => Rn,
  noteToMidi: () => lt,
  nothing: () => R,
  nrpnn: () => Yc,
  nrpv: () => Zc,
  nudge: () => Ho,
  numeralArgs: () => $,
  objectMap: () => Ue,
  octave: () => Vo,
  octaveR: () => Io,
  octaves: () => ui,
  octer: () => Gi,
  octersub: () => Qi,
  octersubsub: () => Ui,
  off: () => $l,
  offset: () => ci,
  often: () => $f,
  or: () => Ga,
  orbit: () => Fo,
  outerBind: () => _a,
  outside: () => bl,
  overgain: () => Do,
  overshape: () => Go,
  pace: () => gn,
  pairs: () => $e,
  palindrome: () => Il,
  pan: () => Qo,
  panchor: () => Bo,
  panorient: () => Yo,
  panspan: () => Uo,
  pansplay: () => Ko,
  panwidth: () => Xo,
  parseFractional: () => Ne,
  parseNumeral: () => Ft,
  partials: () => oc,
  patt: () => _o,
  pattack: () => bo,
  pcurve: () => Co,
  pdec: () => ko,
  pdecay: () => vo,
  penv: () => xo,
  perlin: () => xf,
  perlinWith: () => Su,
  ph: () => Gs,
  phasdp: () => er,
  phaser: () => Qs,
  phasercenter: () => Xs,
  phaserdepth: () => Zs,
  phaserrate: () => Ds,
  phasersweep: () => Us,
  phc: () => Ys,
  phd: () => tr,
  phs: () => Ks,
  pick: () => Cu,
  pickF: () => Df,
  pickOut: () => Qf,
  pickReset: () => Yf,
  pickRestart: () => Kf,
  pickSqueeze: () => eh,
  pickmod: () => Ou,
  pickmodF: () => Gf,
  pickmodOut: () => Uf,
  pickmodReset: () => Zf,
  pickmodRestart: () => Xf,
  pickmodSqueeze: () => sh,
  pipe: () => Pe,
  pitchJump: () => Cc,
  pitchJumpTime: () => Bc,
  ply: () => fl,
  pm: () => la,
  polyBind: () => qa,
  polyTouch: () => iu,
  polymeter: () => St,
  polyrhythm: () => ua,
  postgain: () => Hn,
  pow: () => Ea,
  pr: () => aa,
  prel: () => To,
  prelease: () => So,
  press: () => Ll,
  pressBy: () => Wl,
  progNum: () => tu,
  psus: () => Ao,
  psustain: () => qo,
  pure: () => P2,
  pw: () => Hs,
  pwrate: () => Vs,
  pwsweep: () => Fs,
  rand: () => W,
  rand2: () => wf,
  randcat: () => Af,
  randrun: () => bu,
  range: () => tl,
  range2: () => nl,
  rangex: () => el,
  rarely: () => Rf,
  rate: () => Zo,
  ratio: () => sl,
  rdim: () => di,
  real: () => nc,
  ref: () => Vp,
  register: () => l,
  registerControl: () => i,
  reify: () => h,
  rel: () => ps,
  release: () => ls,
  removeUndefineds: () => ot,
  repeatCycles: () => ep,
  repeatTime: () => zc,
  repl: () => ch,
  resonance: () => Xr,
  rev: () => dn,
  rfade: () => yi,
  rib: () => mp,
  ribbon: () => dp,
  ring: () => Ki,
  ringdf: () => Yi,
  ringf: () => Xi,
  rlp: () => fi,
  room: () => li,
  roomdim: () => hi,
  roomfade: () => mi,
  roomlp: () => pi,
  roomsize: () => vi,
  rotate: () => je,
  round: () => Ua,
  rsize: () => Ai,
  run: () => gu,
  s: () => Jn,
  s_add: () => Cp,
  s_alt: () => Ap,
  s_cat: () => qp,
  s_contract: () => Ep,
  s_expand: () => Op,
  s_extend: () => zp,
  s_polymeter: () => Sp,
  s_sub: () => Bp,
  s_taper: () => Tp,
  s_taperlist: () => xp,
  s_tour: () => Mp,
  s_zip: () => Jp,
  saw: () => ht,
  saw2: () => re,
  scram: () => uc,
  scramble: () => gf,
  scrub: () => uu,
  seconds: () => yc,
  seg: () => El,
  segment: () => zl,
  semitone: () => ei,
  seq: () => fn,
  seqPLoop: () => ha,
  sequence: () => D,
  sequenceP: () => cn,
  set: () => Aa,
  setStringParser: () => oa,
  setTime: () => Lt,
  shape: () => Si,
  shrink: () => Tn,
  shrinklist: () => Sn,
  shuffle: () => yf,
  signal: () => I,
  silence: () => S,
  sine: () => fu,
  sine2: () => ie,
  size: () => ki,
  slice: () => On,
  slide: () => ti,
  slow: () => yl,
  slowChunk: () => rp,
  slowcat: () => K,
  slowcatPrime: () => Kt,
  slowchunk: () => sp,
  smear: () => cc,
  sol2note: () => Yu,
  someCycles: () => Nf,
  someCyclesBy: () => Pf,
  sometimes: () => jf,
  sometimesBy: () => Jf,
  songPtr: () => gc,
  sound: () => jn,
  source: () => Pn,
  sparsity: () => gl,
  speak: () => oh,
  speed: () => Zt,
  splice: () => $p,
  splitAt: () => Gt,
  spread: () => fo,
  square: () => hu,
  square2: () => of,
  squeeze: () => rh,
  squeezeBind: () => va,
  squiz: () => ji,
  src: () => Nn,
  stack: () => B,
  stackBy: () => pa,
  stackCentre: () => ln,
  stackLeft: () => un,
  stackRight: () => an,
  steady: () => nf,
  stepBind: () => ka,
  stepalt: () => bn,
  stepcat: () => j,
  steps: () => jp,
  stepsPerOctave: () => Lo,
  stretch: () => Mi,
  striate: () => Np,
  stringifyValues: () => Qt,
  struct: () => ma,
  strudelScope: () => Eu,
  stut: () => Xl,
  stutWith: () => Ql,
  stutwith: () => Ul,
  sub: () => Ca,
  superimpose: () => ya,
  sus: () => as,
  sustain: () => us,
  sustainpedal: () => Wi,
  swing: () => Jl,
  swingBy: () => Ml,
  sysex: () => eu,
  sysexdata: () => su,
  sysexid: () => nu,
  sz: () => qi,
  take: () => _n,
  time: () => ce,
  timeCat: () => Bn,
  timecat: () => kp,
  toBipolar: () => Ya,
  tokenizeNote: () => xe,
  tour: () => xn,
  tremolo: () => xs,
  tremolodepth: () => Bs,
  tremolophase: () => zs,
  tremoloshape: () => Es,
  tremoloskew: () => Os,
  tremolosync: () => Cs,
  tri: () => cf,
  tri2: () => uf,
  triode: () => Vi,
  tsdelay: () => ec,
  uid: () => wc,
  undegrade: () => Mf,
  undegradeBy: () => Ef,
  unicodeToBase64: () => Ge,
  uniq: () => Zu,
  uniqsort: () => ta,
  uniqsortr: () => De,
  unison: () => po,
  unit: () => Ji,
  v: () => Ir,
  val: () => bc,
  valueToMidi: () => Hu,
  velocity: () => Ln,
  vib: () => Wr,
  vibmod: () => Vr,
  vibrato: () => Lr,
  vmod: () => Fr,
  voice: () => ni,
  vowel: () => Pi,
  waveloss: () => Ni,
  wchoose: () => Sf,
  wchooseCycles: () => qu,
  when: () => Nl,
  whenKey: () => Vf,
  withValue: () => ga,
  within: () => _p,
  wrandcat: () => Tf,
  xfade: () => zn,
  xsdelay: () => tc,
  zcrush: () => Jc,
  zdelay: () => jc,
  zip: () => Cn,
  zipWith: () => vt,
  zmod: () => Mc,
  znoise: () => Ec,
  zoom: () => Tl,
  zoomArc: () => xl,
  zoomarc: () => Cl,
  zrand: () => Sc,
  zzfx: () => Pc
});

// node_modules/fraction.js/dist/fraction.mjs
if (typeof BigInt === "undefined") BigInt = function(n) {
  if (isNaN(n)) throw new Error("");
  return n;
};
var C_ZERO = BigInt(0);
var C_ONE = BigInt(1);
var C_TWO = BigInt(2);
var C_THREE = BigInt(3);
var C_FIVE = BigInt(5);
var C_TEN = BigInt(10);
var MAX_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);
var MAX_CYCLE_LEN = 2e3;
var P = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE
};
function assign(n, s) {
  try {
    n = BigInt(n);
  } catch (e) {
    throw InvalidParameter();
  }
  return n * s;
}
function ifloor(x2) {
  return typeof x2 === "bigint" ? x2 : Math.floor(x2);
}
function newFraction(n, d2) {
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  const f2 = Object.create(Fraction.prototype);
  f2["s"] = n < C_ZERO ? -C_ONE : C_ONE;
  n = n < C_ZERO ? -n : n;
  const a = gcd(n, d2);
  f2["n"] = n / a;
  f2["d"] = d2 / a;
  return f2;
}
var FACTORSTEPS = [C_TWO * C_TWO, C_TWO, C_TWO * C_TWO, C_TWO, C_TWO * C_TWO, C_TWO * C_THREE, C_TWO, C_TWO * C_THREE];
function factorize(n) {
  const factors = /* @__PURE__ */ Object.create(null);
  if (n <= C_ONE) {
    factors[n] = C_ONE;
    return factors;
  }
  const add = (p) => {
    factors[p] = (factors[p] || C_ZERO) + C_ONE;
  };
  while (n % C_TWO === C_ZERO) {
    add(C_TWO);
    n /= C_TWO;
  }
  while (n % C_THREE === C_ZERO) {
    add(C_THREE);
    n /= C_THREE;
  }
  while (n % C_FIVE === C_ZERO) {
    add(C_FIVE);
    n /= C_FIVE;
  }
  for (let si2 = 0, p = C_TWO + C_FIVE; p * p <= n; ) {
    while (n % p === C_ZERO) {
      add(p);
      n /= p;
    }
    p += FACTORSTEPS[si2];
    si2 = si2 + 1 & 7;
  }
  if (n > C_ONE) add(n);
  return factors;
}
var parse = function(p1, p2) {
  let n = C_ZERO, d2 = C_ONE, s = C_ONE;
  if (p1 === void 0 || p1 === null) {
  } else if (p2 !== void 0) {
    if (typeof p1 === "bigint") {
      n = p1;
    } else if (isNaN(p1)) {
      throw InvalidParameter();
    } else if (p1 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      n = BigInt(p1);
    }
    if (typeof p2 === "bigint") {
      d2 = p2;
    } else if (isNaN(p2)) {
      throw InvalidParameter();
    } else if (p2 % 1 !== 0) {
      throw NonIntegerParameter();
    } else {
      d2 = BigInt(p2);
    }
    s = n * d2;
  } else if (typeof p1 === "object") {
    if ("d" in p1 && "n" in p1) {
      n = BigInt(p1["n"]);
      d2 = BigInt(p1["d"]);
      if ("s" in p1)
        n *= BigInt(p1["s"]);
    } else if (0 in p1) {
      n = BigInt(p1[0]);
      if (1 in p1)
        d2 = BigInt(p1[1]);
    } else if (typeof p1 === "bigint") {
      n = p1;
    } else {
      throw InvalidParameter();
    }
    s = n * d2;
  } else if (typeof p1 === "number") {
    if (isNaN(p1)) {
      throw InvalidParameter();
    }
    if (p1 < 0) {
      s = -C_ONE;
      p1 = -p1;
    }
    if (p1 % 1 === 0) {
      n = BigInt(p1);
    } else {
      let z2 = 1;
      let A = 0, B2 = 1;
      let C2 = 1, D2 = 1;
      let N2 = 1e7;
      if (p1 >= 1) {
        z2 = 10 ** Math.floor(1 + Math.log10(p1));
        p1 /= z2;
      }
      while (B2 <= N2 && D2 <= N2) {
        let M = (A + C2) / (B2 + D2);
        if (p1 === M) {
          if (B2 + D2 <= N2) {
            n = A + C2;
            d2 = B2 + D2;
          } else if (D2 > B2) {
            n = C2;
            d2 = D2;
          } else {
            n = A;
            d2 = B2;
          }
          break;
        } else {
          if (p1 > M) {
            A += C2;
            B2 += D2;
          } else {
            C2 += A;
            D2 += B2;
          }
          if (B2 > N2) {
            n = C2;
            d2 = D2;
          } else {
            n = A;
            d2 = B2;
          }
        }
      }
      n = BigInt(n) * BigInt(z2);
      d2 = BigInt(d2);
    }
  } else if (typeof p1 === "string") {
    let ndx = 0;
    let v = C_ZERO, w = C_ZERO, x2 = C_ZERO, y = C_ONE, z2 = C_ONE;
    let match = p1.replace(/_/g, "").match(/\d+|./g);
    if (match === null)
      throw InvalidParameter();
    if (match[ndx] === "-") {
      s = -C_ONE;
      ndx++;
    } else if (match[ndx] === "+") {
      ndx++;
    }
    if (match.length === ndx + 1) {
      w = assign(match[ndx++], s);
    } else if (match[ndx + 1] === "." || match[ndx] === ".") {
      if (match[ndx] !== ".") {
        v = assign(match[ndx++], s);
      }
      ndx++;
      if (ndx + 1 === match.length || match[ndx + 1] === "(" && match[ndx + 3] === ")" || match[ndx + 1] === "'" && match[ndx + 3] === "'") {
        w = assign(match[ndx], s);
        y = C_TEN ** BigInt(match[ndx].length);
        ndx++;
      }
      if (match[ndx] === "(" && match[ndx + 2] === ")" || match[ndx] === "'" && match[ndx + 2] === "'") {
        x2 = assign(match[ndx + 1], s);
        z2 = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;
        ndx += 3;
      }
    } else if (match[ndx + 1] === "/" || match[ndx + 1] === ":") {
      w = assign(match[ndx], s);
      y = assign(match[ndx + 2], C_ONE);
      ndx += 3;
    } else if (match[ndx + 3] === "/" && match[ndx + 1] === " ") {
      v = assign(match[ndx], s);
      w = assign(match[ndx + 2], s);
      y = assign(match[ndx + 4], C_ONE);
      ndx += 5;
    }
    if (match.length <= ndx) {
      d2 = y * z2;
      s = /* void */
      n = x2 + d2 * v + z2 * w;
    } else {
      throw InvalidParameter();
    }
  } else if (typeof p1 === "bigint") {
    n = p1;
    s = p1;
    d2 = C_ONE;
  } else {
    throw InvalidParameter();
  }
  if (d2 === C_ZERO) {
    throw DivisionByZero();
  }
  P["s"] = s < C_ZERO ? -C_ONE : C_ONE;
  P["n"] = n < C_ZERO ? -n : n;
  P["d"] = d2 < C_ZERO ? -d2 : d2;
};
function modpow(b, e, m) {
  let r = C_ONE;
  for (; e > C_ZERO; b = b * b % m, e >>= C_ONE) {
    if (e & C_ONE) {
      r = r * b % m;
    }
  }
  return r;
}
function cycleLen(n, d2) {
  for (; d2 % C_TWO === C_ZERO; d2 /= C_TWO) {
  }
  for (; d2 % C_FIVE === C_ZERO; d2 /= C_FIVE) {
  }
  if (d2 === C_ONE)
    return C_ZERO;
  let rem = C_TEN % d2;
  let t = 1;
  for (; rem !== C_ONE; t++) {
    rem = rem * C_TEN % d2;
    if (t > MAX_CYCLE_LEN)
      return C_ZERO;
  }
  return BigInt(t);
}
function cycleStart(n, d2, len) {
  let rem1 = C_ONE;
  let rem2 = modpow(C_TEN, len, d2);
  for (let t = 0; t < 300; t++) {
    if (rem1 === rem2)
      return BigInt(t);
    rem1 = rem1 * C_TEN % d2;
    rem2 = rem2 * C_TEN % d2;
  }
  return 0;
}
function gcd(a, b) {
  if (!a)
    return b;
  if (!b)
    return a;
  while (1) {
    a %= b;
    if (!a)
      return b;
    b %= a;
    if (!b)
      return a;
  }
}
function Fraction(a, b) {
  parse(a, b);
  if (this instanceof Fraction) {
    a = gcd(P["d"], P["n"]);
    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  } else {
    return newFraction(P["s"] * P["n"], P["d"]);
  }
}
var DivisionByZero = function() {
  return new Error("Division by Zero");
};
var InvalidParameter = function() {
  return new Error("Invalid argument");
};
var NonIntegerParameter = function() {
  return new Error("Parameters must be integer");
};
Fraction.prototype = {
  "s": C_ONE,
  "n": C_ZERO,
  "d": C_ONE,
  /**
   * Calculates the absolute value
   *
   * Ex: new Fraction(-4).abs() => 4
   **/
  "abs": function() {
    return newFraction(this["n"], this["d"]);
  },
  /**
   * Inverts the sign of the current fraction
   *
   * Ex: new Fraction(-4).neg() => 4
   **/
  "neg": function() {
    return newFraction(-this["s"] * this["n"], this["d"]);
  },
  /**
   * Adds two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
   **/
  "add": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Subtracts two rational numbers
   *
   * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
   **/
  "sub": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Multiplies two rational numbers
   *
   * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
   **/
  "mul": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["n"],
      this["d"] * P["d"]
    );
  },
  /**
   * Divides two rational numbers
   *
   * Ex: new Fraction("-17.(345)").inverse().div(3)
   **/
  "div": function(a, b) {
    parse(a, b);
    return newFraction(
      this["s"] * P["s"] * this["n"] * P["d"],
      this["d"] * P["n"]
    );
  },
  /**
   * Clones the actual object
   *
   * Ex: new Fraction("-17.(345)").clone()
   **/
  "clone": function() {
    return newFraction(this["s"] * this["n"], this["d"]);
  },
  /**
   * Calculates the modulo of two rational numbers - a more precise fmod
   *
   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
   * Ex: new Fraction(20, 10).mod().equals(0) ? "is Integer"
   **/
  "mod": function(a, b) {
    if (a === void 0) {
      return newFraction(this["s"] * this["n"] % this["d"], C_ONE);
    }
    parse(a, b);
    if (C_ZERO === P["n"] * this["d"]) {
      throw DivisionByZero();
    }
    return newFraction(
      this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
      P["d"] * this["d"]
    );
  },
  /**
   * Calculates the fractional gcd of two rational numbers
   *
   * Ex: new Fraction(5,8).gcd(3,7) => 1/56
   */
  "gcd": function(a, b) {
    parse(a, b);
    return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
  },
  /**
   * Calculates the fractional lcm of two rational numbers
   *
   * Ex: new Fraction(5,8).lcm(3,7) => 15
   */
  "lcm": function(a, b) {
    parse(a, b);
    if (P["n"] === C_ZERO && this["n"] === C_ZERO) {
      return newFraction(C_ZERO, C_ONE);
    }
    return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
  },
  /**
   * Gets the inverse of the fraction, means numerator and denominator are exchanged
   *
   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
   **/
  "inverse": function() {
    return newFraction(this["s"] * this["d"], this["n"]);
  },
  /**
   * Calculates the fraction to some integer exponent
   *
   * Ex: new Fraction(-1,2).pow(-3) => -8
   */
  "pow": function(a, b) {
    parse(a, b);
    if (P["d"] === C_ONE) {
      if (P["s"] < C_ZERO) {
        return newFraction((this["s"] * this["d"]) ** P["n"], this["n"] ** P["n"]);
      } else {
        return newFraction((this["s"] * this["n"]) ** P["n"], this["d"] ** P["n"]);
      }
    }
    if (this["s"] < C_ZERO) return null;
    let N2 = factorize(this["n"]);
    let D2 = factorize(this["d"]);
    let n = C_ONE;
    let d2 = C_ONE;
    for (let k in N2) {
      if (k === "1") continue;
      if (k === "0") {
        n = C_ZERO;
        break;
      }
      N2[k] *= P["n"];
      if (N2[k] % P["d"] === C_ZERO) {
        N2[k] /= P["d"];
      } else return null;
      n *= BigInt(k) ** N2[k];
    }
    for (let k in D2) {
      if (k === "1") continue;
      D2[k] *= P["n"];
      if (D2[k] % P["d"] === C_ZERO) {
        D2[k] /= P["d"];
      } else return null;
      d2 *= BigInt(k) ** D2[k];
    }
    if (P["s"] < C_ZERO) {
      return newFraction(d2, n);
    }
    return newFraction(n, d2);
  },
  /**
   * Calculates the logarithm of a fraction to a given rational base
   *
   * Ex: new Fraction(27, 8).log(9, 4) => 3/2
   */
  "log": function(a, b) {
    parse(a, b);
    if (this["s"] <= C_ZERO || P["s"] <= C_ZERO) return null;
    const allPrimes = /* @__PURE__ */ Object.create(null);
    const baseFactors = factorize(P["n"]);
    const T1 = factorize(P["d"]);
    const numberFactors = factorize(this["n"]);
    const T2 = factorize(this["d"]);
    for (const prime in T1) {
      baseFactors[prime] = (baseFactors[prime] || C_ZERO) - T1[prime];
    }
    for (const prime in T2) {
      numberFactors[prime] = (numberFactors[prime] || C_ZERO) - T2[prime];
    }
    for (const prime in baseFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    for (const prime in numberFactors) {
      if (prime === "1") continue;
      allPrimes[prime] = true;
    }
    let retN = null;
    let retD = null;
    for (const prime in allPrimes) {
      const baseExponent = baseFactors[prime] || C_ZERO;
      const numberExponent = numberFactors[prime] || C_ZERO;
      if (baseExponent === C_ZERO) {
        if (numberExponent !== C_ZERO) {
          return null;
        }
        continue;
      }
      let curN = numberExponent;
      let curD = baseExponent;
      const gcdValue = gcd(curN, curD);
      curN /= gcdValue;
      curD /= gcdValue;
      if (retN === null && retD === null) {
        retN = curN;
        retD = curD;
      } else if (curN * retD !== retN * curD) {
        return null;
      }
    }
    return retN !== null && retD !== null ? newFraction(retN, retD) : null;
  },
  /**
   * Check if two rational numbers are the same
   *
   * Ex: new Fraction(19.6).equals([98, 5]);
   **/
  "equals": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] < P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is less than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "lte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] <= P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gt": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] > P["s"] * P["n"] * this["d"];
  },
  /**
   * Check if this rational number is greater than or equal another
   *
   * Ex: new Fraction(19.6).lt([98, 5]);
   **/
  "gte": function(a, b) {
    parse(a, b);
    return this["s"] * this["n"] * P["d"] >= P["s"] * P["n"] * this["d"];
  },
  /**
   * Compare two rational numbers
   * < 0 iff this < that
   * > 0 iff this > that
   * = 0 iff this = that
   *
   * Ex: new Fraction(19.6).compare([98, 5]);
   **/
  "compare": function(a, b) {
    parse(a, b);
    let t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
    return (C_ZERO < t) - (t < C_ZERO);
  },
  /**
   * Calculates the ceil of a rational number
   *
   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
   **/
  "ceil": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) + (places * this["n"] % this["d"] > C_ZERO && this["s"] >= C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Calculates the floor of a rational number
   *
   * Ex: new Fraction('4.(3)').floor() => (4 / 1)
   **/
  "floor": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) - (places * this["n"] % this["d"] > C_ZERO && this["s"] < C_ZERO ? C_ONE : C_ZERO),
      places
    );
  },
  /**
   * Rounds a rational numbers
   *
   * Ex: new Fraction('4.(3)').round() => (4 / 1)
   **/
  "round": function(places) {
    places = C_TEN ** BigInt(places || 0);
    return newFraction(
      ifloor(this["s"] * places * this["n"] / this["d"]) + this["s"] * ((this["s"] >= C_ZERO ? C_ONE : C_ZERO) + C_TWO * (places * this["n"] % this["d"]) > this["d"] ? C_ONE : C_ZERO),
      places
    );
  },
  /**
    * Rounds a rational number to a multiple of another rational number
    *
    * Ex: new Fraction('0.9').roundTo("1/8") => 7 / 8
    **/
  "roundTo": function(a, b) {
    parse(a, b);
    const n = this["n"] * P["d"];
    const d2 = this["d"] * P["n"];
    const r = n % d2;
    let k = ifloor(n / d2);
    if (r + r >= d2) {
      k++;
    }
    return newFraction(this["s"] * k * P["n"], P["d"]);
  },
  /**
   * Check if two rational numbers are divisible
   *
   * Ex: new Fraction(19.6).divisible(1.5);
   */
  "divisible": function(a, b) {
    parse(a, b);
    if (P["n"] === C_ZERO) return false;
    return this["n"] * P["d"] % (P["n"] * this["d"]) === C_ZERO;
  },
  /**
   * Returns a decimal representation of the fraction
   *
   * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
   **/
  "valueOf": function() {
    return Number(this["s"] * this["n"]) / Number(this["d"]);
  },
  /**
   * Creates a string representation of a fraction with all digits
   *
   * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
   **/
  "toString": function(dec = 15) {
    let N2 = this["n"];
    let D2 = this["d"];
    let cycLen = cycleLen(N2, D2);
    let cycOff = cycleStart(N2, D2, cycLen);
    let str = this["s"] < C_ZERO ? "-" : "";
    str += ifloor(N2 / D2);
    N2 %= D2;
    N2 *= C_TEN;
    if (N2)
      str += ".";
    if (cycLen) {
      for (let i2 = cycOff; i2--; ) {
        str += ifloor(N2 / D2);
        N2 %= D2;
        N2 *= C_TEN;
      }
      str += "(";
      for (let i2 = cycLen; i2--; ) {
        str += ifloor(N2 / D2);
        N2 %= D2;
        N2 *= C_TEN;
      }
      str += ")";
    } else {
      for (let i2 = dec; N2 && i2--; ) {
        str += ifloor(N2 / D2);
        N2 %= D2;
        N2 *= C_TEN;
      }
    }
    return str;
  },
  /**
   * Returns a string-fraction representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
   **/
  "toFraction": function(showMixed = false) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      const whole = ifloor(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        str += " ";
        n %= d2;
      }
      str += n;
      str += "/";
      str += d2;
    }
    return str;
  },
  /**
   * Returns a latex representation of a Fraction object
   *
   * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
   **/
  "toLatex": function(showMixed = false) {
    let n = this["n"];
    let d2 = this["d"];
    let str = this["s"] < C_ZERO ? "-" : "";
    if (d2 === C_ONE) {
      str += n;
    } else {
      const whole = ifloor(n / d2);
      if (showMixed && whole > C_ZERO) {
        str += whole;
        n %= d2;
      }
      str += "\\frac{";
      str += n;
      str += "}{";
      str += d2;
      str += "}";
    }
    return str;
  },
  /**
   * Returns an array of continued fraction elements
   *
   * Ex: new Fraction("7/8").toContinued() => [0,1,7]
   */
  "toContinued": function() {
    let a = this["n"];
    let b = this["d"];
    const res = [];
    while (b) {
      res.push(ifloor(a / b));
      const t = a % b;
      a = b;
      b = t;
    }
    return res;
  },
  "simplify": function(eps = 1e-3) {
    const ieps = BigInt(Math.ceil(1 / eps));
    const thisABS = this["abs"]();
    const cont = thisABS["toContinued"]();
    for (let i2 = 1; i2 < cont.length; i2++) {
      let s = newFraction(cont[i2 - 1], C_ONE);
      for (let k = i2 - 2; k >= 0; k--) {
        s = s["inverse"]()["add"](cont[k]);
      }
      let t = s["sub"](thisABS);
      if (t["n"] * ieps < t["d"]) {
        return s["mul"](this["s"]);
      }
    }
    return this;
  }
};

// node_modules/@strudel/core/dist/index.mjs
var It = "strudel.log";
var Te = 1e3;
var Jt;
var jt;
function Ht(t, e = "cyclist") {
  z(`[${e}] error: ${t.message}`);
}
function z(t, e, n = {}) {
  let s = performance.now();
  Jt === t && s - jt < Te || (Jt = t, jt = s, console.log(`%c${t}`, "background-color: black;color:white;border-radius:15px"), typeof document < "u" && typeof CustomEvent < "u" && document.dispatchEvent(
    new CustomEvent(It, {
      detail: {
        message: t,
        type: e,
        data: n
      }
    })
  ));
}
z.key = It;
var Iu = (t) => /^[a-gA-G][#bs]*[0-9]$/.test(t);
var _t = (t) => /^[a-gA-G][#bsf]*[0-9]?$/.test(t);
var xe = (t) => {
  if (typeof t != "string")
    return [];
  const [e, n = "", s] = t.match(/^([a-gA-G])([#bsf]*)([0-9]*)$/)?.slice(1) || [];
  return e ? [e, n, s ? Number(s) : void 0] : [];
};
var Ce = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 };
var Be = { "#": 1, b: -1, s: 1, f: -1 };
var lt = (t, e = 3) => {
  const [n, s, r = e] = xe(t);
  if (!n)
    throw new Error('not a note: "' + t + '"');
  const o = Ce[n.toLowerCase()], c = s?.split("").reduce((u, a) => u + Be[a], 0) || 0;
  return (Number(r) + 1) * 12 + o + c;
};
var et = (t) => Math.pow(2, (t - 69) / 12) * 440;
var Oe = (t) => 12 * Math.log(t / 440) / Math.LN2 + 69;
var Hu = (t, e) => {
  if (typeof t != "object")
    throw new Error("valueToMidi: expected object value");
  let { freq: n, note: s } = t;
  if (typeof n == "number")
    return Oe(n);
  if (typeof s == "string")
    return lt(s);
  if (typeof s == "number")
    return s;
  if (!e)
    throw new Error("valueToMidi: expected freq or note to be set");
  return e;
};
var Vu = (t, e) => (t - e) * 1e3;
var ze = (t) => et(typeof t == "number" ? t : lt(t));
var Ee = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Fu = (t) => {
  const e = Math.floor(t / 12) - 1;
  return Ee[t % 12] + e;
};
var pt = (t, e) => (t % e + e) % e;
var Me = (t) => t.reduce((e, n) => e + n) / t.length;
function Je(t, e = 0) {
  return isNaN(Number(t)) ? (z(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
var Du = (t, e) => pt(Math.round(Je(t ?? 0, 0)), e);
var Gu = (t) => {
  let { value: e, context: n } = t, s = e;
  if (typeof s == "object" && !Array.isArray(s) && (s = s.note || s.n || s.value, s === void 0))
    throw new Error(`cannot find a playable note for ${JSON.stringify(e)}`);
  if (typeof s == "number" && n.type !== "frequency")
    s = et(t.value);
  else if (typeof s == "number" && n.type === "frequency")
    s = t.value;
  else if (typeof s != "string" || !_t(s))
    throw new Error("not a note: " + JSON.stringify(s));
  return s;
};
var Qu = (t) => {
  let { value: e, context: n } = t;
  if (typeof e == "object")
    return e.freq ? e.freq : ze(e.note || e.n || e.value);
  if (typeof e == "number" && n.type !== "frequency")
    e = et(t.value);
  else if (typeof e == "string" && _t(e))
    e = et(lt(t.value));
  else if (typeof e != "number")
    throw new Error("not a note or frequency: " + e);
  return e;
};
var je = (t, e) => t.slice(e).concat(t.slice(0, e));
var Pe = (...t) => t.reduce(
  (e, n) => (...s) => e(n(...s)),
  (e) => e
);
var Uu = (...t) => Pe(...t.reverse());
var ot = (t) => t.filter((e) => e != null);
var F = (t) => [].concat(...t);
var tt = (t) => t;
var Ku = (t, e) => t;
var Vt = (t, e) => Array.from({ length: e - t + 1 }, (n, s) => s + t);
function g(t, e, n = t.length) {
  const s = function r(...o) {
    if (o.length >= n)
      return t.apply(this, o);
    {
      const c = function(...u) {
        return r.apply(this, o.concat(u));
      };
      return e && e(c, o), c;
    }
  };
  return e && e(s, []), s;
}
function Ft(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  if (_t(t))
    return lt(t);
  throw new Error(`cannot parse as numeral: "${t}"`);
}
function Dt(t, e) {
  return (...n) => t(...n.map(e));
}
function $(t) {
  return Dt(t, Ft);
}
function Ne(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  const n = {
    pi: Math.PI,
    w: 1,
    h: 0.5,
    q: 0.25,
    e: 0.125,
    s: 0.0625,
    t: 1 / 3,
    f: 0.2,
    x: 1 / 6
  }[t];
  if (typeof n < "u")
    return n;
  throw new Error(`cannot parse as fractional: "${t}"`);
}
var Xu = (t) => Dt(t, Ne);
var Gt = function(t, e) {
  return [e.slice(0, t), e.slice(t)];
};
var vt = (t, e, n) => e.map((s, r) => t(s, n[r]));
var $e = function(t) {
  const e = [];
  for (let n = 0; n < t.length - 1; ++n)
    e.push([t[n], t[n + 1]]);
  return e;
};
var Re = (t, e, n) => Math.min(Math.max(t, e), n);
var We = ["Do", "Reb", "Re", "Mib", "Mi", "Fa", "Solb", "Sol", "Lab", "La", "Sib", "Si"];
var Le = [
  "Sa",
  "Re",
  "Ga",
  "Ma",
  "Pa",
  "Dha",
  "Ni"
];
var Ie = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Hb", "H"];
var He = [
  "Ni",
  "Pab",
  "Pa",
  "Voub",
  "Vou",
  "Ga",
  "Dib",
  "Di",
  "Keb",
  "Ke",
  "Zob",
  "Zo"
];
var Ve = [
  "I",
  "Ro",
  "Ha",
  "Ni",
  "Ho",
  "He",
  "To"
];
var Fe = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"];
var Yu = (t, e = "letters") => {
  const s = (e === "solfeggio" ? We : e === "indian" ? Le : e === "german" ? Ie : e === "byzantine" ? He : e === "japanese" ? Ve : Fe)[t % 12], r = Math.floor(t / 12) - 1;
  return s + r;
};
function Zu(t) {
  var e = {};
  return t.filter(function(n) {
    return e.hasOwn(n) ? false : e[n] = true;
  });
}
function ta(t) {
  return t.sort().filter(function(e, n, s) {
    return !n || e != s[n - 1];
  });
}
function De(t) {
  return t.sort((e, n) => e.compare(n)).filter(function(e, n, s) {
    return !n || e.ne(s[n - 1]);
  });
}
function Ge(t) {
  const e = new TextEncoder().encode(t);
  return btoa(String.fromCharCode(...e));
}
function Qe(t) {
  const e = new Uint8Array(
    atob(t).split("").map((s) => s.charCodeAt(0))
  );
  return new TextDecoder().decode(e);
}
function ea(t) {
  return encodeURIComponent(Ge(t));
}
function na(t) {
  return Qe(decodeURIComponent(t));
}
function Ue(t, e) {
  return Array.isArray(t) ? t.map(e) : Object.fromEntries(Object.entries(t).map(([n, s], r) => [n, e(s, n, r)]));
}
function Pt(t, e) {
  return t / e;
}
var Ke = class {
  constructor({
    getTargetClockTime: e = Xe,
    weight: n = 16,
    offsetDelta: s = 5e-3,
    checkAfterTime: r = 2,
    resetAfterTime: o = 8
  }) {
    this.offsetTime, this.timeAtPrevOffsetSample, this.prevOffsetTimes = [], this.getTargetClockTime = e, this.weight = n, this.offsetDelta = s, this.checkAfterTime = r, this.resetAfterTime = o, this.reset = () => {
      this.prevOffsetTimes = [], this.offsetTime = null, this.timeAtPrevOffsetSample = null;
    };
  }
  calculateOffset(e) {
    const n = this.getTargetClockTime(), s = n - this.timeAtPrevOffsetSample, r = n - e;
    if (s > this.resetAfterTime && this.reset(), this.offsetTime == null && (this.offsetTime = r), this.prevOffsetTimes.push(r), this.prevOffsetTimes.length > this.weight && this.prevOffsetTimes.shift(), this.timeAtPrevOffsetSample == null || s > this.checkAfterTime) {
      this.timeAtPrevOffsetSample = n;
      const o = Me(this.prevOffsetTimes);
      Math.abs(o - this.offsetTime) > this.offsetDelta && (this.offsetTime = o);
    }
    return this.offsetTime;
  }
  calculateTimestamp(e, n) {
    return this.calculateOffset(e) + n;
  }
};
function sa() {
  return performance.now() * 1e-3;
}
function Xe() {
  return Date.now() * 1e-3;
}
var Ye = /* @__PURE__ */ new Map([
  ["control", "Control"],
  ["ctrl", "Control"],
  ["alt", "Alt"],
  ["shift", "Shift"],
  ["down", "ArrowDown"],
  ["up", "ArrowUp"],
  ["left", "ArrowLeft"],
  ["right", "ArrowRight"]
]);
var Z;
function Ze() {
  if (Z == null) {
    if (typeof window > "u")
      return;
    Z = {}, window.addEventListener("keydown", (t) => {
      Z[t.key] = true;
    }), window.addEventListener("keyup", (t) => {
      Z[t.key] = false;
    });
  }
  return { ...Z };
}
function Qt(t, e = false) {
  return typeof t == "object" ? e ? JSON.stringify(t).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(t) : t;
}
Fraction.prototype.sam = function() {
  return this.floor();
};
Fraction.prototype.nextSam = function() {
  return this.sam().add(1);
};
Fraction.prototype.wholeCycle = function() {
  return new C(this.sam(), this.nextSam());
};
Fraction.prototype.cyclePos = function() {
  return this.sub(this.sam());
};
Fraction.prototype.lt = function(t) {
  return this.compare(t) < 0;
};
Fraction.prototype.gt = function(t) {
  return this.compare(t) > 0;
};
Fraction.prototype.lte = function(t) {
  return this.compare(t) <= 0;
};
Fraction.prototype.gte = function(t) {
  return this.compare(t) >= 0;
};
Fraction.prototype.eq = function(t) {
  return this.compare(t) == 0;
};
Fraction.prototype.ne = function(t) {
  return this.compare(t) != 0;
};
Fraction.prototype.max = function(t) {
  return this.gt(t) ? this : t;
};
Fraction.prototype.maximum = function(...t) {
  return t = t.map((e) => new Fraction(e)), t.reduce((e, n) => n.max(e), this);
};
Fraction.prototype.min = function(t) {
  return this.lt(t) ? this : t;
};
Fraction.prototype.mulmaybe = function(t) {
  return t !== void 0 ? this.mul(t) : void 0;
};
Fraction.prototype.divmaybe = function(t) {
  return t !== void 0 ? this.div(t) : void 0;
};
Fraction.prototype.addmaybe = function(t) {
  return t !== void 0 ? this.add(t) : void 0;
};
Fraction.prototype.submaybe = function(t) {
  return t !== void 0 ? this.sub(t) : void 0;
};
Fraction.prototype.show = function() {
  return this.s * this.n + "/" + this.d;
};
Fraction.prototype.or = function(t) {
  return this.eq(0) ? t : this;
};
var d = (t) => Fraction(t);
var tn = (...t) => {
  if (t = ot(t), t.length !== 0)
    return t.reduce((e, n) => e.gcd(n), d(1));
};
var U = (...t) => {
  if (t = ot(t), t.length === 0)
    return;
  const e = t.pop();
  return t.reduce(
    (n, s) => n === void 0 || s === void 0 ? void 0 : n.lcm(s),
    e
  );
};
d._original = Fraction;
var C = class _C {
  constructor(e, n) {
    this.begin = d(e), this.end = d(n);
  }
  get spanCycles() {
    const e = [];
    var n = this.begin;
    const s = this.end, r = s.sam();
    if (n.equals(s))
      return [new _C(n, s)];
    for (; s.gt(n); ) {
      if (n.sam().equals(r)) {
        e.push(new _C(n, this.end));
        break;
      }
      const o = n.nextSam();
      e.push(new _C(n, o)), n = o;
    }
    return e;
  }
  get duration() {
    return this.end.sub(this.begin);
  }
  cycleArc() {
    const e = this.begin.cyclePos(), n = e.add(this.duration);
    return new _C(e, n);
  }
  withTime(e) {
    return new _C(e(this.begin), e(this.end));
  }
  withEnd(e) {
    return new _C(this.begin, e(this.end));
  }
  withCycle(e) {
    const n = this.begin.sam(), s = n.add(e(this.begin.sub(n))), r = n.add(e(this.end.sub(n)));
    return new _C(s, r);
  }
  intersection(e) {
    const n = this.begin.max(e.begin), s = this.end.min(e.end);
    if (!n.gt(s) && !(n.equals(s) && (n.equals(this.end) && this.begin.lt(this.end) || n.equals(e.end) && e.begin.lt(e.end))))
      return new _C(n, s);
  }
  intersection_e(e) {
    const n = this.intersection(e);
    if (n == null)
      throw "TimeSpans do not intersect";
    return n;
  }
  midpoint() {
    return this.begin.add(this.duration.div(d(2)));
  }
  equals(e) {
    return this.begin.equals(e.begin) && this.end.equals(e.end);
  }
  show() {
    return this.begin.show() + " → " + this.end.show();
  }
};
var x = class _x {
  /*
        Event class, representing a value active during the timespan
        'part'. This might be a fragment of an event, in which case the
        timespan will be smaller than the 'whole' timespan, otherwise the
        two timespans will be the same. The 'part' must never extend outside of the
        'whole'. If the event represents a continuously changing value
        then the whole will be returned as None, in which case the given
        value will have been sampled from the point halfway between the
        start and end of the 'part' timespan.
        The context is to store a list of source code locations causing the event.
  
        The word 'Event' is more or less a reserved word in javascript, hence this
        class is named called 'Hap'.
        */
  constructor(e, n, s, r = {}, o = false) {
    this.whole = e, this.part = n, this.value = s, this.context = r, this.stateful = o, o && console.assert(typeof this.value == "function", "Stateful values must be functions");
  }
  get duration() {
    let e;
    return typeof this.value?.duration == "number" ? e = d(this.value.duration) : e = this.whole.end.sub(this.whole.begin), typeof this.value?.clip == "number" ? e.mul(this.value.clip) : e;
  }
  get endClipped() {
    return this.whole.begin.add(this.duration);
  }
  isActive(e) {
    return this.whole.begin <= e && this.endClipped >= e;
  }
  isInPast(e) {
    return e > this.endClipped;
  }
  isInNearPast(e, n) {
    return n - e <= this.endClipped;
  }
  isInFuture(e) {
    return e < this.whole.begin;
  }
  isInNearFuture(e, n) {
    return n < this.whole.begin && n > this.whole.begin - e;
  }
  isWithinTime(e, n) {
    return this.whole.begin <= n && this.endClipped >= e;
  }
  wholeOrPart() {
    return this.whole ? this.whole : this.part;
  }
  withSpan(e) {
    const n = this.whole ? e(this.whole) : void 0;
    return new _x(n, e(this.part), this.value, this.context);
  }
  withValue(e) {
    return new _x(this.whole, this.part, e(this.value), this.context);
  }
  hasOnset() {
    return this.whole != null && this.whole.begin.equals(this.part.begin);
  }
  hasTag(e) {
    return this.context.tags?.includes(e);
  }
  resolveState(e) {
    if (this.stateful && this.hasOnset()) {
      console.log("stateful");
      const n = this.value, [s, r] = n(e);
      return [s, new _x(this.whole, this.part, r, this.context, false)];
    }
    return [e, this];
  }
  spanEquals(e) {
    return this.whole == null && e.whole == null || this.whole.equals(e.whole);
  }
  equals(e) {
    return this.spanEquals(e) && this.part.equals(e.part) && // TODO would == be better ??
    this.value === e.value;
  }
  show(e = false) {
    const n = typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value;
    var s = "";
    if (this.whole == null)
      s = "~" + this.part.show;
    else {
      var r = this.whole.begin.equals(this.part.begin) && this.whole.end.equals(this.part.end);
      this.whole.begin.equals(this.part.begin) || (s = this.whole.begin.show() + " ⇜ "), r || (s += "("), s += this.part.show(), r || (s += ")"), this.whole.end.equals(this.part.end) || (s += " ⇝ " + this.whole.end.show());
    }
    return "[ " + s + " | " + n + " ]";
  }
  showWhole(e = false) {
    return `${this.whole == null ? "~" : this.whole.show()}: ${Qt(this.value, e)}`;
  }
  combineContext(e) {
    const n = this;
    return { ...n.context, ...e.context, locations: (n.context.locations || []).concat(e.context.locations || []) };
  }
  setContext(e) {
    return new _x(this.whole, this.part, this.value, e);
  }
  ensureObjectValue() {
    if (typeof this.value != "object")
      throw new Error(
        `expected hap.value to be an object, but got "${this.value}". Hint: append .note() or .s() to the end`,
        "error"
      );
  }
};
var nt = class _nt {
  constructor(e, n = {}) {
    this.span = e, this.controls = n;
  }
  // Returns new State with different span
  setSpan(e) {
    return new _nt(e, this.controls);
  }
  withSpan(e) {
    return this.setSpan(e(this.span));
  }
  // Returns new State with different controls
  setControls(e) {
    return new _nt(this.span, e);
  }
};
function en(t, e, n) {
  if (e?.value !== void 0 && Object.keys(e).length === 1)
    return z("[warn]: Can't do arithmetic on control pattern."), t;
  const s = Object.keys(t).filter((r) => Object.keys(e).includes(r));
  return Object.assign({}, t, e, Object.fromEntries(s.map((r) => [r, n(t[r], e[r])])));
}
g((t, e) => t * e);
g((t, e) => e.map(t));
function nn(t, e = 60) {
  let n = 0, s = d(0), r = [""], o = "";
  for (; r[0].length < e; ) {
    const c = t.queryArc(n, n + 1), u = c.filter((m) => m.hasOnset()).map((m) => m.duration), a = tn(...u), p = a.inverse();
    r = r.map((m) => m + "|"), o += "|";
    for (let m = 0; m < p; m++) {
      const [y, b] = [s, s.add(a)], w = c.filter((k) => k.whole.begin.lte(y) && k.whole.end.gte(b)), v = w.length - r.length;
      v > 0 && (r = r.concat(Array(v).fill(o))), r = r.map((k, E) => {
        const M = w[E];
        if (M) {
          const A = M.whole.begin.eq(y) ? "" + M.value : "-";
          return k + A;
        }
        return k + ".";
      }), o += ".", s = s.add(a);
    }
    n++;
  }
  return r.join(`
`);
}
var gt;
var L = true;
var ra = function(t) {
  L = !!t;
};
var oa = (t) => gt = t;
var f = class _f2 {
  /**
   * Create a pattern. As an end user, you will most likely not create a Pattern directly.
   *
   * @param {function} query - The function that maps a `State` to an array of `Hap`.
   * @noAutocomplete
   */
  constructor(e, n = void 0) {
    this.query = e, this._Pattern = true, this._steps = n;
  }
  get _steps() {
    return this.__steps;
  }
  set _steps(e) {
    this.__steps = e === void 0 ? void 0 : d(e);
  }
  setSteps(e) {
    return this._steps = e, this;
  }
  withSteps(e) {
    return L ? new _f2(this.query, this._steps === void 0 ? void 0 : e(this._steps)) : this;
  }
  get hasSteps() {
    return this._steps !== void 0;
  }
  //////////////////////////////////////////////////////////////////////
  // Haskell-style functor, applicative and monadic operations
  /**
   * Returns a new pattern, with the function applied to the value of
   * each hap. It has the alias `fmap`.
   * @synonyms fmap
   * @param {Function} func to to apply to the value
   * @returns Pattern
   * @example
   * "0 1 2".withValue(v => v + 10).log()
   */
  withValue(e) {
    const n = new _f2((s) => this.query(s).map((r) => r.withValue(e)));
    return n._steps = this._steps, n;
  }
  // runs func on query state
  withState(e) {
    return this.withHaps((n, s) => (e(s), n));
  }
  /**
   * see `withValue`
   * @noAutocomplete
   */
  fmap(e) {
    return this.withValue(e);
  }
  /**
   * Assumes 'this' is a pattern of functions, and given a function to
   * resolve wholes, applies a given pattern of values to that
   * pattern of functions.
   * @param {Function} whole_func
   * @param {Function} func
   * @noAutocomplete
   * @returns Pattern
   */
  appWhole(e, n) {
    const s = this, r = function(o) {
      const c = s.query(o), u = n.query(o), a = function(p, m) {
        const y = p.part.intersection(m.part);
        if (y != null)
          return new x(
            e(p.whole, m.whole),
            y,
            p.value(m.value),
            m.combineContext(p)
          );
      };
      return F(
        c.map((p) => ot(u.map((m) => a(p, m))))
      );
    };
    return new _f2(r);
  }
  /**
   * When this method is called on a pattern of functions, it matches its haps
   * with those in the given pattern of values.  A new pattern is returned, with
   * each matching value applied to the corresponding function.
   *
   * In this `_appBoth` variant, where timespans of the function and value haps
   * are not the same but do intersect, the resulting hap has a timespan of the
   * intersection. This applies to both the part and the whole timespan.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appBoth(e) {
    const n = this, s = function(o, c) {
      if (!(o == null || c == null))
        return o.intersection_e(c);
    }, r = n.appWhole(s, e);
    return L && (r._steps = U(e._steps, n._steps)), r;
  }
  /**
   * As with `appBoth`, but the `whole` timespan is not the intersection,
   * but the timespan from the function of patterns that this method is called
   * on. In practice, this means that the pattern structure, including onsets,
   * are preserved from the pattern of functions (often referred to as the left
   * hand or inner pattern).
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appLeft(e) {
    const n = this, s = function(o) {
      const c = [];
      for (const u of n.query(o)) {
        const a = e.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = u.part.intersection(p.part);
          if (y) {
            const b = u.value(p.value), w = p.combineContext(u), v = new x(m, y, b, w);
            c.push(v);
          }
        }
      }
      return c;
    }, r = new _f2(s);
    return r._steps = this._steps, r;
  }
  /**
   * As with `appLeft`, but `whole` timespans are instead taken from the
   * pattern of values, i.e. structure is preserved from the right hand/outer
   * pattern.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appRight(e) {
    const n = this, s = function(o) {
      const c = [];
      for (const u of e.query(o)) {
        const a = n.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = p.part.intersection(u.part);
          if (y) {
            const b = p.value(u.value), w = u.combineContext(p), v = new x(m, y, b, w);
            c.push(v);
          }
        }
      }
      return c;
    }, r = new _f2(s);
    return r._steps = e._steps, r;
  }
  bindWhole(e, n) {
    const s = this, r = function(o) {
      const c = function(a, p) {
        return new x(
          e(a.whole, p.whole),
          p.part,
          p.value,
          Object.assign({}, a.context, p.context, {
            locations: (a.context.locations || []).concat(p.context.locations || [])
          })
        );
      }, u = function(a) {
        return n(a.value).query(o.setSpan(a.part)).map((p) => c(a, p));
      };
      return F(s.query(o).map((a) => u(a)));
    };
    return new _f2(r);
  }
  bind(e) {
    const n = function(s, r) {
      if (!(s == null || r == null))
        return s.intersection_e(r);
    };
    return this.bindWhole(n, e);
  }
  join() {
    return this.bind(tt);
  }
  outerBind(e) {
    return this.bindWhole((n) => n, e).setSteps(this._steps);
  }
  outerJoin() {
    return this.outerBind(tt);
  }
  innerBind(e) {
    return this.bindWhole((n, s) => s, e);
  }
  innerJoin() {
    return this.innerBind(tt);
  }
  // Flatterns patterns of patterns, by retriggering/resetting inner patterns at onsets of outer pattern haps
  resetJoin(e = false) {
    const n = this;
    return new _f2((s) => n.discreteOnly().query(s).map((r) => r.value.late(e ? r.whole.begin : r.whole.begin.cyclePos()).query(s).map(
      (o) => new x(
        // Supports continuous haps in the inner pattern
        o.whole ? o.whole.intersection(r.whole) : void 0,
        o.part.intersection(r.part),
        o.value
      ).setContext(r.combineContext(o))
    ).filter((o) => o.part)).flat());
  }
  restartJoin() {
    return this.resetJoin(true);
  }
  // Like the other joins above, joins a pattern of patterns of values, into a flatter
  // pattern of values. In this case it takes whole cycles of the inner pattern to fit each event
  // in the outer pattern.
  squeezeJoin() {
    const e = this;
    function n(s) {
      const r = e.discreteOnly().query(s);
      function o(u) {
        const p = u.value._focusSpan(u.wholeOrPart()).query(s.setSpan(u.part));
        function m(y, b) {
          let w;
          if (b.whole && y.whole && (w = b.whole.intersection(y.whole), !w))
            return;
          const v = b.part.intersection(y.part);
          if (!v)
            return;
          const k = b.combineContext(y);
          return new x(w, v, b.value, k);
        }
        return p.map((y) => m(u, y));
      }
      return F(r.map(o)).filter((u) => u);
    }
    return new _f2(n);
  }
  squeezeBind(e) {
    return this.fmap(e).squeezeJoin();
  }
  polyJoin = function() {
    const e = this;
    return e.fmap((n) => n.extend(e._steps.div(n._steps))).outerJoin();
  };
  polyBind(e) {
    return this.fmap(e).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // Utility methods mainly for internal use
  /**
   * Query haps inside the given time span.
   *
   * @param {Fraction | number} begin from time
   * @param {Fraction | number} end to time
   * @returns Hap[]
   * @example
   * const pattern = sequence('a', ['b', 'c'])
   * const haps = pattern.queryArc(0, 1)
   * console.log(haps)
   * silence
   * @noAutocomplete
   */
  queryArc(e, n, s = {}) {
    try {
      return this.query(new nt(new C(e, n), s));
    } catch (r) {
      return z(`[query]: ${r.message}`, "error"), [];
    }
  }
  /**
   * Returns a new pattern, with queries split at cycle boundaries. This makes
   * some calculations easier to express, as all haps are then constrained to
   * happen within a cycle.
   * @returns Pattern
   * @noAutocomplete
   */
  splitQueries() {
    const e = this, n = (s) => F(s.span.spanCycles.map((r) => e.query(s.setSpan(r))));
    return new _f2(n);
  }
  /**
   * Returns a new pattern, where the given function is applied to the query
   * timespan before passing it to the original pattern.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQuerySpan(e) {
    return new _f2((n) => this.query(n.withSpan(e)));
  }
  withQuerySpanMaybe(e) {
    const n = this;
    return new _f2((s) => {
      const r = s.withSpan(e);
      return r.span ? n.query(r) : [];
    });
  }
  /**
   * As with `withQuerySpan`, but the function is applied to both the
   * begin and end time of the query timespan.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQueryTime(e) {
    return new _f2((n) => this.query(n.withSpan((s) => s.withTime(e))));
  }
  /**
   * Similar to `withQuerySpan`, but the function is applied to the timespans
   * of all haps returned by pattern queries (both `part` timespans, and where
   * present, `whole` timespans).
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHapSpan(e) {
    return new _f2((n) => this.query(n).map((s) => s.withSpan(e)));
  }
  /**
   * As with `withHapSpan`, but the function is applied to both the
   * begin and end time of the hap timespans.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withHapTime(e) {
    return this.withHapSpan((n) => n.withTime(e));
  }
  /**
   * Returns a new pattern with the given function applied to the list of haps returned by every query.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHaps(e) {
    const n = new _f2((s) => e(this.query(s), s));
    return n._steps = this._steps, n;
  }
  /**
   * As with `withHaps`, but applies the function to every hap, rather than every list of haps.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHap(e) {
    return this.withHaps((n) => n.map(e));
  }
  /**
   * Returns a new pattern with the context field set to every hap set to the given value.
   * @param {*} context
   * @returns Pattern
   * @noAutocomplete
   */
  setContext(e) {
    return this.withHap((n) => n.setContext(e));
  }
  /**
   * Returns a new pattern with the given function applied to the context field of every hap.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withContext(e) {
    const n = this.withHap((s) => s.setContext(e(s.context)));
    return this.__pure !== void 0 && (n.__pure = this.__pure, n.__pure_loc = this.__pure_loc), n;
  }
  /**
   * Returns a new pattern with the context field of every hap set to an empty object.
   * @returns Pattern
   * @noAutocomplete
   */
  stripContext() {
    return this.withHap((e) => e.setContext({}));
  }
  /**
   * Returns a new pattern with the given location information added to the
   * context of every hap.
   * @param {Number} start start offset
   * @param {Number} end end offset
   * @returns Pattern
   * @noAutocomplete
   */
  withLoc(e, n) {
    const s = {
      start: e,
      end: n
    }, r = this.withContext((o) => {
      const c = (o.locations || []).concat([s]);
      return { ...o, locations: c };
    });
    return this.__pure && (r.__pure = this.__pure, r.__pure_loc = s), r;
  }
  /**
   * Returns a new Pattern, which only returns haps that meet the given test.
   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern
   * @returns Pattern
   * @noAutocomplete
   */
  filterHaps(e) {
    return new _f2((n) => this.query(n).filter(e));
  }
  /**
   * As with `filterHaps`, but the function is applied to values
   * inside haps.
   * @param {Function} value_test
   * @returns Pattern
   * @noAutocomplete
   */
  filterValues(e) {
    return new _f2((n) => this.query(n).filter((s) => e(s.value))).setSteps(this._steps);
  }
  /**
   * Returns a new pattern, with haps containing undefined values removed from
   * query results.
   * @returns Pattern
   * @noAutocomplete
   */
  removeUndefineds() {
    return this.filterValues((e) => e != null);
  }
  /**
   * Returns a new pattern, with all haps without onsets filtered out. A hap
   * with an onset is one with a `whole` timespan that begins at the same time
   * as its `part` timespan.
   * @returns Pattern
   * @noAutocomplete
   */
  onsetsOnly() {
    return this.filterHaps((e) => e.hasOnset());
  }
  /**
   * Returns a new pattern, with 'continuous' haps (those without 'whole'
   * timespans) removed from query results.
   * @returns Pattern
   * @noAutocomplete
   */
  discreteOnly() {
    return this.filterHaps((e) => e.whole);
  }
  /**
   * Combines adjacent haps with the same value and whole.  Only
   * intended for use in tests.
   * @noAutocomplete
   */
  defragmentHaps() {
    return this.discreteOnly().withHaps((n) => {
      const s = [];
      for (var r = 0; r < n.length; ++r) {
        for (var o = true, c = n[r]; o; ) {
          const p = JSON.stringify(n[r].value);
          for (var u = false, a = r + 1; a < n.length; a++) {
            const m = n[a];
            if (c.whole.equals(m.whole)) {
              if (c.part.begin.eq(m.part.end)) {
                if (p === JSON.stringify(m.value)) {
                  c = new x(c.whole, new C(m.part.begin, c.part.end), c.value), n.splice(a, 1), u = true;
                  break;
                }
              } else if (m.part.begin.eq(c.part.end) && p == JSON.stringify(m.value)) {
                c = new x(c.whole, new C(c.part.begin, m.part.end), c.value), n.splice(a, 1), u = true;
                break;
              }
            }
          }
          o = u;
        }
        s.push(c);
      }
      return s;
    });
  }
  /**
   * Queries the pattern for the first cycle, returning Haps. Mainly of use when
   * debugging a pattern.
   * @param {Boolean} with_context - set to true, otherwise the context field
   * will be stripped from the resulting haps.
   * @returns [Hap]
   * @noAutocomplete
   */
  firstCycle(e = false) {
    var n = this;
    return e || (n = n.stripContext()), n.query(new nt(new C(d(0), d(1))));
  }
  /**
   * Accessor for a list of values returned by querying the first cycle.
   * @noAutocomplete
   */
  get firstCycleValues() {
    return this.firstCycle().map((e) => e.value);
  }
  /**
   * More human-readable version of the `firstCycleValues` accessor.
   * @noAutocomplete
   */
  get showFirstCycle() {
    return this.firstCycle().map(
      (e) => `${e.value}: ${e.whole.begin.toFraction()} - ${e.whole.end.toFraction()}`
    );
  }
  /**
   * Returns a new pattern, which returns haps sorted in temporal order. Mainly
   * of use when comparing two patterns for equality, in tests.
   * @returns Pattern
   * @noAutocomplete
   */
  sortHapsByPart() {
    return this.withHaps(
      (e) => e.sort(
        (n, s) => n.part.begin.sub(s.part.begin).or(n.part.end.sub(s.part.end)).or(n.whole.begin.sub(s.whole.begin).or(n.whole.end.sub(s.whole.end)))
      )
    );
  }
  asNumber() {
    return this.fmap(Ft);
  }
  //////////////////////////////////////////////////////////////////////
  // Operators - see 'make composers' later..
  _opIn(e, n) {
    return this.fmap(n).appLeft(h(e));
  }
  _opOut(e, n) {
    return this.fmap(n).appRight(h(e));
  }
  _opMix(e, n) {
    return this.fmap(n).appBoth(h(e));
  }
  _opSqueeze(e, n) {
    const s = h(e);
    return this.fmap((r) => s.fmap((o) => n(r)(o))).squeezeJoin();
  }
  _opSqueezeOut(e, n) {
    const s = this;
    return h(e).fmap((o) => s.fmap((c) => n(c)(o))).squeezeJoin();
  }
  _opReset(e, n) {
    return h(e).fmap((r) => this.fmap((o) => n(o)(r))).resetJoin();
  }
  _opRestart(e, n) {
    return h(e).fmap((r) => this.fmap((o) => n(o)(r))).restartJoin();
  }
  _opPoly(e, n) {
    const s = h(e);
    return this.fmap((r) => s.fmap((o) => n(o)(r))).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // End-user methods.
  // Those beginning with an underscore (_) are 'patternified',
  // i.e. versions are created without the underscore, that are
  // magically transformed to accept patterns for all their arguments.
  //////////////////////////////////////////////////////////////////////
  // Methods without corresponding toplevel functions
  /**
   * Layers the result of the given function(s). Like `superimpose`, but without the original pattern:
   * @name layer
   * @memberof Pattern
   * @synonyms apply
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .layer(x=>x.add("0,2"))
   *   .scale('C minor').note()
   */
  layer(...e) {
    return B(...e.map((n) => n(this)));
  }
  /**
   * Superimposes the result of the given function(s) on top of the original pattern:
   * @name superimpose
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .superimpose(x=>x.add(2))
   *   .scale('C minor').note()
   */
  superimpose(...e) {
    return this.stack(...e.map((n) => n(this)));
  }
  //////////////////////////////////////////////////////////////////////
  // Multi-pattern functions
  stack(...e) {
    return B(this, ...e);
  }
  sequence(...e) {
    return D(this, ...e);
  }
  seq(...e) {
    return D(this, ...e);
  }
  cat(...e) {
    return pn(this, ...e);
  }
  fastcat(...e) {
    return N(this, ...e);
  }
  slowcat(...e) {
    return K(this, ...e);
  }
  //////////////////////////////////////////////////////////////////////
  // Context methods - ones that deal with metadata
  onTrigger(e, n = true) {
    return this.withHap(
      (s) => s.setContext({
        ...s.context,
        onTrigger: (...r) => {
          s.context.onTrigger?.(...r), e(...r);
        },
        // if dominantTrigger is set to true, the default output (webaudio) will be disabled
        // when using multiple triggers, you cannot flip this flag to false again!
        // example: x.csound('CooLSynth').log() as well as x.log().csound('CooLSynth') should work the same
        dominantTrigger: s.context.dominantTrigger || n
      })
    );
  }
  /**
   * Writes the content of the current event to the console (visible in the side menu).
   * @name log
   * @memberof Pattern
   * @example
   * s("bd sd").log()
   */
  log(e = (s) => `[hap] ${s.showWhole(true)}`, n = (s) => ({ hap: s })) {
    return this.onTrigger((...s) => {
      z(e(...s), void 0, n(...s));
    }, false);
  }
  /**
   * A simplified version of `log` which writes all "values" (various configurable parameters)
   * within the event to the console (visible in the side menu).
   * @name logValues
   * @memberof Pattern
   * @example
   * s("bd sd").gain("0.25 0.5 1").n("2 1 0").logValues()
   */
  logValues(e = (n) => `[hap] ${Qt(n, true)}`) {
    return this.log((n) => e(n.value));
  }
  //////////////////////////////////////////////////////////////////////
  // Visualisation
  drawLine() {
    return console.log(nn(this)), this;
  }
  //////////////////////////////////////////////////////////////////////
  // methods relating to breaking patterns into subcycles
  // Breaks a pattern into a pattern of patterns, according to the structure of the given binary pattern.
  unjoin(e, n = tt) {
    return e.withHap(
      (s) => s.withValue((r) => r ? n(this.ribbon(s.whole.begin, s.whole.duration)) : this)
    );
  }
  /**
   * Breaks a pattern into pieces according to the structure of a given pattern.
   * True values in the given pattern cause the corresponding subcycle of the
   * source pattern to be looped, and for an (optional) given function to be
   * applied. False values result in the corresponding part of the source pattern
   * to be played unchanged.
   * @name into
   * @memberof Pattern
   * @example
   * sound("bd sd ht lt").into("1 0", hurry(2))
   */
  into(e, n) {
    return this.unjoin(e, n).innerJoin();
  }
};
function sn(t, e) {
  let n = [];
  return e.forEach((s) => {
    const r = n.findIndex(([o]) => t(s, o));
    r === -1 ? n.push([s]) : n[r].push(s);
  }), n;
}
var rn = (t, e) => t.spanEquals(e);
f.prototype.collect = function() {
  return this.withHaps(
    (t) => sn(rn, t).map((e) => new x(e[0].whole, e[0].part, e, {}))
  );
};
var ia = l("arpWith", (t, e) => e.collect().fmap((n) => h(t(n))).innerJoin().withHap((n) => new x(n.whole, n.part, n.value.value, n.combineContext(n.value))));
var ca = l(
  "arp",
  (t, e) => e.arpWith((n) => h(t).fmap((s) => n[s % n.length])),
  false
);
function ut(t) {
  return !Array.isArray(t) && typeof t == "object";
}
function on(t, e, n) {
  return ut(t) || ut(e) ? (ut(t) || (t = { value: t }), ut(e) || (e = { value: e }), en(t, e, n)) : n(t, e);
}
(function() {
  const t = {
    set: [(n, s) => s],
    keep: [(n) => n],
    keepif: [(n, s) => s ? n : void 0],
    // numerical functions
    /**
     *
     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.
     * @name add
     * @memberof Pattern
     * @example
     * // Here, the triad 0, 2, 4 is shifted by different amounts
     * n("0 2 4".add("<0 3 4 0>")).scale("C:major")
     * // Without add, the equivalent would be:
     * // n("<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>").scale("C:major")
     * @example
     * // You can also use add with notes:
     * note("c3 e3 g3".add("<0 5 7 0>"))
     * // Behind the scenes, the notes are converted to midi numbers:
     * // note("48 52 55".add("<0 5 7 0>"))
     */
    add: [$((n, s) => n + s)],
    // support string concatenation
    /**
     *
     * Like add, but the given numbers are subtracted.
     * @name sub
     * @memberof Pattern
     * @example
     * n("0 2 4".sub("<0 1 2 3>")).scale("C4:minor")
     * // See add for more information.
     */
    sub: [$((n, s) => n - s)],
    /**
     *
     * Multiplies each number by the given factor.
     * @name mul
     * @memberof Pattern
     * @example
     * "<1 1.5 [1.66, <2 2.33>]>*4".mul(150).freq()
     */
    mul: [$((n, s) => n * s)],
    /**
     *
     * Divides each number by the given factor.
     * @name div
     * @memberof Pattern
     */
    div: [$((n, s) => n / s)],
    mod: [$(pt)],
    pow: [$(Math.pow)],
    log2: [$(Math.log2)],
    band: [$((n, s) => n & s)],
    bor: [$((n, s) => n | s)],
    bxor: [$((n, s) => n ^ s)],
    blshift: [$((n, s) => n << s)],
    brshift: [$((n, s) => n >> s)],
    // TODO - force numerical comparison if both look like numbers?
    lt: [(n, s) => n < s],
    gt: [(n, s) => n > s],
    lte: [(n, s) => n <= s],
    gte: [(n, s) => n >= s],
    eq: [(n, s) => n == s],
    eqt: [(n, s) => n === s],
    ne: [(n, s) => n != s],
    net: [(n, s) => n !== s],
    and: [(n, s) => n && s],
    or: [(n, s) => n || s],
    //  bitwise ops
    func: [(n, s) => s(n)]
  }, e = ["In", "Out", "Mix", "Squeeze", "SqueezeOut", "Reset", "Restart", "Poly"];
  for (const [n, [s, r]] of Object.entries(t)) {
    f.prototype["_" + n] = function(o) {
      return this.fmap((c) => s(c, o));
    }, Object.defineProperty(f.prototype, n, {
      // a getter that returns a function, so 'pat' can be
      // accessed by closures that are methods of that function..
      get: function() {
        const o = this, c = (...u) => o[n].in(...u);
        for (const u of e)
          c[u.toLowerCase()] = function(...a) {
            var p = o;
            a = D(a), r && (p = r(p), a = r(a));
            var m;
            return n === "keepif" ? (m = p["_op" + u](a, (y) => (b) => s(y, b)), m = m.removeUndefineds()) : m = p["_op" + u](a, (y) => (b) => on(y, b, s)), m;
          };
        return c.squeezein = c.squeeze, c;
      }
    });
    for (const o of e)
      f.prototype[o.toLowerCase()] = function(...c) {
        return this.set[o.toLowerCase()](c);
      };
  }
  f.prototype.struct = function(...n) {
    return this.keepif.out(...n);
  }, f.prototype.structAll = function(...n) {
    return this.keep.out(...n);
  }, f.prototype.mask = function(...n) {
    return this.keepif.in(...n);
  }, f.prototype.maskAll = function(...n) {
    return this.keep.in(...n);
  }, f.prototype.reset = function(...n) {
    return this.keepif.reset(...n);
  }, f.prototype.resetAll = function(...n) {
    return this.keep.reset(...n);
  }, f.prototype.restart = function(...n) {
    return this.keepif.restart(...n);
  }, f.prototype.restartAll = function(...n) {
    return this.keep.restart(...n);
  };
})();
var ua = B;
var aa = B;
var la = St;
var it = (t) => new f(() => [], t);
var S = it(1);
var R = it(0);
function P2(t) {
  function e(s) {
    return s.span.spanCycles.map((r) => new x(d(r.begin).wholeCycle(), r, t));
  }
  const n = new f(e, 1);
  return n.__pure = t, n;
}
function Ut(t) {
  return t instanceof f || t?._Pattern;
}
function h(t) {
  return Ut(t) ? t : gt && typeof t == "string" ? gt(t) : P2(t);
}
function cn(t) {
  let e = P2([]);
  for (const n of t)
    e = e.bind((s) => n.fmap((r) => s.concat([r])));
  return e;
}
function B(...t) {
  t = t.map((s) => Array.isArray(s) ? D(...s) : h(s));
  const e = (s) => F(t.map((r) => r.query(s))), n = new f(e);
  return L && (n._steps = U(...t.map((s) => s._steps))), n;
}
function kt(t, e) {
  if (e = e.map((o) => Array.isArray(o) ? D(...o) : h(o)), e.length === 0)
    return S;
  if (e.length === 1)
    return e[0];
  const [n, ...s] = e.map((o) => o._steps), r = L ? n.maximum(...s) : void 0;
  return B(...t(r, e));
}
function un(...t) {
  return kt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : j(s, it(e.sub(s._steps)))),
    t
  );
}
function an(...t) {
  return kt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : j(it(e.sub(s._steps)), s)),
    t
  );
}
function ln(...t) {
  return kt(
    (e, n) => n.map((s) => {
      if (s._steps.eq(e))
        return s;
      const r = it(e.sub(s._steps).div(2));
      return j(r, s, r);
    }),
    t
  );
}
function pa(t, ...e) {
  const [n, ...s] = e.map((c) => c._steps), r = n.maximum(...s), o = {
    centre: ln,
    left: un,
    right: an,
    expand: B,
    repeat: (...c) => St(...c).steps(r)
  };
  return t.inhabit(o).fmap((c) => c(...e)).innerJoin().setSteps(r);
}
function K(...t) {
  if (t = t.map((s) => Array.isArray(s) ? N(...s) : h(s)), t.length == 1)
    return t[0];
  const e = function(s) {
    const r = s.span, o = pt(r.begin.sam(), t.length), c = t[o];
    if (!c)
      return [];
    const u = r.begin.floor().sub(r.begin.div(t.length).floor());
    return c.withHapTime((a) => a.add(u)).query(s.setSpan(r.withTime((a) => a.sub(u))));
  }, n = L ? U(...t.map((s) => s._steps)) : void 0;
  return new f(e).splitQueries().setSteps(n);
}
function Kt(...t) {
  t = t.map(h);
  const e = function(n) {
    const s = Math.floor(n.span.begin) % t.length;
    return t[s]?.query(n) || [];
  };
  return new f(e).splitQueries();
}
function pn(...t) {
  return K(...t);
}
function fa(...t) {
  const e = t.reduce((n, [s]) => n + s, 0);
  return t = t.map(([n, s]) => [n, s.fast(n)]), j(...t).slow(e);
}
function ha(...t) {
  let e = d(0);
  for (let n of t)
    n.length == 2 && n.unshift(e), e = n[1];
  return B(
    ...t.map(
      ([n, s, r]) => P2(h(r)).compress(d(n).div(e), d(s).div(e))
    )
  ).slow(e).innerJoin();
}
function N(...t) {
  let e = K(...t);
  return t.length > 1 && (e = e._fast(t.length), e._steps = t.length), t.length == 1 && t[0].__steps_source && (t._steps = t[0]._steps), e;
}
function D(...t) {
  return N(...t);
}
function fn(...t) {
  return N(...t);
}
function wt(t) {
  return Array.isArray(t) ? t.length == 0 ? [S, 0] : t.length == 1 ? wt(t[0]) : [N(...t.map((e) => wt(e)[0])), t.length] : [h(t), 1];
}
var da = g((t, e) => h(e).mask(t));
var ma = g((t, e) => h(e).struct(t));
var ya = g((t, e) => h(e).superimpose(...t));
var ga = g((t, e) => h(e).withValue(t));
var wa = g((t, e) => h(e).bind(t));
var ba = g((t, e) => h(e).innerBind(t));
var _a = g((t, e) => h(e).outerBind(t));
var va = g((t, e) => h(e).squeezeBind(t));
var ka = g((t, e) => h(e).stepBind(t));
var qa = g((t, e) => h(e).polyBind(t));
var Aa = g((t, e) => h(e).set(t));
var Sa = g((t, e) => h(e).keep(t));
var Ta = g((t, e) => h(e).keepif(t));
var xa = g((t, e) => h(e).add(t));
var Ca = g((t, e) => h(e).sub(t));
var Ba = g((t, e) => h(e).mul(t));
var Oa = g((t, e) => h(e).div(t));
var za = g((t, e) => h(e).mod(t));
var Ea = g((t, e) => h(e).pow(t));
var Ma = g((t, e) => h(e).band(t));
var Ja = g((t, e) => h(e).bor(t));
var ja = g((t, e) => h(e).bxor(t));
var Pa = g((t, e) => h(e).blshift(t));
var Na = g((t, e) => h(e).brshift(t));
var $a = g((t, e) => h(e).lt(t));
var Ra = g((t, e) => h(e).gt(t));
var Wa = g((t, e) => h(e).lte(t));
var La = g((t, e) => h(e).gte(t));
var Ia = g((t, e) => h(e).eq(t));
var Ha = g((t, e) => h(e).eqt(t));
var Va = g((t, e) => h(e).ne(t));
var Fa = g((t, e) => h(e).net(t));
var Da = g((t, e) => h(e).and(t));
var Ga = g((t, e) => h(e).or(t));
var Qa = g((t, e) => h(e).func(t));
function l(t, e, n = true, s = false, r = (o) => o.innerJoin()) {
  if (Array.isArray(t)) {
    const u = {};
    for (const a of t)
      u[a] = l(a, e, n, s, r);
    return u;
  }
  const o = e.length;
  var c;
  return n ? c = function(...u) {
    u = u.map(h);
    const a = u[u.length - 1];
    let p;
    if (o === 1)
      p = e(a);
    else {
      const m = u.slice(0, -1);
      if (m.every((y) => y.__pure != null)) {
        const y = m.map((w) => w.__pure), b = m.filter((w) => w.__pure_loc).map((w) => w.__pure_loc);
        p = e(...y, a), p = p.withContext((w) => {
          const v = (w.locations || []).concat(b);
          return { ...w, locations: v };
        });
      } else {
        const [y, ...b] = m;
        let w = (...v) => e(...v, a);
        w = g(w, null, o - 1), p = r(b.reduce((v, k) => v.appLeft(k), y.fmap(w)));
      }
    }
    return s && (p._steps = a._steps), p;
  } : c = function(...u) {
    u = u.map(h);
    const a = e(...u);
    return s && (a._steps = u[u.length - 1]._steps), a;
  }, f.prototype[t] = function(...u) {
    if (o === 2 && u.length !== 1)
      u = [D(...u)];
    else if (o !== u.length + 1)
      throw new Error(`.${t}() expects ${o - 1} inputs but got ${u.length}.`);
    return u = u.map(h), c(...u, this);
  }, o > 1 && (f.prototype["_" + t] = function(...u) {
    const a = e(...u, this);
    return s && a.setSteps(this._steps), a;
  }), g(c, null, o);
}
function ct(t, e, n = true, s = false, r = (o) => o.stepJoin()) {
  return l(t, e, n, s, r);
}
var Ua = l("round", function(t) {
  return t.asNumber().fmap((e) => Math.round(e));
});
var Ka = l("floor", function(t) {
  return t.asNumber().fmap((e) => Math.floor(e));
});
var Xa = l("ceil", function(t) {
  return t.asNumber().fmap((e) => Math.ceil(e));
});
var Ya = l("toBipolar", function(t) {
  return t.fmap((e) => e * 2 - 1);
});
var Za = l("fromBipolar", function(t) {
  return t.fmap((e) => (e + 1) / 2);
});
var tl = l("range", function(t, e, n) {
  return n.mul(e - t).add(t);
});
var el = l("rangex", function(t, e, n) {
  return n._range(Math.log(t), Math.log(e)).fmap(Math.exp);
});
var nl = l("range2", function(t, e, n) {
  return n.fromBipolar()._range(t, e);
});
var sl = l(
  "ratio",
  (t) => t.fmap((e) => Array.isArray(e) ? e.slice(1).reduce((n, s) => n / s, e[0]) : e)
);
var rl = l("compress", function(t, e, n) {
  return t = d(t), e = d(e), t.gt(e) || t.gt(1) || e.gt(1) || t.lt(0) || e.lt(0) ? S : n._fastGap(d(1).div(e.sub(t)))._late(t);
});
var { compressSpan: ol, compressspan: il } = l(["compressSpan", "compressspan"], function(t, e) {
  return e._compress(t.begin, t.end);
});
var { fastGap: cl, fastgap: ul } = l(["fastGap", "fastgap"], function(t, e) {
  const n = function(r) {
    const o = r.begin.sam(), c = r.begin.sub(o).mul(t).min(1), u = r.end.sub(o).mul(t).min(1);
    if (!(c >= 1))
      return new C(o.add(c), o.add(u));
  }, s = function(r) {
    const o = r.part.begin, c = r.part.end, u = o.sam(), a = o.sub(u).div(t).min(1), p = c.sub(u).div(t).min(1), m = new C(u.add(a), u.add(p)), y = r.whole ? new C(
      m.begin.sub(o.sub(r.whole.begin).div(t)),
      m.end.add(r.whole.end.sub(c).div(t))
    ) : void 0;
    return new x(y, m, r.value, r.context);
  };
  return e.withQuerySpanMaybe(n).withHap(s).splitQueries();
});
var al = l("focus", function(t, e, n) {
  return t = d(t), e = d(e), n._early(t.sam())._fast(d(1).div(e.sub(t)))._late(t);
});
var { focusSpan: ll, focusspan: pl } = l(["focusSpan", "focusspan"], function(t, e) {
  return e._focus(t.begin, t.end);
});
var fl = l("ply", function(t, e) {
  const n = e.fmap((s) => P2(s)._fast(t)).squeezeJoin();
  return L && (n._steps = d(t).mulmaybe(e._steps)), n;
});
var { fast: hl, density: dl } = l(
  ["fast", "density"],
  function(t, e) {
    return t === 0 ? S : (t = d(t), e.withQueryTime((s) => s.mul(t)).withHapTime((s) => s.div(t)).setSteps(e._steps));
  },
  true,
  true
);
var ml = l("hurry", function(t, e) {
  return e._fast(t).mul(P2({ speed: t }));
});
var { slow: yl, sparsity: gl } = l(["slow", "sparsity"], function(t, e) {
  return t === 0 ? S : e._fast(d(1).div(t));
});
var wl = l("inside", function(t, e, n) {
  return e(n._slow(t))._fast(t);
});
var bl = l("outside", function(t, e, n) {
  return e(n._fast(t))._slow(t);
});
var _l = l("lastOf", function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.push(e(n)), Kt(...s);
});
var { firstOf: vl, every: kl } = l(["firstOf", "every"], function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.unshift(e(n)), Kt(...s);
});
var ql = l("apply", function(t, e) {
  return t(e);
});
var Al = l("cpm", function(t, e) {
  return e._fast(t / 60 / 1);
});
var Sl = l(
  "early",
  function(t, e) {
    return t = d(t), e.withQueryTime((n) => n.add(t)).withHapTime((n) => n.sub(t));
  },
  true,
  true
);
var hn = l(
  "late",
  function(t, e) {
    return t = d(t), e._early(d(0).sub(t));
  },
  true,
  true
);
var Tl = l("zoom", function(t, e, n) {
  if (e = d(e), t = d(t), t.gte(e))
    return R;
  const s = e.sub(t), r = L ? n._steps?.mulmaybe(s) : void 0;
  return n.withQuerySpan((o) => o.withCycle((c) => c.mul(s).add(t))).withHapSpan((o) => o.withCycle((c) => c.sub(t).div(s))).splitQueries().setSteps(r);
});
var { zoomArc: xl, zoomarc: Cl } = l(["zoomArc", "zoomarc"], function(t, e) {
  return e.zoom(t.begin, t.end);
});
var Bl = l(
  "bite",
  (t, e, n) => e.fmap((s) => (r) => {
    const o = d(s).div(r).mod(1), c = o.add(d(1).div(r));
    return n.zoom(o, c);
  }).appLeft(t).squeezeJoin(),
  false
);
var Ol = l(
  "linger",
  function(t, e) {
    return t == 0 ? S : t < 0 ? e._zoom(t.add(1), 1)._slow(t) : e._zoom(0, t)._slow(t);
  },
  true,
  true
);
var { segment: zl, seg: El } = l(["segment", "seg"], function(t, e) {
  return e.struct(P2(true)._fast(t)).setSteps(t);
});
var Ml = l("swingBy", (t, e, n) => n.inside(e, hn(fn(0, t / 2))));
var Jl = l("swing", (t, e) => e.swingBy(1 / 3, t));
var { invert: jl, inv: Pl } = l(
  ["invert", "inv"],
  function(t) {
    return t.fmap((e) => !e);
  },
  true,
  true
);
var Nl = l("when", function(t, e, n) {
  return t ? e(n) : n;
});
var $l = l("off", function(t, e, n) {
  return B(n, e(n.late(t)));
});
var Rl = l("brak", function(t) {
  return t.when(K(false, true), (e) => N(e, S)._late(0.25));
});
var dn = l(
  "rev",
  function(t) {
    const e = function(n) {
      const s = n.span, r = s.begin.sam(), o = s.begin.nextSam(), c = function(a) {
        const p = a.withTime((y) => r.add(o.sub(y))), m = p.begin;
        return p.begin = p.end, p.end = m, p;
      };
      return t.query(n.setSpan(c(s))).map((a) => a.withSpan(c));
    };
    return new f(e).splitQueries();
  },
  false,
  true
);
var Wl = l("pressBy", function(t, e) {
  return e.fmap((n) => P2(n).compress(t, 1)).squeezeJoin();
});
var Ll = l("press", function(t) {
  return t._pressBy(0.5);
});
f.prototype.hush = function() {
  return S;
};
var Il = l(
  "palindrome",
  function(t) {
    return t.lastOf(2, dn);
  },
  true,
  true
);
var { juxBy: Hl, juxby: Vl } = l(["juxBy", "juxby"], function(t, e, n) {
  t /= 2;
  const s = function(c, u, a) {
    return u in c ? c[u] : a;
  }, r = n.withValue((c) => Object.assign({}, c, { pan: s(c, "pan", 0.5) - t })), o = e(n.withValue((c) => Object.assign({}, c, { pan: s(c, "pan", 0.5) + t })));
  return B(r, o).setSteps(L ? U(r._steps, o._steps) : void 0);
});
var Fl = l("jux", function(t, e) {
  return e._juxBy(1, t, e);
});
var { echoWith: Dl, echowith: Gl, stutWith: Ql, stutwith: Ul } = l(
  ["echoWith", "echowith", "stutWith", "stutwith"],
  function(t, e, n, s) {
    return B(...Vt(0, t - 1).map((r) => n(s.late(d(e).mul(r)), r)));
  }
);
var Kl = l("echo", function(t, e, n, s) {
  return s._echoWith(t, e, (r, o) => r.gain(Math.pow(n, o)));
});
var Xl = l("stut", function(t, e, n, s) {
  return s._echoWith(t, n, (r, o) => r.gain(Math.pow(e, o)));
});
var qt = function(t, e, n = false) {
  return t = d(t), K(
    ...Vt(0, t.sub(1)).map(
      (s) => n ? e.late(d(s).div(t)) : e.early(d(s).div(t))
    )
  );
};
var Yl = l(
  "iter",
  function(t, e) {
    return qt(t, e, false);
  },
  true,
  true
);
var { iterBack: Zl, iterback: tp } = l(
  ["iterBack", "iterback"],
  function(t, e) {
    return qt(t, e, true);
  },
  true,
  true
);
var { repeatCycles: ep } = l(
  "repeatCycles",
  function(t, e) {
    return new f(function(n) {
      const s = n.span.begin.sam(), r = s.div(t).sam(), o = s.sub(r);
      return n = n.withSpan((c) => c.withTime((u) => u.sub(o))), e.query(n).map((c) => c.withSpan((u) => u.withTime((a) => a.add(o))));
    }).splitQueries();
  },
  true,
  true
);
var At = function(t, e, n, s = false, r = false) {
  const o = Array(t - 1).fill(false);
  o.unshift(true);
  const c = qt(t, D(...o), !s);
  return r || (n = n.repeatCycles(t)), n.when(c, e);
};
var { chunk: np, slowchunk: sp, slowChunk: rp } = l(
  ["chunk", "slowchunk", "slowChunk"],
  function(t, e, n) {
    return At(t, e, n, false, false);
  },
  true,
  true
);
var { chunkBack: op, chunkback: ip } = l(
  ["chunkBack", "chunkback"],
  function(t, e, n) {
    return At(t, e, n, true);
  },
  true,
  true
);
var { fastchunk: cp, fastChunk: up } = l(
  ["fastchunk", "fastChunk"],
  function(t, e, n) {
    return At(t, e, n, false, true);
  },
  true,
  true
);
var { chunkinto: ap, chunkInto: lp } = l(["chunkinto", "chunkInto"], function(t, e, n) {
  return n.into(N(true, ...Array(t - 1).fill(false))._iterback(t), e);
});
var { chunkbackinto: pp, chunkBackInto: fp } = l(["chunkbackinto", "chunkBackInto"], function(t, e, n) {
  return n.into(
    N(true, ...Array(t - 1).fill(false))._iter(t)._early(1),
    e
  );
});
var hp = l(
  "bypass",
  function(t, e) {
    return t = !!parseInt(t), t ? S : e;
  },
  true,
  true
);
var { ribbon: dp, rib: mp } = l(
  ["ribbon", "rib"],
  (t, e, n) => n.early(t).restart(P2(1).slow(e))
);
var yp = l("hsla", (t, e, n, s, r) => r.color(`hsla(${t}turn,${e * 100}%,${n * 100}%,${s})`));
var gp = l("hsl", (t, e, n, s) => s.color(`hsl(${t}turn,${e * 100}%,${n * 100}%)`));
f.prototype.tag = function(t) {
  return this.withContext((e) => ({ ...e, tags: (e.tags || []).concat([t]) }));
};
var wp = l("filter", (t, e) => e.withHaps((n) => n.filter(t)));
var bp = l("filterWhen", (t, e) => e.filter((n) => t(n.whole.begin)));
var _p = l(
  "within",
  (t, e, n, s) => B(
    n(s.filterWhen((r) => r.cyclePos() >= t && r.cyclePos() <= e)),
    s.filterWhen((r) => r.cyclePos() < t || r.cyclePos() > e)
  )
);
f.prototype.stepJoin = function() {
  const t = this, e = j(...Nt($t(t.queryArc(0, 1))))._steps, n = function(s) {
    const o = t.early(s.span.begin.sam()).query(s.setSpan(new C(d(0), d(1))));
    return j(...Nt($t(o))).query(s);
  };
  return new f(n, e);
};
f.prototype.stepBind = function(t) {
  return this.fmap(t).stepJoin();
};
function Nt(t) {
  const e = t.filter((o, c) => c.hasSteps).reduce((o, c) => o.add(c), d(0)), n = ot(t.map((o, c) => c._steps)).reduce(
    (o, c) => o.add(c),
    d(0)
  ), s = e.eq(0) ? void 0 : n.div(e);
  function r(o, c) {
    return c._steps === void 0 ? [o.mulmaybe(s), c] : [c._steps, c];
  }
  return t.map((o) => r(...o));
}
function $t(t) {
  const e = F(t.map((r) => [r.part.begin, r.part.end])), n = De([d(0), d(1), ...e]);
  return $e(n).map((r) => [
    r[1].sub(r[0]),
    B(...mn(new C(...r), t).map((o) => o.value.withHap((c) => c.setContext(c.combineContext(o)))))
  ]);
}
function mn(t, e) {
  return ot(e.map((n) => yn(t, n)));
}
function yn(t, e) {
  const n = t.intersection(e.part);
  if (n != null)
    return new x(e.whole, n, e.value, e.context);
}
var gn = l("pace", function(t, e) {
  return e._steps === void 0 ? e : e._steps.eq(d(0)) ? R : e._fast(d(t).div(e._steps)).setSteps(t);
});
function wn(t, ...e) {
  const n = e.map((r) => wt(r));
  if (n.length == 0)
    return S;
  t == 0 && (t = n[0][1]);
  const s = [];
  for (const r of n)
    r[1] != 0 && (t == r[1] ? s.push(r[0]) : s.push(r[0]._fast(d(t).div(d(r[1])))));
  return B(...s);
}
function St(...t) {
  if (Array.isArray(t[0]))
    return wn(0, ...t);
  if (t = t.filter((s) => s.hasSteps), t.length == 0)
    return S;
  const e = U(...t.map((s) => s._steps));
  if (e.eq(d(0)))
    return R;
  const n = B(...t.map((s) => s.pace(e)));
  return n._steps = e, n;
}
function j(...t) {
  if (t.length === 0)
    return R;
  const e = (c) => Array.isArray(c) ? c : [c._steps ?? 1, c];
  if (t = t.map(e), t.find((c) => c[0] === void 0)) {
    const c = t.map((a) => a[0]).filter((a) => a !== void 0);
    if (c.length === 0)
      return N(...t.map((a) => a[1]));
    if (c.length === t.length)
      return R;
    const u = c.reduce((a, p) => a.add(p), d(0)).div(c.length);
    for (let a of t)
      a[0] === void 0 && (a[0] = u);
  }
  if (t.length == 1)
    return h(t[0][1]).withSteps((u) => t[0][0]);
  const n = t.map((c) => c[0]).reduce((c, u) => c.add(u), d(0));
  let s = d(0);
  const r = [];
  for (const [c, u] of t) {
    if (d(c).eq(0))
      continue;
    const a = s.add(c);
    r.push(h(u)._compress(s.div(n), a.div(n))), s = a;
  }
  const o = B(...r);
  return o._steps = n, o;
}
function bn(...t) {
  t = t.map((r) => Array.isArray(r) ? r.map(h) : [h(r)]);
  const e = U(...t.map((r) => d(r.length)));
  let n = [];
  for (let r = 0; r < e; ++r)
    n.push(...t.map((o) => o.length == 0 ? S : o[r % o.length]));
  n = n.filter((r) => r.hasSteps && r._steps > 0);
  const s = n.reduce((r, o) => r.add(o._steps), d(0));
  return n = j(...n), n._steps = s, n;
}
var _n = ct("take", function(t, e) {
  if (!e.hasSteps || e._steps.lte(0) || (t = d(t), t.eq(0)))
    return R;
  const n = t < 0;
  n && (t = t.abs());
  const s = t.div(e._steps);
  return s.lte(0) ? R : s.gte(1) ? e : n ? e.zoom(d(1).sub(s), 1) : e.zoom(0, s);
});
var vn = ct("drop", function(t, e) {
  return e.hasSteps ? (t = d(t), t.lt(0) ? e.take(e._steps.add(t)) : e.take(d(0).sub(e._steps.sub(t)))) : R;
});
var kn = ct("extend", function(t, e) {
  return e.fast(t).expand(t);
});
var qn = ct("expand", function(t, e) {
  return e.withSteps((n) => n.mul(d(t)));
});
var An = ct("contract", function(t, e) {
  return e.withSteps((n) => n.div(d(t)));
});
f.prototype.shrinklist = function(t) {
  const e = this;
  if (!e.hasSteps)
    return [e];
  let [n, s] = Array.isArray(t) ? t : [t, e._steps];
  if (n = d(n), s === 0 || n === 0)
    return [e];
  const r = n > 0, o = [];
  if (r) {
    const c = d(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = c.mul(u);
      if (a.gt(1))
        break;
      o.push([a, 1]);
    }
  } else {
    n = d(0).sub(n);
    const c = d(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = d(1).sub(c.mul(u));
      if (a.lt(0))
        break;
      o.push([d(0), a]);
    }
  }
  return o.map((c) => e.zoom(...c));
};
var Sn = (t, e) => e.shrinklist(t);
var Tn = l(
  "shrink",
  function(t, e) {
    if (!e.hasSteps)
      return R;
    const n = e.shrinklist(t), s = j(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), d(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var vp = l(
  "grow",
  function(t, e) {
    if (!e.hasSteps)
      return R;
    const n = e.shrinklist(d(0).sub(t));
    n.reverse();
    const s = j(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), d(0)), s;
  },
  true,
  false,
  (t) => t.stepJoin()
);
var xn = function(t, ...e) {
  return t.tour(...e);
};
f.prototype.tour = function(...t) {
  return j(
    ...[].concat(
      ...t.map((e, n) => [...t.slice(0, t.length - n), this, ...t.slice(t.length - n)]),
      this,
      ...t
    )
  );
};
var Cn = function(...t) {
  t = t.filter((s) => s.hasSteps);
  const e = K(...t.map((s) => s._slow(s._steps))), n = U(...t.map((s) => s._steps));
  return e._fast(n).setSteps(n);
};
var kp = j;
var Bn = j;
var qp = j;
var Ap = bn;
var Sp = St;
f.prototype.s_polymeter = f.prototype.polymeter;
var Tp = Tn;
f.prototype.s_taper = f.prototype.shrink;
var xp = Sn;
f.prototype.s_taperlist = f.prototype.shrinklist;
var Cp = _n;
f.prototype.s_add = f.prototype.take;
var Bp = vn;
f.prototype.s_sub = f.prototype.drop;
var Op = qn;
f.prototype.s_expand = f.prototype.expand;
var zp = kn;
f.prototype.s_extend = f.prototype.extend;
var Ep = An;
f.prototype.s_contract = f.prototype.contract;
var Mp = xn;
f.prototype.s_tour = f.prototype.tour;
var Jp = Cn;
f.prototype.s_zip = f.prototype.zip;
var jp = gn;
f.prototype.steps = f.prototype.pace;
var Pp = l("chop", function(t, e) {
  const s = Array.from({ length: t }, (c, u) => u).map((c) => ({ begin: c / t, end: (c + 1) / t })), r = function(c, u) {
    if ("begin" in c && "end" in c && c.begin !== void 0 && c.end !== void 0) {
      const a = c.end - c.begin;
      u = { begin: c.begin + u.begin * a, end: c.begin + u.end * a };
    }
    return Object.assign({}, c, u);
  }, o = function(c) {
    return D(s.map((u) => r(c, u)));
  };
  return e.squeezeBind(o).setSteps(L ? d(t).mulmaybe(e._steps) : void 0);
});
var Np = l("striate", function(t, e) {
  const s = Array.from({ length: t }, (o, c) => c).map((o) => ({ begin: o / t, end: (o + 1) / t })), r = K(...s);
  return e.set(r)._fast(t).setSteps(L ? d(t).mulmaybe(e._steps) : void 0);
});
var Xt = function(t, e, n = 0.5) {
  return e.speed(1 / t * n).unit("c").slow(t);
};
var On = l(
  "slice",
  function(t, e, n) {
    return t.innerBind(
      (s) => e.outerBind(
        (r) => n.outerBind((o) => {
          o = o instanceof Object ? o : { s: o };
          const c = Array.isArray(s) ? s[r] : r / s, u = Array.isArray(s) ? s[r + 1] : (r + 1) / s;
          return P2({ begin: c, end: u, _slices: s, ...o });
        })
      )
    ).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
f.prototype.onTriggerTime = function(t) {
  return this.onTrigger((e, n, s, r) => {
    const o = r - n;
    window.setTimeout(() => {
      t(e);
    }, o * 1e3);
  }, false);
};
var $p = l(
  "splice",
  function(t, e, n) {
    const s = On(t, e, n);
    return new f((r) => {
      const o = r.controls._cps || 1;
      return s.query(r).map(
        (u) => u.withValue((a) => ({
          speed: o / a._slices / u.whole.duration * (a.speed || 1),
          unit: "c",
          ...a
        }))
      );
    }).setSteps(e._steps);
  },
  false
  // turns off auto-patternification
);
var { loopAt: Rp, loopat: Wp } = l(["loopAt", "loopat"], function(t, e) {
  const n = e._steps ? e._steps.div(t) : void 0;
  return new f((s) => Xt(t, e, s.controls._cps).query(s), n);
});
var Lp = l(
  "fit",
  (t) => t.withHaps(
    (e, n) => e.map(
      (s) => s.withValue((r) => {
        const o = ("end" in r ? r.end : 1) - ("begin" in r ? r.begin : 0);
        return {
          ...r,
          speed: (n.controls._cps || 1) / s.whole.duration * o,
          unit: "c"
        };
      })
    )
  )
);
var { loopAtCps: Ip, loopatcps: Hp } = l(["loopAtCps", "loopatcps"], function(t, e, n) {
  return Xt(t, n, e);
});
var Vp = (t) => P2(1).withValue(() => h(t())).innerJoin();
var Rt = (t) => t < 0.5 ? 1 : 1 - (t - 0.5) / 0.5;
var zn = (t, e, n) => {
  e = h(e), t = h(t), n = h(n);
  let s = e.fmap((o) => ({ gain: Rt(o) })), r = e.fmap((o) => ({ gain: Rt(1 - o) }));
  return B(t.mul(s), n.mul(r));
};
f.prototype.xfade = function(t, e) {
  return zn(this, t, e);
};
var En = (t) => (e, n, s) => {
  e = d(e).mod(n), n = d(n);
  const r = e.div(n), o = e.add(1).div(n);
  return t(s.fmap((c) => P2(c)._compress(r, o)));
};
var { beat: Fp } = l(
  ["beat"],
  En((t) => t.innerJoin())
);
var Yt = (t, e, n) => {
  n = d(n);
  const s = d(1).div(t.length), r = (u) => {
    const a = [];
    for (const [p, m] of u.entries())
      m && a.push([d(p).div(u.length), m]);
    return a;
  }, o = vt(
    ([u, a], [p, m]) => {
      const y = n.mul(p - u).add(u), b = y.add(s);
      return new C(y, b);
    },
    r(t),
    r(e)
  );
  function c(u) {
    const a = u.span.begin.sam(), p = u.span.cycleArc(), m = [];
    for (const y of o) {
      const b = y.intersection(p);
      b !== void 0 && m.push(
        new x(
          y.withTime((w) => w.add(a)),
          b.withTime((w) => w.add(a)),
          true
        )
      );
    }
    return m;
  }
  return new f(c).splitQueries();
};
var Dp = (t, e, n) => (t = h(t), e = h(e), n = h(n), t.innerBind((s) => e.innerBind((r) => n.innerBind((o) => Yt(s, r, o)))));
function Tt(t) {
  let e = Array.isArray(t);
  t = e ? t : [t];
  const n = t[0], s = (o) => {
    let c;
    if (typeof o == "object" && o.value !== void 0 && (c = { ...o }, o = o.value, delete c.value), e && Array.isArray(o)) {
      const u = c || {};
      return o.forEach((a, p) => {
        p < t.length && (u[t[p]] = a);
      }), u;
    } else return c ? (c[n] = o, c) : { [n]: o };
  }, r = function(o, c) {
    return c ? typeof o > "u" ? c.fmap(s) : c.set(h(o).withValue(s)) : h(o).withValue(s);
  };
  return f.prototype[n] = function(o) {
    return r(o, this);
  }, r;
}
var st = /* @__PURE__ */ new Map();
function Mn(t) {
  return st.has(t);
}
function i(t, ...e) {
  const n = Array.isArray(t) ? t[0] : t;
  let s = {};
  return s[n] = Tt(t), st.set(n, n), e.forEach((r) => {
    s[r] = s[n], st.set(r, n), f.prototype[r] = f.prototype[n];
  }), s;
}
var { s: Jn, sound: jn } = i(["s", "n", "gain"], "sound");
var { source: Pn, src: Nn } = i("source", "src");
var { n: $n } = i("n");
var { note: Rn } = i(["note", "n"]);
var { accelerate: Wn } = i("accelerate");
var { velocity: Ln } = i("velocity");
var { gain: In } = i("gain");
var { postgain: Hn } = i("postgain");
var { amp: Vn } = i("amp");
var { attack: Fn, att: Dn } = i("attack", "att");
var { fmh: Gn } = i(["fmh", "fmi"], "fmh");
var { fmi: Qn, fm: Un } = i(["fmi", "fmh"], "fm");
var { fmenv: Kn } = i("fmenv");
var { fmattack: Xn } = i("fmattack");
var { fmwave: Yn } = i("fmwave");
var { fmdecay: Zn } = i("fmdecay");
var { fmsustain: ts } = i("fmsustain");
var { fmrelease: es } = i("fmrelease");
var { fmvelocity: ns } = i("fmvelocity");
var { bank: ss } = i("bank");
var { analyze: rs } = i("analyze");
var { fft: os } = i("fft");
var { decay: is, dec: cs } = i("decay", "dec");
var { sustain: us, sus: as } = i("sustain", "sus");
var { release: ls, rel: ps } = i("release", "rel");
var { hold: fs } = i("hold");
var { bandf: hs, bpf: ds, bp: ms } = i(["bandf", "bandq", "bpenv"], "bpf", "bp");
var { bandq: ys, bpq: gs } = i("bandq", "bpq");
var { begin: ws } = i("begin");
var { end: bs } = i("end");
var { loop: _s } = i("loop");
var { loopBegin: vs, loopb: ks } = i("loopBegin", "loopb");
var { loopEnd: qs, loope: As } = i("loopEnd", "loope");
var { crush: Ss } = i("crush");
var { coarse: Ts } = i("coarse");
var { tremolo: xs } = i(["tremolo", "tremolodepth", "tremoloskew", "tremolophase"], "trem");
var { tremolosync: Cs } = i(
  ["tremolosync", "tremolodepth", "tremoloskew", "tremolophase"],
  "tremsync"
);
var { tremolodepth: Bs } = i("tremolodepth", "tremdepth");
var { tremoloskew: Os } = i("tremoloskew", "tremskew");
var { tremolophase: zs } = i("tremolophase", "tremphase");
var { tremoloshape: Es } = i("tremoloshape", "tremshape");
var { duck: Ms } = i("duckorbit", "duck");
var { duckdepth: Js } = i("duckdepth");
var { duckattack: js } = i("duckattack", "duckatt");
var { drive: Ps } = i("drive");
var { byteBeatExpression: Ns, bbexpr: $s } = i("byteBeatExpression", "bbexpr");
var { byteBeatStartTime: Rs, bbst: Ws } = i("byteBeatStartTime", "bbst");
var { channels: Ls, ch: Is } = i("channels", "ch");
var { pw: Hs } = i(["pw", "pwrate", "pwsweep"]);
var { pwrate: Vs } = i("pwrate");
var { pwsweep: Fs } = i("pwsweep");
var { phaserrate: Ds, ph: Gs, phaser: Qs } = i(
  ["phaserrate", "phaserdepth", "phasercenter", "phasersweep"],
  "ph",
  "phaser"
);
var { phasersweep: Us, phs: Ks } = i("phasersweep", "phs");
var { phasercenter: Xs, phc: Ys } = i("phasercenter", "phc");
var { phaserdepth: Zs, phd: tr, phasdp: er } = i("phaserdepth", "phd", "phasdp");
var { channel: nr } = i("channel");
var { cut: sr } = i("cut");
var { cutoff: rr, ctf: or, lpf: ir, lp: cr } = i(["cutoff", "resonance", "lpenv"], "ctf", "lpf", "lp");
var { lpenv: ur, lpe: ar } = i("lpenv", "lpe");
var { hpenv: lr, hpe: pr } = i("hpenv", "hpe");
var { bpenv: fr, bpe: hr } = i("bpenv", "bpe");
var { lpattack: dr, lpa: mr } = i("lpattack", "lpa");
var { hpattack: yr, hpa: gr } = i("hpattack", "hpa");
var { bpattack: wr, bpa: br } = i("bpattack", "bpa");
var { lpdecay: _r, lpd: vr } = i("lpdecay", "lpd");
var { hpdecay: kr, hpd: qr } = i("hpdecay", "hpd");
var { bpdecay: Ar, bpd: Sr } = i("bpdecay", "bpd");
var { lpsustain: Tr, lps: xr } = i("lpsustain", "lps");
var { hpsustain: Cr, hps: Br } = i("hpsustain", "hps");
var { bpsustain: Or, bps: zr } = i("bpsustain", "bps");
var { lprelease: Er, lpr: Mr } = i("lprelease", "lpr");
var { hprelease: Jr, hpr: jr } = i("hprelease", "hpr");
var { bprelease: Pr, bpr: Nr } = i("bprelease", "bpr");
var { ftype: $r } = i("ftype");
var { fanchor: Rr } = i("fanchor");
var { vib: Wr, vibrato: Lr, v: Ir } = i(["vib", "vibmod"], "vibrato", "v");
var { noise: Hr } = i("noise");
var { vibmod: Vr, vmod: Fr } = i(["vibmod", "vib"], "vmod");
var { hcutoff: Dr, hpf: Gr, hp: Qr } = i(["hcutoff", "hresonance", "hpenv"], "hpf", "hp");
var { hresonance: Ur, hpq: Kr } = i("hresonance", "hpq");
var { resonance: Xr, lpq: Yr } = i("resonance", "lpq");
var { djf: Zr } = i("djf");
var { delay: to } = i(["delay", "delaytime", "delayfeedback"]);
var { delayfeedback: eo, delayfb: no, dfb: so } = i("delayfeedback", "delayfb", "dfb");
var { delaytime: ro, delayt: oo, dt: io } = i("delaytime", "delayt", "dt");
var { delaysync: co } = i("delaysync");
var { lock: uo } = i("lock");
var { detune: ao, det: lo } = i("detune", "det");
var { unison: po } = i("unison");
var { spread: fo } = i("spread");
var { dry: ho } = i("dry");
var { fadeTime: mo, fadeOutTime: yo } = i("fadeTime", "fadeOutTime");
var { fadeInTime: go } = i("fadeInTime");
var { freq: wo } = i("freq");
var { pattack: bo, patt: _o } = i("pattack", "patt");
var { pdecay: vo, pdec: ko } = i("pdecay", "pdec");
var { psustain: qo, psus: Ao } = i("psustain", "psus");
var { prelease: So, prel: To } = i("prelease", "prel");
var { penv: xo } = i("penv");
var { pcurve: Co } = i("pcurve");
var { panchor: Bo } = i("panchor");
var { gate: Oo, gat: zo } = i("gate", "gat");
var { leslie: Eo } = i("leslie");
var { lrate: Mo } = i("lrate");
var { lsize: Jo } = i("lsize");
var { activeLabel: jo } = i("activeLabel");
var { label: Po } = i(["label", "activeLabel"]);
var { degree: No } = i("degree");
var { mtranspose: $o } = i("mtranspose");
var { ctranspose: Ro } = i("ctranspose");
var { harmonic: Wo } = i("harmonic");
var { stepsPerOctave: Lo } = i("stepsPerOctave");
var { octaveR: Io } = i("octaveR");
var { nudge: Ho } = i("nudge");
var { octave: Vo } = i("octave");
var { orbit: Fo } = i("orbit");
var { overgain: Do } = i("overgain");
var { overshape: Go } = i("overshape");
var { pan: Qo } = i("pan");
var { panspan: Uo } = i("panspan");
var { pansplay: Ko } = i("pansplay");
var { panwidth: Xo } = i("panwidth");
var { panorient: Yo } = i("panorient");
var { rate: Zo } = i("rate");
var { slide: ti } = i("slide");
var { semitone: ei } = i("semitone");
var { voice: ni } = i("voice");
var { chord: si } = i("chord");
var { dictionary: ri, dict: oi } = i("dictionary", "dict");
var { anchor: ii } = i("anchor");
var { offset: ci } = i("offset");
var { octaves: ui } = i("octaves");
var { mode: ai } = i(["mode", "anchor"]);
var { room: li } = i(["room", "size"]);
var { roomlp: pi, rlp: fi } = i("roomlp", "rlp");
var { roomdim: hi, rdim: di } = i("roomdim", "rdim");
var { roomfade: mi, rfade: yi } = i("roomfade", "rfade");
var { ir: gi, iresponse: wi } = i(["ir", "i"], "iresponse");
var { irspeed: bi } = i("irspeed");
var { irbegin: _i } = i("irbegin");
var { roomsize: vi, size: ki, sz: qi, rsize: Ai } = i("roomsize", "size", "sz", "rsize");
var { shape: Si } = i(["shape", "shapevol"]);
var { distort: Ti, dist: xi } = i(["distort", "distortvol"], "dist");
var { compressor: Ci } = i([
  "compressor",
  "compressorRatio",
  "compressorKnee",
  "compressorAttack",
  "compressorRelease"
]);
var { compressorKnee: Bi } = i("compressorKnee");
var { compressorRatio: Oi } = i("compressorRatio");
var { compressorAttack: zi } = i("compressorAttack");
var { compressorRelease: Ei } = i("compressorRelease");
var { speed: Zt } = i("speed");
var { stretch: Mi } = i("stretch");
var { unit: Ji } = i("unit");
var { squiz: ji } = i("squiz");
var { vowel: Pi } = i("vowel");
var { waveloss: Ni } = i("waveloss");
var { density: $i } = i("density");
var { expression: Ri } = i("expression");
var { sustainpedal: Wi } = i("sustainpedal");
var { fshift: Li } = i("fshift");
var { fshiftnote: Ii } = i("fshiftnote");
var { fshiftphase: Hi } = i("fshiftphase");
var { triode: Vi } = i("triode");
var { krush: Fi } = i("krush");
var { kcutoff: Di } = i("kcutoff");
var { octer: Gi } = i("octer");
var { octersub: Qi } = i("octersub");
var { octersubsub: Ui } = i("octersubsub");
var { ring: Ki } = i("ring");
var { ringf: Xi } = i("ringf");
var { ringdf: Yi } = i("ringdf");
var { freeze: Zi } = i("freeze");
var { xsdelay: tc } = i("xsdelay");
var { tsdelay: ec } = i("tsdelay");
var { real: nc } = i("real");
var { imag: sc } = i("imag");
var { enhance: rc } = i("enhance");
var { partials: oc } = i("partials");
var { comb: ic } = i("comb");
var { smear: cc } = i("smear");
var { scram: uc } = i("scram");
var { binshift: ac } = i("binshift");
var { hbrick: lc } = i("hbrick");
var { lbrick: pc } = i("lbrick");
var { frameRate: fc } = i("frameRate");
var { frames: hc } = i("frames");
var { hours: dc } = i("hours");
var { minutes: mc } = i("minutes");
var { seconds: yc } = i("seconds");
var { songPtr: gc } = i("songPtr");
var { uid: wc } = i("uid");
var { val: bc } = i("val");
var { cps: _c } = i("cps");
var { clip: vc, legato: kc } = i("clip", "legato");
var { duration: qc, dur: Ac } = i("duration", "dur");
var { zrand: Sc } = i("zrand");
var { curve: Tc } = i("curve");
var { deltaSlide: xc } = i("deltaSlide");
var { pitchJump: Cc } = i("pitchJump");
var { pitchJumpTime: Bc } = i("pitchJumpTime");
var { lfo: Oc, repeatTime: zc } = i("lfo", "repeatTime");
var { znoise: Ec } = i("znoise");
var { zmod: Mc } = i("zmod");
var { zcrush: Jc } = i("zcrush");
var { zdelay: jc } = i("zdelay");
var { zzfx: Pc } = i("zzfx");
var { color: Nc, colour: $c } = i(["color", "colour"]);
var Rc = (...t) => t.reduce((e, n) => Object.assign(e, { [n]: Tt(n) }), {});
var Wc = l("adsr", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s, r, o] = t;
  return e.set({ attack: n, decay: s, sustain: r, release: o });
});
var Lc = l("ad", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.attack(n).decay(s);
});
var Ic = l("ds", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = 0] = t;
  return e.set({ decay: n, sustain: s });
});
var Hc = l("ar", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.set({ attack: n, release: s });
});
var { midichan: Vc } = i("midichan");
var { midimap: Fc } = i("midimap");
var { midiport: Dc } = i("midiport");
var { midicmd: Gc } = i("midicmd");
var Qc = l("control", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("control expects an array of [ccn, ccv]");
  const [n, s] = t;
  return e.ccn(n).ccv(s);
});
var { ccn: Uc } = i("ccn");
var { ccv: Kc } = i("ccv");
var { ctlNum: Xc } = i("ctlNum");
var { nrpnn: Yc } = i("nrpnn");
var { nrpv: Zc } = i("nrpv");
var { progNum: tu } = i("progNum");
var eu = l("sysex", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("sysex expects an array of [id, data]");
  const [n, s] = t;
  return e.sysexid(n).sysexdata(s);
});
var { sysexid: nu } = i("sysexid");
var { sysexdata: su } = i("sysexdata");
var { midibend: ru } = i("midibend");
var { miditouch: ou } = i("miditouch");
var { polyTouch: iu } = i("polyTouch");
var te = (t) => st.has(t) ? st.get(t) : t;
var cu = l("as", (t, e) => (t = Array.isArray(t) ? t : [t], e.fmap((n) => (n = Array.isArray(n) ? n : [n], n = Object.fromEntries(t.map((s, r) => [te(s), n[r]])), n))));
var uu = l(
  "scrub",
  (t, e) => t.outerBind((n) => {
    Array.isArray(n) || (n = [n]);
    const [s, r = 1] = n;
    return e.begin(s).mul(Zt(r)).clip(1);
  }),
  false
);
var Gp = Object.freeze(Object.defineProperty({
  __proto__: null,
  accelerate: Wn,
  activeLabel: jo,
  ad: Lc,
  adsr: Wc,
  amp: Vn,
  analyze: rs,
  anchor: ii,
  ar: Hc,
  as: cu,
  att: Dn,
  attack: Fn,
  bandf: hs,
  bandq: ys,
  bank: ss,
  bbexpr: $s,
  bbst: Ws,
  begin: ws,
  binshift: ac,
  bp: ms,
  bpa: br,
  bpattack: wr,
  bpd: Sr,
  bpdecay: Ar,
  bpe: hr,
  bpenv: fr,
  bpf: ds,
  bpq: gs,
  bpr: Nr,
  bprelease: Pr,
  bps: zr,
  bpsustain: Or,
  byteBeatExpression: Ns,
  byteBeatStartTime: Rs,
  ccn: Uc,
  ccv: Kc,
  ch: Is,
  channel: nr,
  channels: Ls,
  chord: si,
  clip: vc,
  coarse: Ts,
  color: Nc,
  colour: $c,
  comb: ic,
  compressor: Ci,
  compressorAttack: zi,
  compressorKnee: Bi,
  compressorRatio: Oi,
  compressorRelease: Ei,
  control: Qc,
  cps: _c,
  createParam: Tt,
  createParams: Rc,
  crush: Ss,
  ctf: or,
  ctlNum: Xc,
  ctranspose: Ro,
  curve: Tc,
  cut: sr,
  cutoff: rr,
  dec: cs,
  decay: is,
  degree: No,
  delay: to,
  delayfb: no,
  delayfeedback: eo,
  delaysync: co,
  delayt: oo,
  delaytime: ro,
  deltaSlide: xc,
  density: $i,
  det: lo,
  detune: ao,
  dfb: so,
  dict: oi,
  dictionary: ri,
  dist: xi,
  distort: Ti,
  djf: Zr,
  drive: Ps,
  dry: ho,
  ds: Ic,
  dt: io,
  duck: Ms,
  duckattack: js,
  duckdepth: Js,
  dur: Ac,
  duration: qc,
  end: bs,
  enhance: rc,
  expression: Ri,
  fadeInTime: go,
  fadeOutTime: yo,
  fadeTime: mo,
  fanchor: Rr,
  fft: os,
  fm: Un,
  fmattack: Xn,
  fmdecay: Zn,
  fmenv: Kn,
  fmh: Gn,
  fmi: Qn,
  fmrelease: es,
  fmsustain: ts,
  fmvelocity: ns,
  fmwave: Yn,
  frameRate: fc,
  frames: hc,
  freeze: Zi,
  freq: wo,
  fshift: Li,
  fshiftnote: Ii,
  fshiftphase: Hi,
  ftype: $r,
  gain: In,
  gat: zo,
  gate: Oo,
  getControlName: te,
  harmonic: Wo,
  hbrick: lc,
  hcutoff: Dr,
  hold: fs,
  hours: dc,
  hp: Qr,
  hpa: gr,
  hpattack: yr,
  hpd: qr,
  hpdecay: kr,
  hpe: pr,
  hpenv: lr,
  hpf: Gr,
  hpq: Kr,
  hpr: jr,
  hprelease: Jr,
  hps: Br,
  hpsustain: Cr,
  hresonance: Ur,
  imag: sc,
  ir: gi,
  irbegin: _i,
  iresponse: wi,
  irspeed: bi,
  isControlName: Mn,
  kcutoff: Di,
  krush: Fi,
  label: Po,
  lbrick: pc,
  legato: kc,
  leslie: Eo,
  lfo: Oc,
  lock: uo,
  loop: _s,
  loopBegin: vs,
  loopEnd: qs,
  loopb: ks,
  loope: As,
  lp: cr,
  lpa: mr,
  lpattack: dr,
  lpd: vr,
  lpdecay: _r,
  lpe: ar,
  lpenv: ur,
  lpf: ir,
  lpq: Yr,
  lpr: Mr,
  lprelease: Er,
  lps: xr,
  lpsustain: Tr,
  lrate: Mo,
  lsize: Jo,
  midibend: ru,
  midichan: Vc,
  midicmd: Gc,
  midimap: Fc,
  midiport: Dc,
  miditouch: ou,
  minutes: mc,
  mode: ai,
  mtranspose: $o,
  n: $n,
  noise: Hr,
  note: Rn,
  nrpnn: Yc,
  nrpv: Zc,
  nudge: Ho,
  octave: Vo,
  octaveR: Io,
  octaves: ui,
  octer: Gi,
  octersub: Qi,
  octersubsub: Ui,
  offset: ci,
  orbit: Fo,
  overgain: Do,
  overshape: Go,
  pan: Qo,
  panchor: Bo,
  panorient: Yo,
  panspan: Uo,
  pansplay: Ko,
  panwidth: Xo,
  partials: oc,
  patt: _o,
  pattack: bo,
  pcurve: Co,
  pdec: ko,
  pdecay: vo,
  penv: xo,
  ph: Gs,
  phasdp: er,
  phaser: Qs,
  phasercenter: Xs,
  phaserdepth: Zs,
  phaserrate: Ds,
  phasersweep: Us,
  phc: Ys,
  phd: tr,
  phs: Ks,
  pitchJump: Cc,
  pitchJumpTime: Bc,
  polyTouch: iu,
  postgain: Hn,
  prel: To,
  prelease: So,
  progNum: tu,
  psus: Ao,
  psustain: qo,
  pw: Hs,
  pwrate: Vs,
  pwsweep: Fs,
  rate: Zo,
  rdim: di,
  real: nc,
  registerControl: i,
  rel: ps,
  release: ls,
  repeatTime: zc,
  resonance: Xr,
  rfade: yi,
  ring: Ki,
  ringdf: Yi,
  ringf: Xi,
  rlp: fi,
  room: li,
  roomdim: hi,
  roomfade: mi,
  roomlp: pi,
  roomsize: vi,
  rsize: Ai,
  s: Jn,
  scram: uc,
  scrub: uu,
  seconds: yc,
  semitone: ei,
  shape: Si,
  size: ki,
  slide: ti,
  smear: cc,
  songPtr: gc,
  sound: jn,
  source: Pn,
  speed: Zt,
  spread: fo,
  squiz: ji,
  src: Nn,
  stepsPerOctave: Lo,
  stretch: Mi,
  sus: as,
  sustain: us,
  sustainpedal: Wi,
  sysex: eu,
  sysexdata: su,
  sysexid: nu,
  sz: qi,
  tremolo: xs,
  tremolodepth: Bs,
  tremolophase: zs,
  tremoloshape: Es,
  tremoloskew: Os,
  tremolosync: Cs,
  triode: Vi,
  tsdelay: ec,
  uid: wc,
  unison: po,
  unit: Ji,
  v: Ir,
  val: bc,
  velocity: Ln,
  vib: Wr,
  vibmod: Vr,
  vibrato: Lr,
  vmod: Fr,
  voice: ni,
  vowel: Pi,
  waveloss: Ni,
  xsdelay: tc,
  zcrush: Jc,
  zdelay: jc,
  zmod: Mc,
  znoise: Ec,
  zrand: Sc,
  zzfx: Pc
}, Symbol.toStringTag, { value: "Module" }));
var au = function(t, e) {
  const [n, s] = t, [r, o] = e, [c, u] = Gt(s, r);
  return [
    [s, n - s],
    [vt((a, p) => a.concat(p), c, o), u]
  ];
};
var lu = function(t, e) {
  const [n, s] = t, [r, o] = e, [c, u] = Gt(n, o);
  return [
    [n, s - n],
    [vt((p, m) => p.concat(m), r, c), u]
  ];
};
var ee = function(t, e) {
  const [n, s] = t;
  return Math.min(n, s) <= 1 ? [t, e] : ee(...n > s ? au(t, e) : lu(t, e));
};
var ne = function(t, e) {
  const n = t < 0, s = Math.abs(t), r = e - s, o = Array(s).fill([1]), c = Array(r).fill([0]), u = ee([s, r], [o, c]), a = F(u[1][0]).concat(F(u[1][1]));
  return n ? a.map((p) => 1 - p) : a;
};
var ft = function(t, e, n) {
  const s = ne(t, e);
  return n ? je(s, -n) : s;
};
var Qp = l("euclid", function(t, e, n) {
  return n.struct(ft(t, e, 0));
});
var Up = l("e", function(t, e) {
  Array.isArray(t) || (t = [t]);
  const [n, s = n, r = 0] = t;
  return e.struct(ft(n, s, r));
});
var { euclidrot: Kp, euclidRot: Xp } = l(["euclidrot", "euclidRot"], function(t, e, n, s) {
  return s.struct(ft(t, e, n));
});
var se = function(t, e, n, s) {
  if (t < 1)
    return S;
  const o = ft(t, e, 0).join("").split("1").slice(1).map((c) => [c.length + 1, true]);
  return s.struct(Bn(...o)).late(d(n).div(e));
};
var Yp = l(["euclidLegato"], function(t, e, n) {
  return se(t, e, 0, n);
});
var Zp = l(["euclidLegatoRot"], function(t, e, n, s) {
  return se(t, e, n, s);
});
var { euclidish: tf, eish: ef } = l(["euclidish", "eish"], function(t, e, n, s) {
  const r = Yt(ne(t, e), new Array(t).fill(1), n);
  return s.struct(r).setSteps(e);
});
function pu(t, e, n = 0.05, s = 0.1, r = 0.1, o = globalThis.setInterval, c = globalThis.clearInterval, u = true) {
  let a = 0, p = 0, m = 10 ** 4, y = 0.01;
  const b = (J) => n = J(n);
  r = r || s / 2;
  const w = () => {
    const J = t(), G = J + s + r;
    for (p === 0 && (p = J + y); p < G; )
      p = u ? Math.round(p * m) / m : p, e(p, n, a, J), p += n, a++;
  };
  let v;
  const k = () => {
    E(), w(), v = o(w, s * 1e3);
  }, E = () => {
    v !== void 0 && c(v), v = void 0;
  };
  return { setDuration: b, start: k, stop: () => {
    a = 0, p = 0, E();
  }, pause: () => E(), duration: n, interval: s, getPhase: () => p, minLatency: y };
}
function nf(t) {
  return new f((e) => [new x(void 0, e.span, t)]);
}
var I = (t) => {
  const e = (n) => [new x(void 0, n.span, t(n.span.begin))];
  return new f(e);
};
var ht = I((t) => t % 1);
var re = ht.toBipolar();
var xt = I((t) => 1 - t % 1);
var oe = xt.toBipolar();
var ie = I((t) => Math.sin(Math.PI * 2 * t));
var fu = ie.fromBipolar();
var sf = fu._early(d(1).div(4));
var rf = ie._early(d(1).div(4));
var hu = I((t) => Math.floor(t * 2 % 2));
var of = hu.toBipolar();
var cf = N(ht, xt);
var uf = N(re, oe);
var af = N(xt, ht);
var lf = N(oe, re);
var ce = I(tt);
var Ct = 0;
var Bt = 0;
typeof window < "u" && document.addEventListener("mousemove", (t) => {
  Ct = t.clientY / document.body.clientHeight, Bt = t.clientX / document.body.clientWidth;
});
var pf = I(() => Ct);
var ff = I(() => Ct);
var hf = I(() => Bt);
var df = I(() => Bt);
var ue = (t) => {
  const e = t << 13 ^ t, n = e >> 17 ^ e;
  return n << 5 ^ n;
};
var du = (t) => t - Math.trunc(t);
var ae = (t) => ue(Math.trunc(du(t / 300) * 536870912));
var le = (t) => t % 536870912 / 536870912;
var rt = (t) => Math.abs(le(ae(t)));
var mu = (t, e) => {
  const n = [];
  for (let s = 0; s < e; ++s)
    n.push(le(t)), t = ue(t);
  return n;
};
var yu = (t, e) => mu(ae(t), e);
var gu = (t) => ht.range(0, t).round().segment(t);
var mf = (t) => {
  const e = h(t).log2(0).floor().add(1);
  return wu(t, e);
};
var wu = (t, e = 16) => {
  e = h(e);
  const n = gu(e).mul(-1).add(e.sub(1));
  return h(t).segment(e).brshift(n).band(P2(1));
};
var bu = (t) => I((e) => {
  const s = yu(e.floor().add(0.5), t).map((o, c) => [o, c]).sort((o, c) => (o[0] > c[0]) - (o[0] < c[0])).map((o) => o[1]), r = e.cyclePos().mul(t).floor() % t;
  return s[r];
})._segment(t);
var pe = (t, e, n) => {
  const s = [...Array(e).keys()].map((r) => n.zoom(d(r).div(e), d(r + 1).div(e)));
  return t.fmap((r) => s[r].repeatCycles(e)._fast(e)).innerJoin();
};
var yf = l("shuffle", (t, e) => pe(bu(t), t, e));
var gf = l("scramble", (t, e) => pe(he(t)._segment(t), t, e));
var W = I(rt);
var wf = W.toBipolar();
var fe = (t) => W.fmap((e) => e < t);
var bf = (t) => h(t).fmap(fe).innerJoin();
var _f = fe(0.5);
var he = (t) => W.fmap((e) => Math.trunc(e * t));
var vf = (t) => h(t).fmap(he).innerJoin();
var de = (t, e) => (e = e.map(h), e.length == 0 ? S : t.range(0, e.length).fmap((n) => {
  const s = Math.min(Math.max(Math.floor(n), 0), e.length - 1);
  return e[s];
}));
var Ot = (t, e) => de(t, e).outerJoin();
var me = (t, e) => de(t, e).innerJoin();
var _u = (...t) => Ot(W, t);
var kf = (...t) => me(W, t);
var qf = _u;
f.prototype.choose = function(...t) {
  return Ot(this, t);
};
f.prototype.choose2 = function(...t) {
  return Ot(this.fromBipolar(), t);
};
var vu = (...t) => me(W.segment(1), t);
var Af = vu;
var ye = function(t, ...e) {
  const n = e.map((u) => h(u[0])), s = [];
  let r = P2(0);
  for (const u of e)
    r = r.add(u[1]), s.push(r);
  const o = cn(s), c = function(u) {
    const a = r.mul(u);
    return o.fmap((p) => (m) => n[p.findIndex((y) => y > m, p)]).appLeft(a);
  };
  return t.bind(c);
};
var ku = (...t) => ye(...t).outerJoin();
var Sf = (...t) => ku(W, ...t);
var qu = (...t) => ye(W.segment(1), ...t).innerJoin();
var Tf = qu;
function Au(t) {
  let e = Math.floor(t), n = e + 1;
  const s = (c) => 6 * c ** 5 - 15 * c ** 4 + 10 * c ** 3;
  return (/* @__PURE__ */ ((c) => (u) => (a) => u + s(c) * (a - u))(t - e))(rt(e))(rt(n));
}
var Su = (t) => t.fmap(Au);
function Tu(t) {
  const e = Math.floor(t), n = e + 1, s = rt(e), r = rt(n) + s, o = (t - e) / (n - e);
  return ((u, a, p) => u + (a - u) * p)(s, r, o) / 2;
}
var xu = (t) => t.fmap(Tu);
var xf = Su(ce.fmap((t) => Number(t)));
var Cf = xu(ce.fmap((t) => Number(t)));
var Bf = l(
  "degradeByWith",
  (t, e, n) => n.fmap((s) => (r) => s).appLeft(t.filterValues((s) => s > e)),
  true,
  true
);
var Of = l(
  "degradeBy",
  function(t, e) {
    return e._degradeByWith(W, t);
  },
  true,
  true
);
var zf = l("degrade", (t) => t._degradeBy(0.5), true, true);
var Ef = l(
  "undegradeBy",
  function(t, e) {
    return e._degradeByWith(
      W.fmap((n) => 1 - n),
      t
    );
  },
  true,
  true
);
var Mf = l("undegrade", (t) => t._undegradeBy(0.5), true, true);
var Jf = l("sometimesBy", function(t, e, n) {
  return h(t).fmap((s) => B(n._degradeBy(s), e(n._undegradeBy(1 - s)))).innerJoin();
});
var jf = l("sometimes", function(t, e) {
  return e._sometimesBy(0.5, t);
});
var Pf = l("someCyclesBy", function(t, e, n) {
  return h(t).fmap(
    (s) => B(
      n._degradeByWith(W._segment(1), s),
      e(n._degradeByWith(W.fmap((r) => 1 - r)._segment(1), 1 - s))
    )
  ).innerJoin();
});
var Nf = l("someCycles", function(t, e) {
  return e._someCyclesBy(0.5, t);
});
var $f = l("often", function(t, e) {
  return e.sometimesBy(0.75, t);
});
var Rf = l("rarely", function(t, e) {
  return e.sometimesBy(0.25, t);
});
var Wf = l("almostNever", function(t, e) {
  return e.sometimesBy(0.1, t);
});
var Lf = l("almostAlways", function(t, e) {
  return e.sometimesBy(0.9, t);
});
var If = l("never", function(t, e) {
  return e;
});
var Hf = l("always", function(t, e) {
  return t(e);
});
function ge(t) {
  Array.isArray(t) === false && (t = [t]);
  const e = Ze();
  return t.every((n) => {
    const s = Ye.get(n) ?? n;
    return e[s];
  });
}
var Vf = l("whenKey", function(t, e, n) {
  return n.when(ge(t), e);
});
var Ff = l("keyDown", function(t) {
  return t.fmap(ge);
});
var H = function(t, e, n = true) {
  const s = Array.isArray(t), r = Object.keys(t).length;
  return t = Ue(t, h), r === 0 ? S : e.fmap((o) => {
    let c = o;
    return s && (c = n ? Math.round(c) % r : Re(Math.round(c), 0, t.length - 1)), t[c];
  });
};
var Cu = function(t, e) {
  return Array.isArray(e) && ([e, t] = [t, e]), Bu(t, e);
};
var Bu = l("pick", function(t, e) {
  return H(t, e, false).innerJoin();
});
var Ou = l("pickmod", function(t, e) {
  return H(t, e, true).innerJoin();
});
var Df = l("pickF", function(t, e, n) {
  return n.apply(Cu(t, e));
});
var Gf = l("pickmodF", function(t, e, n) {
  return n.apply(Ou(t, e));
});
var Qf = l("pickOut", function(t, e) {
  return H(t, e, false).outerJoin();
});
var Uf = l("pickmodOut", function(t, e) {
  return H(t, e, true).outerJoin();
});
var Kf = l("pickRestart", function(t, e) {
  return H(t, e, false).restartJoin();
});
var Xf = l("pickmodRestart", function(t, e) {
  return H(t, e, true).restartJoin();
});
var Yf = l("pickReset", function(t, e) {
  return H(t, e, false).resetJoin();
});
var Zf = l("pickmodReset", function(t, e) {
  return H(t, e, true).resetJoin();
});
var { inhabit: th, pickSqueeze: eh } = l(["inhabit", "pickSqueeze"], function(t, e) {
  return H(t, e, false).squeezeJoin();
});
var { inhabitmod: nh, pickmodSqueeze: sh } = l(["inhabitmod", "pickmodSqueeze"], function(t, e) {
  return H(t, e, true).squeezeJoin();
});
var rh = (t, e) => (e = e.map(h), e.length == 0 ? S : t.fmap((n) => {
  const s = pt(Math.round(n), e.length);
  return e[s];
}).squeezeJoin());
var at;
try {
  at = window?.speechSynthesis;
} catch {
  console.warn("cannot use window: not in browser?");
}
var Wt = at?.getVoices();
function zu(t, e, n) {
  at.cancel();
  const s = new SpeechSynthesisUtterance(t);
  s.lang = e, Wt = at.getVoices();
  const r = Wt.filter((o) => o.lang.includes(e));
  typeof n == "number" ? s.voice = r[n % r.length] : typeof n == "string" && (s.voice = r.find((o) => o.name === o)), speechSynthesis.speak(s);
}
var oh = l("speak", function(t, e, n) {
  return n.onTrigger((s) => {
    zu(s.value, t, e);
  });
});
var Eu = {};
var Mu = async (...t) => {
  const e = await Promise.allSettled(t), n = e.filter((s) => s.status === "fulfilled").map((s) => s.value);
  return e.forEach((s, r) => {
    s.status === "rejected" && console.warn(`evalScope: module with index ${r} could not be loaded:`, s.reason);
  }), n.forEach((s) => {
    Object.entries(s).forEach(([r, o]) => {
      globalThis[r] = o, Eu[r] = o;
    });
  }), n;
};
function Ju(t, e = {}) {
  const { wrapExpression: n = true, wrapAsync: s = true } = e;
  n && (t = `{${t}}`), s && (t = `(async ()=>${t})()`);
  const r = `"use strict";return (${t})`;
  return Function(r)();
}
var ju = async (t, e, n) => {
  let s = {};
  if (e) {
    const c = e(t, n);
    t = c.output, s = c;
  }
  return { mode: "javascript", pattern: await Ju(t, { wrapExpression: !!e }), meta: s };
};
var Pu = class {
  constructor({ onTrigger: e, onToggle: n, getTime: s }) {
    this.started = false, this.cps = 0.5, this.getTime = s, this.time_at_last_tick_message = 0, this.collator = new Ke({ getTargetClockTime: s }), this.onToggle = n, this.latency = 0.1, this.cycle = 0, this.id = Math.round(Date.now() * Math.random()), this.worker = new SharedWorker(new URL(
      /* @vite-ignore */
      "" + new URL("assets/clockworker-ZDiUtESR.js", import.meta.url).href,
      import.meta.url
    )), this.worker.port.start(), this.channel = new BroadcastChannel("strudeltick");
    const r = (c) => {
      const { cps: u, begin: a, end: p, cycle: m, time: y } = c;
      this.cps = u, this.cycle = m;
      const b = this.collator.calculateOffset(y) + y;
      o(a, p, b), this.time_at_last_tick_message = b;
    }, o = (c, u, a) => {
      if (this.started === false)
        return;
      this.pattern.queryArc(c, u, { _cps: this.cps }).forEach((m) => {
        if (m.hasOnset()) {
          const b = Pt(m.whole.begin - this.cycle, this.cps) + a + this.latency, w = Pt(m.duration, this.cps);
          e?.(m, 0, w, this.cps, b);
        }
      });
    };
    this.channel.onmessage = (c) => {
      if (!this.started)
        return;
      const { payload: u, type: a } = c.data;
      switch (a) {
        case "tick":
          r(u);
      }
    };
  }
  sendMessage(e, n) {
    this.worker.port.postMessage({ type: e, payload: n, id: this.id });
  }
  now() {
    const e = (this.getTime() - this.time_at_last_tick_message) * this.cps;
    return this.cycle + e;
  }
  setCps(e = 1) {
    this.sendMessage("cpschange", { cps: e });
  }
  setCycle(e) {
    this.sendMessage("setcycle", { cycle: e });
  }
  setStarted(e) {
    this.sendMessage("toggle", { started: e }), this.started = e, this.onToggle?.(e);
  }
  start() {
    z("[cyclist] start"), this.setStarted(true);
  }
  stop() {
    z("[cyclist] stop"), this.collator.reset(), this.setStarted(false);
  }
  setPattern(e, n = false) {
    this.pattern = e, n && !this.started && this.start();
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var Nu = class {
  constructor({
    interval: e,
    onTrigger: n,
    onToggle: s,
    onError: r,
    getTime: o,
    latency: c = 0.1,
    setInterval: u,
    clearInterval: a,
    beforeStart: p
  }) {
    this.started = false, this.beforeStart = p, this.cps = 0.5, this.num_ticks_since_cps_change = 0, this.lastTick = 0, this.lastBegin = 0, this.lastEnd = 0, this.getTime = o, this.num_cycles_at_cps_change = 0, this.seconds_at_cps_change, this.onToggle = s, this.latency = c, this.clock = pu(
      o,
      // called slightly before each cycle
      (m, y, b, w) => {
        this.num_ticks_since_cps_change === 0 && (this.num_cycles_at_cps_change = this.lastEnd, this.seconds_at_cps_change = m), this.num_ticks_since_cps_change++;
        const k = this.num_ticks_since_cps_change * y * this.cps;
        try {
          const E = this.lastEnd;
          this.lastBegin = E;
          const M = this.num_cycles_at_cps_change + k;
          if (this.lastEnd = M, this.lastTick = m, m < w) {
            console.log("skip query: too late");
            return;
          }
          this.pattern.queryArc(E, M, { _cps: this.cps }).forEach((A) => {
            if (A.hasOnset()) {
              const J = (A.whole.begin - this.num_cycles_at_cps_change) / this.cps + this.seconds_at_cps_change + c, G = A.duration / this.cps, V = J - m;
              n?.(A, V, G, this.cps, J), A.value.cps !== void 0 && this.cps != A.value.cps && (this.cps = A.value.cps, this.num_ticks_since_cps_change = 0);
            }
          });
        } catch (E) {
          Ht(E), r?.(E);
        }
      },
      e,
      // duration of each cycle
      0.1,
      0.1,
      u,
      a
    );
  }
  now() {
    if (!this.started)
      return 0;
    const e = this.getTime() - this.lastTick - this.clock.duration;
    return this.lastBegin + e * this.cps;
  }
  setStarted(e) {
    this.started = e, this.onToggle?.(e);
  }
  async start() {
    if (await this.beforeStart?.(), this.num_ticks_since_cps_change = 0, this.num_cycles_at_cps_change = 0, !this.pattern)
      throw new Error("Scheduler: no pattern set! call .setPattern first.");
    z("[cyclist] start"), this.clock.start(), this.setStarted(true);
  }
  pause() {
    z("[cyclist] pause"), this.clock.pause(), this.setStarted(false);
  }
  stop() {
    z("[cyclist] stop"), this.clock.stop(), this.lastEnd = 0, this.setStarted(false);
  }
  async setPattern(e, n = false) {
    this.pattern = e, n && !this.started && await this.start();
  }
  setCps(e = 0.5) {
    this.cps !== e && (this.cps = e, this.num_ticks_since_cps_change = 0);
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
};
var bt;
function ih() {
  if (!bt)
    throw new Error("no time set! use setTime to define a time source");
  return bt();
}
function Lt(t) {
  bt = t;
}
function ch({
  defaultOutput: t,
  onEvalError: e,
  beforeEval: n,
  beforeStart: s,
  afterEval: r,
  getTime: o,
  transpiler: c,
  onToggle: u,
  editPattern: a,
  onUpdateState: p,
  sync: m = false,
  setInterval: y,
  clearInterval: b,
  id: w,
  mondo: v = false
}) {
  const k = {
    schedulerError: void 0,
    evalError: void 0,
    code: "// LOADING",
    activeCode: "// LOADING",
    pattern: void 0,
    miniLocations: [],
    widgets: [],
    pending: false,
    started: false
  }, E = {
    id: w
  }, M = (_) => {
    Object.assign(k, _), k.isDirty = k.code !== k.activeCode, k.error = k.evalError || k.schedulerError, p?.(k);
  }, X = {
    onTrigger: $u({ defaultOutput: t, getTime: o }),
    getTime: o,
    onToggle: (_) => {
      M({ started: _ }), u?.(_);
    },
    setInterval: y,
    clearInterval: b,
    beforeStart: s
  }, A = m && typeof SharedWorker < "u" ? new Pu(X) : new Nu(X);
  let J = {}, G = 0, V;
  const zt = function() {
    return J = {}, G = 0, V = void 0, S;
  }, Et = async (_, q = true) => (_ = a?.(_) || _, await A.setPattern(_, q), _);
  Lt(() => A.now());
  const we = () => A.stop(), be = () => A.start(), _e = () => A.pause(), ve = () => A.toggle(), dt = (_) => A.setCps(_), Mt = (_) => A.setCps(_ / 60);
  let Y = [];
  const ke = function(_) {
    return Y.push(_), S;
  }, qe = function(_) {
    return V = _, S;
  }, Ae = () => {
    f.prototype.p = function(q) {
      return typeof q == "string" && (q.startsWith("_") || q.endsWith("_")) ? S : (q === "$" && (q = `$${G}`, G++), J[q] = this, this);
    }, f.prototype.q = function(q) {
      return S;
    };
    try {
      for (let q = 1; q < 10; ++q)
        Object.defineProperty(f.prototype, `d${q}`, {
          get() {
            return this.p(q);
          },
          configurable: true
        }), Object.defineProperty(f.prototype, `p${q}`, {
          get() {
            return this.p(q);
          },
          configurable: true
        }), f.prototype[`q${q}`] = S;
    } catch (q) {
      console.warn("injectPatternMethods: error:", q);
    }
    const _ = l("cpm", function(q, mt) {
      return mt._fast(q / 60 / A.cps);
    });
    return Mu({
      all: ke,
      each: qe,
      hush: zt,
      cpm: _,
      setCps: dt,
      setcps: dt,
      setCpm: Mt,
      setcpm: Mt
    });
  };
  return { scheduler: A, evaluate: async (_, q = true, mt = true) => {
    if (!_)
      throw new Error("no code to evaluate");
    try {
      M({ code: _, pending: true }), await Ae(), Lt(() => A.now()), await n?.({ code: _ }), Y = [], mt && zt(), v && (_ = `mondolang\`${_}\``);
      let { pattern: O, meta: yt } = await ju(_, c, E);
      if (Object.keys(J).length) {
        let Q = Object.values(J);
        V && (Q = Q.map((Se) => V(Se))), O = B(...Q);
      } else V && (O = V(O));
      if (Y.length)
        for (let Q in Y)
          O = Y[Q](O);
      if (!Ut(O)) {
        const Q = `got "${typeof evaluated}" instead of pattern`;
        throw new Error(Q + (typeof evaluated == "function" ? ", did you forget to call a function?" : "."));
      }
      return z("[eval] code updated"), O = await Et(O, q), M({
        miniLocations: yt?.miniLocations || [],
        widgets: yt?.widgets || [],
        activeCode: _,
        pattern: O,
        evalError: void 0,
        schedulerError: void 0,
        pending: false
      }), r?.({ code: _, pattern: O, meta: yt }), O;
    } catch (O) {
      z(`[eval] error: ${O.message}`, "error"), console.error(O), M({ evalError: O, pending: false }), e?.(O);
    }
  }, start: be, stop: we, pause: _e, setCps: dt, setPattern: Et, setCode: (_) => M({ code: _ }), toggle: ve, state: k };
}
var $u = ({ getTime: t, defaultOutput: e }) => async (n, s, r, o, c) => {
  try {
    (!n.context.onTrigger || !n.context.dominantTrigger) && await e(n, s, r, o, c), n.context.onTrigger && await n.context.onTrigger(n, t(), o, c);
  } catch (u) {
    Ht(u, "getTrigger");
  }
};
var uh = function(t, e = {}) {
  const n = document.getElementById("code"), s = "background-image:url(" + t + ");background-size:contain;";
  n.style = s;
  const { className: r } = n, o = (a, p) => {
    ({
      style: () => n.style = s + ";" + p,
      className: () => n.className = p + " " + r
    })[a]();
  }, c = Object.entries(e).filter(([a, p]) => typeof p == "function");
  Object.entries(e).filter(([a, p]) => typeof p == "string").forEach(([a, p]) => o(a, p)), c.length;
};
var ah = () => {
  const t = document.getElementById("code");
  t && (t.style = "");
};
z("🌀 @strudel/core loaded 🌀");
globalThis._strudelLoaded && console.warn(
  `@strudel/core was loaded more than once...
This might happen when you have multiple versions of strudel installed. 
Please check with "npm ls @strudel/core".`
);
globalThis._strudelLoaded = true;

export {
  It,
  Ht,
  z,
  Iu,
  _t,
  xe,
  lt,
  et,
  Oe,
  Hu,
  Vu,
  ze,
  Fu,
  pt,
  Me,
  Je,
  Du,
  Gu,
  Qu,
  je,
  Pe,
  Uu,
  ot,
  F,
  tt,
  Ku,
  Vt,
  g,
  Ft,
  Dt,
  $,
  Ne,
  Xu,
  Gt,
  vt,
  $e,
  Re,
  Yu,
  Zu,
  ta,
  De,
  Ge,
  Qe,
  ea,
  na,
  Ue,
  Pt,
  Ke,
  sa,
  Ye,
  Ze,
  Qt,
  d,
  C,
  x,
  nt,
  nn,
  ra,
  oa,
  f,
  ia,
  ca,
  ua,
  aa,
  la,
  it,
  S,
  R,
  P2 as P,
  Ut,
  h,
  cn,
  B,
  un,
  an,
  ln,
  pa,
  K,
  Kt,
  pn,
  fa,
  ha,
  N,
  D,
  fn,
  da,
  ma,
  ya,
  ga,
  wa,
  ba,
  _a,
  va,
  ka,
  qa,
  Aa,
  Sa,
  Ta,
  xa,
  Ca,
  Ba,
  Oa,
  za,
  Ea,
  Ma,
  Ja,
  ja,
  Pa,
  Na,
  $a,
  Ra,
  Wa,
  La,
  Ia,
  Ha,
  Va,
  Fa,
  Da,
  Ga,
  Qa,
  l,
  Ua,
  Ka,
  Xa,
  Ya,
  Za,
  tl,
  el,
  nl,
  sl,
  rl,
  ol,
  il,
  cl,
  ul,
  al,
  ll,
  pl,
  fl,
  hl,
  ml,
  yl,
  gl,
  wl,
  bl,
  _l,
  vl,
  kl,
  ql,
  Al,
  Sl,
  hn,
  Tl,
  xl,
  Cl,
  Bl,
  Ol,
  zl,
  El,
  Ml,
  Jl,
  jl,
  Pl,
  Nl,
  $l,
  Rl,
  dn,
  Wl,
  Ll,
  Il,
  Hl,
  Vl,
  Fl,
  Dl,
  Gl,
  Ql,
  Ul,
  Kl,
  Xl,
  Yl,
  Zl,
  tp,
  ep,
  np,
  sp,
  rp,
  op,
  ip,
  cp,
  up,
  ap,
  lp,
  pp,
  fp,
  hp,
  dp,
  mp,
  yp,
  gp,
  wp,
  bp,
  _p,
  Nt,
  $t,
  mn,
  yn,
  gn,
  wn,
  St,
  j,
  bn,
  _n,
  vn,
  kn,
  qn,
  An,
  Sn,
  Tn,
  vp,
  xn,
  Cn,
  kp,
  Bn,
  qp,
  Ap,
  Sp,
  Tp,
  xp,
  Cp,
  Bp,
  Op,
  zp,
  Ep,
  Mp,
  Jp,
  jp,
  Pp,
  Np,
  On,
  $p,
  Rp,
  Wp,
  Lp,
  Ip,
  Hp,
  Vp,
  zn,
  Fp,
  Yt,
  Dp,
  Tt,
  Mn,
  i,
  Jn,
  jn,
  Pn,
  Nn,
  $n,
  Rn,
  Wn,
  Ln,
  In,
  Hn,
  Vn,
  Fn,
  Dn,
  Gn,
  Qn,
  Un,
  Kn,
  Xn,
  Yn,
  Zn,
  ts,
  es,
  ns,
  ss,
  rs,
  os,
  is,
  cs,
  us,
  as,
  ls,
  ps,
  fs,
  hs,
  ds,
  ms,
  ys,
  gs,
  ws,
  bs,
  _s,
  vs,
  ks,
  qs,
  As,
  Ss,
  Ts,
  xs,
  Cs,
  Bs,
  Os,
  zs,
  Es,
  Ms,
  Js,
  js,
  Ps,
  Ns,
  $s,
  Rs,
  Ws,
  Ls,
  Is,
  Hs,
  Vs,
  Fs,
  Ds,
  Gs,
  Qs,
  Us,
  Ks,
  Xs,
  Ys,
  Zs,
  tr,
  er,
  nr,
  sr,
  rr,
  or,
  ir,
  cr,
  ur,
  ar,
  lr,
  pr,
  fr,
  hr,
  dr,
  mr,
  yr,
  gr,
  wr,
  br,
  _r,
  vr,
  kr,
  qr,
  Ar,
  Sr,
  Tr,
  xr,
  Cr,
  Br,
  Or,
  zr,
  Er,
  Mr,
  Jr,
  jr,
  Pr,
  Nr,
  $r,
  Rr,
  Wr,
  Lr,
  Ir,
  Hr,
  Vr,
  Fr,
  Dr,
  Gr,
  Qr,
  Ur,
  Kr,
  Xr,
  Yr,
  Zr,
  to,
  eo,
  no,
  so,
  ro,
  oo,
  io,
  co,
  uo,
  ao,
  lo,
  po,
  fo,
  ho,
  mo,
  yo,
  go,
  wo,
  bo,
  _o,
  vo,
  ko,
  qo,
  Ao,
  So,
  To,
  xo,
  Co,
  Bo,
  Oo,
  zo,
  Eo,
  Mo,
  Jo,
  jo,
  Po,
  No,
  $o,
  Ro,
  Wo,
  Lo,
  Io,
  Ho,
  Vo,
  Fo,
  Do,
  Go,
  Qo,
  Uo,
  Ko,
  Xo,
  Yo,
  Zo,
  ti,
  ei,
  ni,
  si,
  ri,
  oi,
  ii,
  ci,
  ui,
  ai,
  li,
  pi,
  fi,
  hi,
  di,
  mi,
  yi,
  gi,
  wi,
  bi,
  _i,
  vi,
  ki,
  qi,
  Ai,
  Si,
  Ti,
  xi,
  Ci,
  Bi,
  Oi,
  zi,
  Ei,
  Zt,
  Mi,
  Ji,
  ji,
  Pi,
  Ni,
  Ri,
  Wi,
  Li,
  Ii,
  Hi,
  Vi,
  Fi,
  Di,
  Gi,
  Qi,
  Ui,
  Ki,
  Xi,
  Yi,
  Zi,
  tc,
  ec,
  nc,
  sc,
  rc,
  oc,
  ic,
  cc,
  uc,
  ac,
  lc,
  pc,
  fc,
  hc,
  dc,
  mc,
  yc,
  gc,
  wc,
  bc,
  _c,
  vc,
  kc,
  qc,
  Ac,
  Sc,
  Tc,
  xc,
  Cc,
  Bc,
  Oc,
  zc,
  Ec,
  Mc,
  Jc,
  jc,
  Pc,
  Nc,
  $c,
  Rc,
  Wc,
  Lc,
  Ic,
  Hc,
  Vc,
  Fc,
  Dc,
  Gc,
  Qc,
  Uc,
  Kc,
  Xc,
  Yc,
  Zc,
  tu,
  eu,
  nu,
  su,
  ru,
  ou,
  iu,
  te,
  cu,
  uu,
  Gp,
  ne,
  Qp,
  Up,
  Kp,
  Xp,
  Yp,
  Zp,
  tf,
  ef,
  pu,
  nf,
  I,
  ht,
  re,
  xt,
  oe,
  ie,
  fu,
  sf,
  rf,
  hu,
  of,
  cf,
  uf,
  af,
  lf,
  ce,
  pf,
  ff,
  hf,
  df,
  gu,
  mf,
  wu,
  bu,
  yf,
  gf,
  W,
  wf,
  fe,
  bf,
  _f,
  he,
  vf,
  de,
  Ot,
  me,
  _u,
  kf,
  qf,
  vu,
  Af,
  Sf,
  qu,
  Tf,
  Su,
  xu,
  xf,
  Cf,
  Bf,
  Of,
  zf,
  Ef,
  Mf,
  Jf,
  jf,
  Pf,
  Nf,
  $f,
  Rf,
  Wf,
  Lf,
  If,
  Hf,
  ge,
  Vf,
  Ff,
  Cu,
  Ou,
  Df,
  Gf,
  Qf,
  Uf,
  Kf,
  Xf,
  Yf,
  Zf,
  th,
  eh,
  nh,
  sh,
  rh,
  oh,
  Eu,
  Mu,
  ju,
  Nu,
  ih,
  Lt,
  ch,
  $u,
  uh,
  ah,
  dist_exports
};
//# sourceMappingURL=chunk-XJCAHGCP.js.map
